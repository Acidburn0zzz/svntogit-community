diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 3325465..5a7f495 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,6 +1,6 @@
 cmake_minimum_required(VERSION 3.9.4)
 
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_EXTENSIONS OFF)
 
@@ -8,8 +8,8 @@ if(MSVC)
 	set(PYBIND11_CPP_STANDARD /std:c++14)
 	set(CMAKE_CXX_FLAGS "/W4 /EHsc")
 else()
-	set(PYBIND11_CPP_STANDARD -std=c++11)
-	set(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wno-deprecated-register")
+	set(PYBIND11_CPP_STANDARD -std=c++17)
+	set(CMAKE_CXX_FLAGS "-std=c++17 -Wall -Wno-deprecated-register")
 endif()
 
 # make sure that git submodules are up to date when building
diff --git a/src/opentimelineio/any.h b/src/opentimelineio/any.h
index 2250eb1..b8c2634 100644
--- a/src/opentimelineio/any.h
+++ b/src/opentimelineio/any.h
@@ -1,12 +1,12 @@
 #pragma once
 
-#include "any/any.hpp"
+#include <any>
 #include "opentimelineio/version.h"
 
 namespace opentimelineio { namespace OPENTIMELINEIO_VERSION  {
 
-using linb::any;
-using linb::any_cast;
+using std::any;
+using std::any_cast;
     
 } }
 
diff --git a/src/opentimelineio/optional.h b/src/opentimelineio/optional.h
index 7b6f110..288aea0 100644
--- a/src/opentimelineio/optional.h
+++ b/src/opentimelineio/optional.h
@@ -1,13 +1,13 @@
 #pragma once
 
-#include "nonstd/optional.hpp"
+#include <optional>
 #include "opentimelineio/version.h"
 
 namespace opentimelineio { namespace OPENTIMELINEIO_VERSION  {
     
-using nonstd::optional;
-using nonstd::nullopt;
-using nonstd::nullopt_t;
+using std::optional;
+using std::nullopt;
+using std::nullopt_t;
     
 } }
 
diff --git a/src/py-opentimelineio/opentimelineio-bindings/otio_utils.h b/src/py-opentimelineio/opentimelineio-bindings/otio_utils.h
index d647160..12bf3bc 100644
--- a/src/py-opentimelineio/opentimelineio-bindings/otio_utils.h
+++ b/src/py-opentimelineio/opentimelineio-bindings/otio_utils.h
@@ -14,14 +14,6 @@ using namespace opentimelineio::OPENTIMELINEIO_VERSION;
 
 void install_external_keepalive_monitor(SerializableObject* so, bool apply_now);
 
-namespace pybind11 { namespace detail {
-    template<typename T> struct type_caster<optional<T>>
-        : public optional_caster<optional<T>> {};
-
-    template<> struct type_caster<nullopt_t>
-        : public void_caster<nullopt_t> {};
-}}
-
 template <typename T>
 struct managing_ptr {
     managing_ptr(T* ptr)
