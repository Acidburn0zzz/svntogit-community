From c4c1534f02d1a814061ac5665c729fd8f566784f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Fri, 1 Nov 2013 01:49:44 +0100
Subject: [PATCH 1/2] Add back Cinnamon polkit authentication agent

---
 js/Makefile.am                             |   1 +
 js/ui/main.js                              |   4 +
 js/ui/polkitAuthenticationAgent.js         | 406 +++++++++++++++++++++++++++
 src/Makefile.am                            |   2 +
 src/cinnamon-polkit-authentication-agent.c | 435 +++++++++++++++++++++++++++++
 src/cinnamon-polkit-authentication-agent.h |  33 +++
 6 files changed, 881 insertions(+)
 create mode 100644 js/ui/polkitAuthenticationAgent.js
 create mode 100644 src/cinnamon-polkit-authentication-agent.c
 create mode 100644 src/cinnamon-polkit-authentication-agent.h

diff --git a/js/Makefile.am b/js/Makefile.am
index badab8f..3581f1e 100644
--- a/js/Makefile.am
+++ b/js/Makefile.am
@@ -59,6 +59,7 @@ nobase_dist_js_DATA = \
 	ui/panel.js		\
 	ui/panelMenu.js		\
 	ui/placesManager.js  \
+	ui/polkitAuthenticationAgent.js \
 	ui/popupMenu.js		\
 	ui/runDialog.js		\
 	ui/scripting.js		\
diff --git a/js/ui/main.js b/js/ui/main.js
index b6ff452..3253693 100644
--- a/js/ui/main.js
+++ b/js/ui/main.js
@@ -54,6 +54,7 @@ const BackgroundManager = imports.ui.backgroundManager;
 const AppletManager = imports.ui.appletManager;
 const AutomountManager = imports.ui.automountManager;
 const DeskletManager = imports.ui.deskletManager;
+const PolkitAuthenticationAgent = imports.ui.polkitAuthenticationAgent;
 const ExtensionSystem = imports.ui.extensionSystem;
 const Keyboard = imports.ui.keyboard;
 const MessageTray = imports.ui.messageTray;
@@ -371,6 +372,9 @@ function start() {
     // initiate logouts.
     //EndSessionDialog.init();
 
+    // Attempt to become a PolicyKit authentication agent
+    PolkitAuthenticationAgent.init()
+
     _startDate = new Date();
 
     global.stage.connect('captured-event', _globalKeyPressHandler);
diff --git a/js/ui/polkitAuthenticationAgent.js b/js/ui/polkitAuthenticationAgent.js
new file mode 100644
index 0000000..02eadb4
--- /dev/null
+++ b/js/ui/polkitAuthenticationAgent.js
@@ -0,0 +1,406 @@
+// -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*-
+/*
+ * Copyright 2010 Red Hat, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street - Suite 500, Boston, MA
+ * 02110-1335, USA.
+*
+ * Author: David Zeuthen <davidz@redhat.com>
+ */
+
+const Lang = imports.lang;
+const Signals = imports.signals;
+const Cinnamon = imports.gi.Cinnamon;
+const AccountsService = imports.gi.AccountsService;
+const Clutter = imports.gi.Clutter;
+const St = imports.gi.St;
+const Pango = imports.gi.Pango;
+const Gio = imports.gi.Gio;
+const Mainloop = imports.mainloop;
+const Polkit = imports.gi.Polkit;
+const PolkitAgent = imports.gi.PolkitAgent;
+
+const ModalDialog = imports.ui.modalDialog;
+const CinnamonEntry = imports.ui.cinnamonEntry;
+
+function AuthenticationDialog(actionId, message, cookie, userNames) {
+    this._init(actionId, message, cookie, userNames);
+}
+
+AuthenticationDialog.prototype = {
+    __proto__: ModalDialog.ModalDialog.prototype,
+
+    _init: function(actionId, message, cookie, userNames) {
+        ModalDialog.ModalDialog.prototype._init.call(this, { styleClass: 'polkit-dialog' });
+
+        this.actionId = actionId;
+        this.message = message;
+        this.userNames = userNames;
+        this._wasDismissed = false;
+        this._completed = false;
+
+        let mainContentBox = new St.BoxLayout({ style_class: 'polkit-dialog-main-layout',
+                                                vertical: false });
+        this.contentLayout.add(mainContentBox,
+                               { x_fill: true,
+                                 y_fill: true });
+
+        let icon = new St.Icon({ icon_name: 'dialog-password-symbolic' });
+        mainContentBox.add(icon,
+                           { x_fill:  true,
+                             y_fill:  false,
+                             x_align: St.Align.END,
+                             y_align: St.Align.START });
+
+        let messageBox = new St.BoxLayout({ style_class: 'polkit-dialog-message-layout',
+                                            vertical: true });
+        mainContentBox.add(messageBox,
+                           { y_align: St.Align.START });
+
+        this._subjectLabel = new St.Label({ style_class: 'polkit-dialog-headline',
+                                            text: _("Authentication Required") });
+
+        messageBox.add(this._subjectLabel,
+                       { y_fill:  false,
+                         y_align: St.Align.START });
+
+        this._descriptionLabel = new St.Label({ style_class: 'polkit-dialog-description',
+                                                text: message });
+        this._descriptionLabel.clutter_text.ellipsize = Pango.EllipsizeMode.NONE;
+        this._descriptionLabel.clutter_text.line_wrap = true;
+
+        messageBox.add(this._descriptionLabel,
+                       { y_fill:  true,
+                         y_align: St.Align.START });
+
+        if (userNames.length > 1) {
+            log('polkitAuthenticationAgent: Received ' + userNames.length +
+                ' identities that can be used for authentication. Only ' +
+                'considering the first one.');
+        }
+
+        let userName = userNames[0];
+
+        this._user = AccountsService.UserManager.get_default().get_user(userName);
+        let userRealName = this._user.get_real_name()
+        this._userLoadedId = this._user.connect('notify::is_loaded',
+                                                Lang.bind(this, this._onUserChanged));
+        this._userChangedId = this._user.connect('changed',
+                                                 Lang.bind(this, this._onUserChanged));
+
+        // Special case 'root'
+        let userIsRoot = false;
+        if (userName == 'root') {
+            userIsRoot = true;
+            userRealName = _("Administrator");
+        }
+
+        if (userIsRoot) {
+            let userLabel = new St.Label(({ style_class: 'polkit-dialog-user-root-label',
+                                            text: userRealName }));
+            messageBox.add(userLabel);
+        } else {
+            let userBox = new St.BoxLayout({ style_class: 'polkit-dialog-user-layout',
+                                             vertical: false });
+            messageBox.add(userBox);
+            this._userIcon = new St.Icon();
+            this._userIcon.hide();
+            userBox.add(this._userIcon,
+                        { x_fill:  true,
+                          y_fill:  false,
+                          x_align: St.Align.END,
+                          y_align: St.Align.START });
+            let userLabel = new St.Label(({ style_class: 'polkit-dialog-user-label',
+                                            text: userRealName }));
+            userBox.add(userLabel,
+                        { x_fill:  true,
+                          y_fill:  false,
+                          x_align: St.Align.END,
+                          y_align: St.Align.MIDDLE });
+        }
+
+        this._onUserChanged();
+
+        this._passwordBox = new St.BoxLayout({ vertical: false });
+        messageBox.add(this._passwordBox);
+        this._passwordLabel = new St.Label(({ style_class: 'polkit-dialog-password-label' }));
+        this._passwordBox.add(this._passwordLabel);
+        this._passwordEntry = new St.Entry({ style_class: 'polkit-dialog-password-entry',
+                                             text: "",
+                                             can_focus: true});
+        CinnamonEntry.addContextMenu(this._passwordEntry, { isPassword: true });
+        this._passwordEntry.clutter_text.connect('activate', Lang.bind(this, this._onEntryActivate));
+        this._passwordBox.add(this._passwordEntry,
+                              {expand: true });
+        this.setInitialKeyFocus(this._passwordEntry);
+        this._passwordBox.hide();
+
+        this._errorMessageLabel = new St.Label({ style_class: 'polkit-dialog-error-label' });
+        this._errorMessageLabel.clutter_text.ellipsize = Pango.EllipsizeMode.NONE;
+        this._errorMessageLabel.clutter_text.line_wrap = true;
+        messageBox.add(this._errorMessageLabel);
+        this._errorMessageLabel.hide();
+
+        this._infoMessageLabel = new St.Label({ style_class: 'polkit-dialog-info-label' });
+        this._infoMessageLabel.clutter_text.ellipsize = Pango.EllipsizeMode.NONE;
+        this._infoMessageLabel.clutter_text.line_wrap = true;
+        messageBox.add(this._infoMessageLabel);
+        this._infoMessageLabel.hide();
+
+        /* text is intentionally non-blank otherwise the height is not the same as for
+         * infoMessage and errorMessageLabel - but it is still invisible because
+         * cinnamon.css sets the color to be transparent
+         */
+        this._nullMessageLabel = new St.Label({ style_class: 'polkit-dialog-null-label',
+                                                text: 'abc'});
+        this._nullMessageLabel.clutter_text.ellipsize = Pango.EllipsizeMode.NONE;
+        this._nullMessageLabel.clutter_text.line_wrap = true;
+        messageBox.add(this._nullMessageLabel);
+        this._nullMessageLabel.show();
+
+        this.setButtons([{ label: _("Cancel"),
+                           action: Lang.bind(this, this.cancel),
+                           key:    Clutter.Escape
+                         },
+                         { label:  _("Authenticate"),
+                           action: Lang.bind(this, this._onAuthenticateButtonPressed)
+                         }]);
+
+        this._doneEmitted = false;
+
+        this._identityToAuth = Polkit.UnixUser.new_for_name(userName);
+        this._cookie = cookie;
+
+        this._session = new PolkitAgent.Session({ identity: this._identityToAuth,
+                                                  cookie: this._cookie });
+        this._session.connect('completed', Lang.bind(this, this._onSessionCompleted));
+        this._session.connect('request', Lang.bind(this, this._onSessionRequest));
+        this._session.connect('show-error', Lang.bind(this, this._onSessionShowError));
+        this._session.connect('show-info', Lang.bind(this, this._onSessionShowInfo));
+    },
+
+    startAuthentication: function() {
+        this._session.initiate();
+    },
+
+    _ensureOpen: function() {
+        // NOTE: ModalDialog.open() is safe to call if the dialog is
+        // already open - it just returns true without side-effects
+        if (!this.open(global.get_current_time())) {
+            // This can fail if e.g. unable to get input grab
+            //
+            // In an ideal world this wouldn't happen (because the
+            // Cinnamon is in complete control of the session) but that's
+            // just not how things work right now.
+            //
+            // One way to make this happen is by running 'sleep 3;
+            // pkexec bash' and then opening a popup menu.
+            //
+            // We could add retrying if this turns out to be a problem
+
+            log('polkitAuthenticationAgent: Failed to show modal dialog.' +
+                ' Dismissing authentication request for action-id ' + this.actionId +
+                ' cookie ' + this._cookie);
+            this._emitDone(false, true);
+        }
+    },
+
+    _emitDone: function(keepVisible, dismissed) {
+        if (!this._doneEmitted) {
+            this._doneEmitted = true;
+            this.emit('done', keepVisible, dismissed);
+        }
+    },
+
+    _onEntryActivate: function() {
+        let response = this._passwordEntry.get_text();
+        this._session.response(response);
+        // When the user responds, dismiss already shown info and
+        // error texts (if any)
+        this._errorMessageLabel.hide();
+        this._infoMessageLabel.hide();
+        this._nullMessageLabel.show();
+    },
+
+    _onAuthenticateButtonPressed: function() {
+        this._onEntryActivate();
+    },
+
+    _onSessionCompleted: function(session, gainedAuthorization) {
+        if (this._completed)
+            return;
+
+        this._completed = true;
+
+        if (!gainedAuthorization) {
+            /* Unless we are showing an existing error message from the PAM
+             * module (the PAM module could be reporting the authentication
+             * error providing authentication-method specific information),
+             * show "Sorry, that didn't work. Please try again."
+             */
+            if (!this._errorMessageLabel.visible && !this._wasDismissed) {
+                /* Translators: "that didn't work" refers to the fact that the
+                 * requested authentication was not gained; this can happen
+                 * because of an authentication error (like invalid password),
+                 * for instance. */
+                this._errorMessageLabel.set_text(_("Sorry, that didn\'t work. Please try again."));
+                this._errorMessageLabel.show();
+                this._infoMessageLabel.hide();
+                this._nullMessageLabel.hide();
+            }
+        }
+        this._emitDone(!gainedAuthorization, false);
+    },
+
+    _onSessionRequest: function(session, request, echo_on) {
+        // Cheap localization trick
+        if (request == 'Password:')
+            this._passwordLabel.set_text(_("Password:"));
+        else
+            this._passwordLabel.set_text(request);
+
+        if (echo_on)
+            this._passwordEntry.clutter_text.set_password_char('');
+        else
+            this._passwordEntry.clutter_text.set_password_char('\u25cf'); // ● U+25CF BLACK CIRCLE
+
+        this._passwordBox.show();
+        this._passwordEntry.set_text('');
+        this._passwordEntry.grab_key_focus();
+        this._ensureOpen();
+    },
+
+    _onSessionShowError: function(session, text) {
+        this._passwordEntry.set_text('');
+        this._errorMessageLabel.set_text(text);
+        this._errorMessageLabel.show();
+        this._infoMessageLabel.hide();
+        this._nullMessageLabel.hide();
+        this._ensureOpen();
+    },
+
+    _onSessionShowInfo: function(session, text) {
+        this._passwordEntry.set_text('');
+        this._infoMessageLabel.set_text(text);
+        this._infoMessageLabel.show();
+        this._errorMessageLabel.hide();
+        this._nullMessageLabel.hide();
+        this._ensureOpen();
+    },
+
+    destroySession: function() {
+        if (this._session) {
+            if (!this._completed)
+                this._session.cancel();
+            this._session = null;
+        }
+    },
+
+    _onUserChanged: function() {
+        if (this._user.is_loaded) {
+            if (this._userIcon) {
+                let iconFileName = this._user.get_icon_file();
+                let iconFile = Gio.file_new_for_path(iconFileName);
+                let icon;
+                if (iconFile.query_exists(null)) {
+                    icon = new Gio.FileIcon({file: iconFile});
+                } else {
+                    icon = new Gio.ThemedIcon({name: 'avatar-default'});
+                }
+                this._userIcon.set_gicon (icon);
+                this._userIcon.show();
+            }
+        }
+    },
+
+    cancel: function() {
+        this._wasDismissed = true;
+        this.close(global.get_current_time());
+        this._emitDone(false, true);
+    },
+
+};
+Signals.addSignalMethods(AuthenticationDialog.prototype);
+
+function AuthenticationAgent() {
+    this._init();
+}
+
+AuthenticationAgent.prototype = {
+    _init: function() {
+        this._native = new Cinnamon.PolkitAuthenticationAgent();
+        this._native.connect('initiate', Lang.bind(this, this._onInitiate));
+        this._native.connect('cancel', Lang.bind(this, this._onCancel));
+        this._currentDialog = null;
+        this._isCompleting = false;
+    },
+
+    _onInitiate: function(nativeAgent, actionId, message, iconName, cookie, userNames) {
+        this._currentDialog = new AuthenticationDialog(actionId, message, cookie, userNames);
+
+        // We actually don't want to open the dialog until we know for
+        // sure that we're going to interact with the user. For
+        // example, if the password for the identity to auth is blank
+        // (which it will be on a live CD) then there will be no
+        // conversation at all... of course, we don't *know* that
+        // until we actually try it.
+        //
+        // See https://bugzilla.gnome.org/show_bug.cgi?id=643062 for more
+        // discussion.
+
+        this._currentDialog.connect('done', Lang.bind(this, this._onDialogDone));
+        this._currentDialog.startAuthentication();
+    },
+
+    _onCancel: function(nativeAgent) {
+        this._completeRequest(false, false);
+    },
+
+    _onDialogDone: function(dialog, keepVisible, dismissed) {
+        this._completeRequest(keepVisible, dismissed);
+    },
+
+    _reallyCompleteRequest: function(dismissed) {
+        this._currentDialog.close();
+        this._currentDialog.destroySession();
+        this._currentDialog = null;
+        this._isCompleting = false;
+
+        this._native.complete(dismissed)
+    },
+
+    _completeRequest: function(keepVisible, wasDismissed) {
+        if (this._isCompleting)
+            return;
+
+        this._isCompleting = true;
+
+        if (keepVisible) {
+            // Give the user 2 seconds to read 'Authentication Failure' before
+            // dismissing the dialog
+            Mainloop.timeout_add(2000,
+                                 Lang.bind(this,
+                                           function() {
+                                               this._reallyCompleteRequest(wasDismissed);
+                                           }));
+        } else {
+            this._reallyCompleteRequest(wasDismissed);
+        }
+    }
+}
+
+function init() {
+    let agent = new AuthenticationAgent();
+}
diff --git a/src/Makefile.am b/src/Makefile.am
index ca5d7e4..cbc67db 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -145,6 +145,8 @@ libcinnamon_la_SOURCES =		\
 	cinnamon-global.c			\
 	cinnamon-mount-operation.c		\
 	cinnamon-perf-log.c		\
+	cinnamon-polkit-authentication-agent.h	\
+	cinnamon-polkit-authentication-agent.c	\
 	cinnamon-screenshot.c		\
 	cinnamon-screen-grabber.c	\
 	cinnamon-slicer.c			\
diff --git a/src/cinnamon-polkit-authentication-agent.c b/src/cinnamon-polkit-authentication-agent.c
new file mode 100644
index 0000000..8ce1402
--- /dev/null
+++ b/src/cinnamon-polkit-authentication-agent.c
@@ -0,0 +1,435 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright (C) 20011 Red Hat, Inc.
+ *
+ * Author: David Zeuthen <davidz@redhat.com>
+ */
+
+#include "config.h"
+
+#include <pwd.h>
+
+#include "cinnamon-marshal.h"
+
+#define POLKIT_AGENT_I_KNOW_API_IS_SUBJECT_TO_CHANGE
+#include <polkitagent/polkitagent.h>
+#include "cinnamon-polkit-authentication-agent.h"
+
+#include <glib/gi18n.h>
+
+/* uncomment for useful debug output */
+/* #define SHOW_DEBUG */
+
+#ifdef SHOW_DEBUG
+static void
+print_debug (const gchar *format, ...)
+{
+  gchar *s;
+  va_list ap;
+  gchar timebuf[64];
+  GTimeVal now;
+  time_t now_t;
+  struct tm broken_down;
+
+  g_get_current_time (&now);
+  now_t = now.tv_sec;
+  localtime_r (&now_t, &broken_down);
+  strftime (timebuf, sizeof timebuf, "%H:%M:%S", &broken_down);
+
+  va_start (ap, format);
+  s = g_strdup_vprintf (format, ap);
+  va_end (ap);
+
+  g_print ("CinnamonPolkitAuthenticationAgent: %s.%03d: %s\n", timebuf, (gint) (now.tv_usec / 1000), s);
+  g_free (s);
+}
+#else
+static void
+print_debug (const gchar *str, ...)
+{
+}
+#endif
+
+
+struct _CinnamonPolkitAuthenticationAgentClass
+{
+  PolkitAgentListenerClass parent_class;
+};
+
+struct _AuthRequest;
+typedef struct _AuthRequest AuthRequest;
+
+struct _CinnamonPolkitAuthenticationAgent {
+  PolkitAgentListener parent_instance;
+
+  GList *scheduled_requests;
+
+  AuthRequest *current_request;
+};
+
+/* Signals */
+enum
+{
+  INITIATE_SIGNAL,
+  CANCEL_SIGNAL,
+  LAST_SIGNAL
+};
+
+static guint signals[LAST_SIGNAL] = { 0 };
+
+G_DEFINE_TYPE (CinnamonPolkitAuthenticationAgent, cinnamon_polkit_authentication_agent, POLKIT_AGENT_TYPE_LISTENER);
+
+static void initiate_authentication (PolkitAgentListener  *listener,
+                                     const gchar          *action_id,
+                                     const gchar          *message,
+                                     const gchar          *icon_name,
+                                     PolkitDetails        *details,
+                                     const gchar          *cookie,
+                                     GList                *identities,
+                                     GCancellable         *cancellable,
+                                     GAsyncReadyCallback   callback,
+                                     gpointer              user_data);
+
+static gboolean initiate_authentication_finish (PolkitAgentListener  *listener,
+                                                GAsyncResult         *res,
+                                                GError              **error);
+
+static void
+cinnamon_polkit_authentication_agent_init (CinnamonPolkitAuthenticationAgent *agent)
+{
+  gpointer handle;
+  PolkitSubject *subject;
+  GError *error;
+
+  subject = NULL;
+
+  error = NULL;
+  subject = polkit_unix_session_new_for_process_sync (getpid (),
+                                                      NULL, /* GCancellable* */
+                                                      &error);
+  if (subject == NULL)
+    {
+      g_warning ("Error getting session for the process we are in: %s (%s %d)",
+                 error->message,
+                 g_quark_to_string (error->domain),
+                 error->code);
+      g_error_free (error);
+      goto out;
+    }
+
+  handle = polkit_agent_listener_register (POLKIT_AGENT_LISTENER (agent),
+                                           POLKIT_AGENT_REGISTER_FLAGS_NONE,
+                                           subject,
+                                           NULL, /* use default object path */
+                                           NULL, /* GCancellable */
+                                           &error);
+  if (handle == NULL)
+    {
+      g_warning ("Error registering polkit authentication agent: %s (%s %d)",
+                 error->message,
+                 g_quark_to_string (error->domain),
+                 error->code);
+      g_error_free (error);
+      goto out;
+    }
+
+  /* We don't need to register so skip saving handle */
+
+ out:
+  if (subject != NULL)
+    g_object_unref (subject);
+}
+
+static void
+cinnamon_polkit_authentication_agent_finalize (GObject *object)
+{
+  /* CinnamonPolkitAuthenticationAgent *agent = CINNAMON_POLKIT_AUTHENTICATION_AGENT (object); */
+
+  /* Specifically left empty since the object stays alive forever - if code
+   *  is reused it would need to free outstanding requests etc.
+   */
+
+  G_OBJECT_CLASS (cinnamon_polkit_authentication_agent_parent_class)->finalize (object);
+}
+
+static void
+cinnamon_polkit_authentication_agent_class_init (CinnamonPolkitAuthenticationAgentClass *klass)
+{
+  GObjectClass *gobject_class;
+  PolkitAgentListenerClass *listener_class;
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = cinnamon_polkit_authentication_agent_finalize;
+
+  listener_class = POLKIT_AGENT_LISTENER_CLASS (klass);
+  listener_class->initiate_authentication = initiate_authentication;
+  listener_class->initiate_authentication_finish = initiate_authentication_finish;
+
+  signals[INITIATE_SIGNAL] =
+    g_signal_new ("initiate",
+                  G_TYPE_FROM_CLASS (klass),
+                  G_SIGNAL_RUN_LAST,
+                  0,    /* class_offset */
+                  NULL, /* accumulator */
+                  NULL, /* accumulator data */
+                  _cinnamon_marshal_VOID__STRING_STRING_STRING_STRING_BOXED,
+                  G_TYPE_NONE,
+                  5,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_STRING,
+                  G_TYPE_STRV);
+
+  signals[CANCEL_SIGNAL] =
+    g_signal_new ("cancel",
+                  G_TYPE_FROM_CLASS (klass),
+                  G_SIGNAL_RUN_LAST,
+                  0,    /* class_offset */
+                  NULL, /* accumulator */
+                  NULL, /* accumulator data */
+                  g_cclosure_marshal_VOID__VOID,
+                  G_TYPE_NONE,
+                  0);
+}
+
+CinnamonPolkitAuthenticationAgent *
+cinnamon_polkit_authentication_agent_new (void)
+{
+  return CINNAMON_POLKIT_AUTHENTICATION_AGENT (g_object_new (CINNAMON_TYPE_POLKIT_AUTHENTICATION_AGENT, NULL));
+}
+
+struct _AuthRequest {
+  /* not holding ref */
+  CinnamonPolkitAuthenticationAgent *agent;
+  GCancellable *cancellable;
+  gulong handler_id;
+
+  /* copies */
+  gchar          *action_id;
+  gchar          *message;
+  gchar          *icon_name;
+  PolkitDetails  *details;
+  gchar          *cookie;
+  GList          *identities;
+
+  GSimpleAsyncResult *simple;
+};
+
+static void
+auth_request_free (AuthRequest *request)
+{
+  g_cancellable_disconnect (request->cancellable, request->handler_id);
+  g_free (request->action_id);
+  g_free (request->message);
+  g_free (request->icon_name);
+  g_object_unref (request->details);
+  g_list_foreach (request->identities, (GFunc) g_object_unref, NULL);
+  g_list_free (request->identities);
+  g_object_unref (request->simple);
+  g_free (request);
+}
+
+static void
+auth_request_initiate (AuthRequest *request)
+{
+  gchar **user_names;
+  GPtrArray *p;
+  GList *l;
+
+  p = g_ptr_array_new ();
+  for (l = request->identities; l != NULL; l = l->next)
+    {
+      if (POLKIT_IS_UNIX_USER (l->data))
+        {
+          PolkitUnixUser *user = POLKIT_UNIX_USER (l->data);
+          gint uid;
+          gchar buf[4096];
+          struct passwd pwd;
+          struct passwd *ppwd;
+
+          uid = polkit_unix_user_get_uid (user);
+          if (getpwuid_r (uid, &pwd, buf, sizeof (buf), &ppwd) == 0)
+            {
+              if (!g_utf8_validate (pwd.pw_name, -1, NULL))
+                {
+                  g_warning ("Invalid UTF-8 in username for uid %d. Skipping", uid);
+                }
+              else
+                {
+                  g_ptr_array_add (p, g_strdup (pwd.pw_name));
+                }
+            }
+          else
+            {
+              g_warning ("Error looking up user name for uid %d", uid);
+            }
+        }
+      else
+        {
+          g_warning ("Unsupporting identity of GType %s", g_type_name (G_TYPE_FROM_INSTANCE (l->data)));
+        }
+    }
+  g_ptr_array_add (p, NULL);
+  user_names = (gchar **) g_ptr_array_free (p, FALSE);
+  g_signal_emit (request->agent,
+                 signals[INITIATE_SIGNAL],
+                 0, /* detail */
+                 request->action_id,
+                 request->message,
+                 request->icon_name,
+                 request->cookie,
+                 user_names);
+  g_strfreev (user_names);
+}
+
+static void auth_request_complete (AuthRequest *request,
+                                   gboolean     dismissed);
+
+static gboolean
+handle_cancelled_in_idle (gpointer user_data)
+{
+  AuthRequest *request = user_data;
+
+  print_debug ("CANCELLED %s cookie %s", request->action_id, request->cookie);
+  if (request == request->agent->current_request)
+    {
+      g_signal_emit (request->agent,
+                     signals[CANCEL_SIGNAL],
+                     0); /* detail */
+    }
+  else
+    {
+      auth_request_complete (request, FALSE);
+    }
+
+  return FALSE;
+}
+
+static void
+on_request_cancelled (GCancellable *cancellable,
+                      gpointer      user_data)
+{
+  AuthRequest *request = user_data;
+  /* post-pone to idle to handle GCancellable deadlock in
+   *
+   *  https://bugzilla.gnome.org/show_bug.cgi?id=642968
+   */
+  g_idle_add (handle_cancelled_in_idle, request);
+}
+
+static void maybe_process_next_request (CinnamonPolkitAuthenticationAgent *agent);
+
+static void
+auth_request_complete (AuthRequest *request,
+                       gboolean     dismissed)
+{
+  CinnamonPolkitAuthenticationAgent *agent = request->agent;
+
+  if (dismissed)
+    g_simple_async_result_set_error (request->simple,
+                                     POLKIT_ERROR,
+                                     POLKIT_ERROR_CANCELLED,
+                                     _("Authentication dialog was dismissed by the user"));
+
+  if (agent->current_request == request)
+    {
+      print_debug ("COMPLETING CURRENT %s cookie %s", request->action_id, request->cookie);
+
+      g_simple_async_result_complete_in_idle (request->simple);
+      auth_request_free (request);
+
+      agent->current_request = NULL;
+
+      maybe_process_next_request (agent);
+    }
+  else
+    {
+      print_debug ("COMPLETING SCHEDULED %s cookie %s", request->action_id, request->cookie);
+      agent->scheduled_requests = g_list_remove (agent->scheduled_requests, request);
+      g_simple_async_result_complete_in_idle (request->simple);
+      auth_request_free (request);
+    }
+}
+
+static void
+maybe_process_next_request (CinnamonPolkitAuthenticationAgent *agent)
+{
+  print_debug ("MAYBE_PROCESS cur=%p len(scheduled)=%d", agent->current_request, g_list_length (agent->scheduled_requests));
+
+  if (agent->current_request == NULL && agent->scheduled_requests != NULL)
+    {
+      AuthRequest *request;
+
+      request = agent->scheduled_requests->data;
+
+      agent->current_request = request;
+      agent->scheduled_requests = g_list_remove (agent->scheduled_requests, request);
+
+      print_debug ("INITIATING %s cookie %s", request->action_id, request->cookie);
+      auth_request_initiate (request);
+    }
+}
+
+static void
+initiate_authentication (PolkitAgentListener  *listener,
+                         const gchar          *action_id,
+                         const gchar          *message,
+                         const gchar          *icon_name,
+                         PolkitDetails        *details,
+                         const gchar          *cookie,
+                         GList                *identities,
+                         GCancellable         *cancellable,
+                         GAsyncReadyCallback   callback,
+                         gpointer              user_data)
+{
+  CinnamonPolkitAuthenticationAgent *agent = CINNAMON_POLKIT_AUTHENTICATION_AGENT (listener);
+  AuthRequest *request;
+
+  request = g_new0 (AuthRequest, 1);
+  request->agent = agent;
+  request->action_id = g_strdup (action_id);
+  request->message = g_strdup (message);
+  request->icon_name = g_strdup (icon_name);
+  request->details = g_object_ref (details);
+  request->cookie = g_strdup (cookie);
+  request->identities = g_list_copy (identities);
+  g_list_foreach (request->identities, (GFunc) g_object_ref, NULL);
+  request->simple = g_simple_async_result_new (G_OBJECT (listener),
+                                               callback,
+                                               user_data,
+                                               initiate_authentication);
+  request->cancellable = cancellable;
+  request->handler_id = g_cancellable_connect (request->cancellable,
+                                               G_CALLBACK (on_request_cancelled),
+                                               request,
+                                               NULL); /* GDestroyNotify for request */
+
+  print_debug ("SCHEDULING %s cookie %s", request->action_id, request->cookie);
+  agent->scheduled_requests = g_list_append (agent->scheduled_requests, request);
+
+  maybe_process_next_request (agent);
+}
+
+static gboolean
+initiate_authentication_finish (PolkitAgentListener  *listener,
+                                GAsyncResult         *res,
+                                GError              **error)
+{
+  GSimpleAsyncResult *simple = G_SIMPLE_ASYNC_RESULT (res);
+  if (g_simple_async_result_propagate_error (simple, error))
+    return FALSE;
+  else
+    return TRUE;
+}
+
+void
+cinnamon_polkit_authentication_agent_complete (CinnamonPolkitAuthenticationAgent *agent,
+                                            gboolean                        dismissed)
+{
+  g_return_if_fail (CINNAMON_IS_POLKIT_AUTHENTICATION_AGENT (agent));
+  g_return_if_fail (agent->current_request != NULL);
+
+  auth_request_complete (agent->current_request, dismissed);
+}
diff --git a/src/cinnamon-polkit-authentication-agent.h b/src/cinnamon-polkit-authentication-agent.h
new file mode 100644
index 0000000..d37b49a
--- /dev/null
+++ b/src/cinnamon-polkit-authentication-agent.h
@@ -0,0 +1,33 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright (C) 20011 Red Hat, Inc.
+ *
+ * Author: David Zeuthen <davidz@redhat.com>
+ */
+
+#ifndef __CINNAMON_POLKIT_AUTHENTICATION_AGENT_H__
+#define __CINNAMON_POLKIT_AUTHENTICATION_AGENT_H__
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+typedef struct _CinnamonPolkitAuthenticationAgent      CinnamonPolkitAuthenticationAgent;
+typedef struct _CinnamonPolkitAuthenticationAgentClass CinnamonPolkitAuthenticationAgentClass;
+
+#define CINNAMON_TYPE_POLKIT_AUTHENTICATION_AGENT              (cinnamon_polkit_authentication_agent_get_type ())
+#define CINNAMON_POLKIT_AUTHENTICATION_AGENT(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), CINNAMON_TYPE_POLKIT_AUTHENTICATION_AGENT, CinnamonPolkitAuthenticationAgent))
+#define CINNAMON_POLKIT_AUTHENTICATION_AGENT_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), CINNAMON_TYPE_POLKIT_AUTHENTICATION_AGENT, CinnamonPolkitAuthenticationAgentClass))
+#define CINNAMON_IS_POLKIT_AUTHENTICATION_AGENT(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), CINNAMON_TYPE_POLKIT_AUTHENTICATION_AGENT))
+#define CINNAMON_IS_POLKIT_AUTHENTICATION_AGENT_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), CINNAMON_TYPE_POLKIT_AUTHENTICATION_AGENT))
+#define CINNAMON_POLKIT_AUTHENTICATION_AGENT_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), CINNAMON_TYPE_POLKIT_AUTHENTICATION_AGENT, CinnamonPolkitAuthenticationAgentClass))
+
+GType                           cinnamon_polkit_authentication_agent_get_type (void) G_GNUC_CONST;
+CinnamonPolkitAuthenticationAgent *cinnamon_polkit_authentication_agent_new      (void);
+void                            cinnamon_polkit_authentication_agent_complete (CinnamonPolkitAuthenticationAgent *agent,
+                                                                            gboolean                        dismissed);
+
+G_END_DECLS
+
+#endif /* __CINNAMON_POLKIT_AUTHENTICATION_AGENT_H__ */
-- 
1.8.4


From 838bc4857dc56f6b7b9d6bda2668495753121fe4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Fri, 1 Nov 2013 02:29:25 +0100
Subject: [PATCH 2/2] Add back polkit agent theme

---
 data/theme/cinnamon.css | 74 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 74 insertions(+)

diff --git a/data/theme/cinnamon.css b/data/theme/cinnamon.css
index eca4628..90673aa 100644
--- a/data/theme/cinnamon.css
+++ b/data/theme/cinnamon.css
@@ -954,6 +954,80 @@ StScrollBar StButton#vhandle:hover {
 	font-size: 10pt;
 }
 /* ===================================================================
+ * Policykit authentication dialog
+ * ===================================================================*/
+.polkit-dialog {
+	/* this is the width of the entire modal popup */
+	width: 500px;
+}
+.polkit-dialog-main-layout {
+	spacing: 24px;
+	padding: 10px;
+}
+.polkit-dialog-message-layout {
+	spacing: 16px;
+}
+.polkit-dialog-headline {
+	font-size: 12pt;
+	font-weight: bold;
+	color: #666666;
+}
+.polkit-dialog-description {
+	font-size: 10pt;
+	color: white;
+}
+.polkit-dialog-user-layout {
+	padding-left: 10px;
+	spacing: 10px;
+}
+.polkit-dialog-user-layout:rtl {
+	padding-left: 0px;
+	padding-right: 10px;
+}
+.polkit-dialog-user-root-label {
+	color: #ff0000;
+}
+.polkit-dialog-password-label:ltr {
+	padding-right: 0.5em;
+}
+.polkit-dialog-password-label:rtl {
+	padding-left: 0.5em;
+}
+.polkit-dialog-password-entry {
+	background-gradient-start: rgb(236,236,236);
+	background-gradient-end: white;
+	background-gradient-direction: vertical;
+	color: black;
+	border-radius: 5px;
+	border: 2px solid #555753;
+}
+.polkit-dialog-password-entry:focus {
+	border: 2px solid #3465a4;
+}
+.polkit-dialog-password-entry .capslock-warning {
+	icon-size: 16px;
+	warning-color: #999;
+	padding: 0 4px;
+}
+.polkit-dialog-error-label {
+	font-size: 10pt;
+	color: #ffff00;
+	padding-bottom: 8px;
+}
+.polkit-dialog-info-label {
+	font-size: 10pt;
+	padding-bottom: 8px;
+}
+/* intentionally left transparent to avoid dialog changing size */
+.polkit-dialog-null-label {
+	font-size: 10pt;
+	color: rgba(0,0,0,0);
+	padding-bottom: 8px;
+}
+.network-dialog-secret-table {
+	spacing-rows: 15px;
+}
+/* ===================================================================
  * Magnifier
  * ===================================================================*/
 
-- 
1.8.4

