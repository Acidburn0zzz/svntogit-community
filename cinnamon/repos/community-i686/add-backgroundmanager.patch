From 40171f5c4a4221e38810cac55e94020807a0d1cd Mon Sep 17 00:00:00 2001
From: Michael Webster <miketwebster@gmail.com>
Date: Tue, 16 Apr 2013 17:01:30 -0400
Subject: [PATCH 1/3] Add backgroundManager - this is needed for gnome 3.8
 compatibility, as gnome-settings-daemon no longer handles the desktop
 background.

---
 configure.ac                                       |   7 +-
 data/org.cinnamon.gschema.xml.in                   |  71 +++-
 .../cinnamon-settings/modules/cs_backgrounds.py    |  31 +-
 js/ui/main.js                                      |   3 +-
 src/Makefile.am                                    |   2 +
 src/cinnamon-background-manager.c                  | 411 +++++++++++++++++++++
 src/cinnamon-background-manager.h                  |  57 +++
 7 files changed, 562 insertions(+), 20 deletions(-)
 create mode 100644 src/cinnamon-background-manager.c
 create mode 100644 src/cinnamon-background-manager.h

diff --git a/configure.ac b/configure.ac
index 0aa47c5..a2a9479 100644
--- a/configure.ac
+++ b/configure.ac
@@ -68,6 +68,7 @@ GTK_MIN_VERSION=3.0.0
 GIO_MIN_VERSION=2.29.10
 POLKIT_MIN_VERSION=0.100
 STARTUP_NOTIFICATION_MIN_VERSION=0.11
+GNOME_DESKTOP_MIN_VERSION=3.0.0
 
 # Collect more than 20 libraries for a prize!
 PKG_CHECK_MODULES(CINNAMON, gio-2.0 >= $GIO_MIN_VERSION
@@ -82,7 +83,8 @@ PKG_CHECK_MODULES(CINNAMON, gio-2.0 >= $GIO_MIN_VERSION
                                gobject-introspection-1.0 >= $GOBJECT_INTROSPECTION_MIN_VERSION
 			       libcanberra
                                polkit-agent-1 >= $POLKIT_MIN_VERSION xfixes
-                               libnm-glib libnm-util gnome-keyring-1)
+                               libnm-glib libnm-util gnome-keyring-1
+                               gnome-desktop-3.0 >= GNOME_DESKTOP_MIN_VERSION)
 
 PKG_CHECK_MODULES(CINNAMON_PERF_HELPER, gtk+-3.0 gio-2.0)
 
@@ -106,7 +108,8 @@ AC_CHECK_FUNCS(JS_NewGlobalObject XFixesCreatePointerBarrier)
 CFLAGS=$saved_CFLAGS
 LIBS=$saved_LIBS
 
-PKG_CHECK_MODULES(ST, clutter-1.0 gtk+-3.0 libcroco-0.6 >= 0.6.2 gnome-desktop-3.0 >= 2.90.0 x11)
+PKG_CHECK_MODULES(ST, clutter-1.0 gtk+-3.0 libcroco-0.6 >= 0.6.2 
+                      gnome-desktop-3.0 >= GNOME_DESKTOP_MIN_VERSION x11)
 PKG_CHECK_MODULES(GDMUSER, dbus-glib-1 gtk+-3.0)
 PKG_CHECK_MODULES(TRAY, gtk+-3.0)
 PKG_CHECK_MODULES(GVC, libpulse libpulse-mainloop-glib gobject-2.0)
diff --git a/data/org.cinnamon.gschema.xml.in b/data/org.cinnamon.gschema.xml.in
index ffbad92..6f55477 100644
--- a/data/org.cinnamon.gschema.xml.in
+++ b/data/org.cinnamon.gschema.xml.in
@@ -720,6 +720,23 @@
     </key>
   </schema>
 
+
+  <enum id="bg_style">
+    <value nick="none" value="0"/>
+    <value nick="wallpaper" value="1"/>
+    <value nick="centered" value="2"/>
+    <value nick="scaled" value="3"/>
+    <value nick="stretched" value="4"/>
+    <value nick="zoom" value="5"/>
+    <value nick="spanned" value="6"/>
+  </enum>
+
+  <enum id="bg_shading">
+    <value nick="solid" value="0"/>
+    <value nick="vertical" value="1"/>
+    <value nick="horizontal" value="2"/>
+  </enum>
+
   <schema id="org.cinnamon.background" path="/org/cinnamon/background/">
     <key name="mode" type="s">
       <default>"wallpaper"</default>
@@ -750,8 +767,60 @@
         This key defines the delay for the slideshow.
       </description>
     </key>
+    <key name="draw-background" type="b">
+      <default>true</default>
+      <_summary>Draw Desktop Background</_summary>
+      <_description>Have GNOME draw the desktop background.</_description>
+    </key>
+    <key name="picture-options" enum="bg_style">
+      <default>'zoom'</default>
+      <_summary>Picture Options</_summary>
+      <_description>
+        Determines how the image set by wallpaper_filename is rendered.
+        Possible values are "none", "wallpaper", "centered", "scaled",
+        "stretched", "zoom", "spanned".
+      </_description>
+    </key>
+    <key name="picture-uri" type="s">
+      <default>'file://@datadir@/themes/Adwaita/backgrounds/adwaita-timed.xml'</default>
+      <_summary>Picture URI</_summary>
+      <_description>
+        URI to use for the background image. Not that the backend only supports
+        local (file://) URIs.
+      </_description>
+    </key>
+    <key name="picture-opacity" type="i">
+      <range min="0" max="100"/>
+      <default>100</default>
+      <_summary>Picture Opacity</_summary>
+      <_description>
+        Opacity with which to draw the background picture.
+      </_description>
+    </key>
+    <key name="primary-color" type="s">
+      <default>'#023c88'</default>
+      <_summary>Primary Color</_summary>
+      <_description>
+        Left or Top color when drawing gradients, or the solid color.
+      </_description>
+    </key>
+    <key name="secondary-color" type="s">
+      <default>'#5789ca'</default>
+      <_summary>Secondary Color</_summary>
+      <_description>
+        Right or Bottom color when drawing gradients, not used for solid color.
+      </_description>
+    </key>
+    <key name="color-shading-type" enum="bg_shading">
+      <default>'solid'</default>
+      <_summary>Color Shading Type</_summary>
+      <_description>
+        How to shade the background color. Possible values are "horizontal",
+        "vertical", and "solid".
+      </_description>
+    </key>
   </schema>
-  
+
   <schema id="org.cinnamon.screensaver" path="/org/cinnamon/screensaver/">
     <key name="default-message" type="s">
       <default>""</default>
diff --git a/files/usr/lib/cinnamon-settings/modules/cs_backgrounds.py b/files/usr/lib/cinnamon-settings/modules/cs_backgrounds.py
index 19886f7..5410fee 100644
--- a/files/usr/lib/cinnamon-settings/modules/cs_backgrounds.py
+++ b/files/usr/lib/cinnamon-settings/modules/cs_backgrounds.py
@@ -232,11 +232,11 @@ def getFirstFileFromBackgroundXml(self, filename):
     
 
 class BackgroundWallpaperPane (Gtk.VBox):
-    def __init__(self, sidepage, gnome_background_schema):
+    def __init__(self, sidepage, cinnamon_background_schema):
         Gtk.VBox.__init__(self)
         self.set_spacing(5)
         
-        self._gnome_background_schema = gnome_background_schema
+        self._cinnamon_background_schema = cinnamon_background_schema
         self._sidepage = sidepage
         
         scw = Gtk.ScrolledWindow()
@@ -263,15 +263,15 @@ def _on_selection_changed(self, iconview):
         if wallpaper:
             for key in wallpaper:
                 if key == "filename":
-                    self._gnome_background_schema.set_string("picture-uri", "file://" + wallpaper[key])
+                    self._cinnamon_background_schema.set_string("picture-uri", "file://" + wallpaper[key])
                 elif key == "pcolor":
-                    self._gnome_background_schema.set_string("primary-color", wallpaper[key])
+                    self._cinnamon_background_schema.set_string("primary-color", wallpaper[key])
                 elif key == "scolor":
-                    self._gnome_background_schema.set_string("secondary-color", wallpaper[key])
+                    self._cinnamon_background_schema.set_string("secondary-color", wallpaper[key])
                 elif key == "shade_type":
-                    self._gnome_background_schema.set_string("color-shading-type", wallpaper[key])
+                    self._cinnamon_background_schema.set_string("color-shading-type", wallpaper[key])
                 elif key == "options":
-                    self._gnome_background_schema.set_string("picture-options", wallpaper[key])
+                    self._cinnamon_background_schema.set_string("picture-options", wallpaper[key])
             if (not "metadataFile" in wallpaper) or (wallpaper["metadataFile"] == ""):
                 self._sidepage.remove_wallpaper_button.set_sensitive(True)
     
@@ -364,7 +364,7 @@ def run(self):
         return res
 
 class BackgroundSlideshowPane(Gtk.Table):
-    def __init__(self, sidepage, gnome_background_schema, cinnamon_background_schema):
+    def __init__(self, sidepage, cinnamon_background_schema):
         Gtk.Table.__init__(self)
         self.set_col_spacings(5)
         self.set_row_spacings(5)
@@ -445,12 +445,11 @@ def _do_update_list(self, folder, recursive, delay, transition_duration = 0):
             f = open(filename, "w")
             f.write(xml_data)
             f.close()
-            Gio.Settings("org.gnome.desktop.background").set_string("picture-uri", "file://" + filename)
+            Gio.Settings("org.cinnamon.background").set_string("picture-uri", "file://" + filename)
 
 class BackgroundSidePage (SidePage):
     def __init__(self, name, icon, keywords, advanced, content_box):
         SidePage.__init__(self, name, icon, keywords, advanced, content_box)
-        self._gnome_background_schema = Gio.Settings("org.gnome.desktop.background")
         self._cinnamon_background_schema = Gio.Settings("org.cinnamon.background")
         self._add_wallpapers_dialog = AddWallpapersDialog()
         
@@ -515,8 +514,8 @@ def build(self, advanced):
         self.mainbox.set_visible_window(False)
         self.content_box.pack_start(self.mainbox, True, True, 3)
         
-        self.wallpaper_pane = BackgroundWallpaperPane(self, self._gnome_background_schema)
-        self.slideshow_pane = BackgroundSlideshowPane(self, self._gnome_background_schema, self._cinnamon_background_schema)
+        self.wallpaper_pane = BackgroundWallpaperPane(self, self._cinnamon_background_schema)
+        self.slideshow_pane = BackgroundSlideshowPane(self, self._cinnamon_background_schema)
         if self._cinnamon_background_schema["mode"] == "slideshow":
             self.mainbox.add(self.slideshow_pane)
         else:
@@ -536,21 +535,21 @@ def build(self, advanced):
         l = Gtk.Label(_("Picture aspect"))
         l.set_alignment(0, 0.5)
         advanced_options_box.pack_start(l, False, False, 0)
-        self.picture_options = GSettingsComboBox("", "org.gnome.desktop.background", "picture-options", None, BACKGROUND_PICTURE_OPTIONS)
+        self.picture_options = GSettingsComboBox("", "org.cinnamon.background", "picture-options", None, BACKGROUND_PICTURE_OPTIONS)
         advanced_options_box.pack_start(self.picture_options, False, False, 0)
         
         l = Gtk.Label(_("Gradient"))
         l.set_alignment(0, 0.5)
         advanced_options_box.pack_start(l, False, False, 0)
-        self.color_shading_type = GSettingsComboBox("", "org.gnome.desktop.background", "color-shading-type", None, BACKGROUND_COLOR_SHADING_TYPES)
+        self.color_shading_type = GSettingsComboBox("", "org.cinnamon.background", "color-shading-type", None, BACKGROUND_COLOR_SHADING_TYPES)
         advanced_options_box.pack_start(self.color_shading_type, False, False, 0)
         
         hbox = Gtk.HBox()
         l = Gtk.Label(_("Colors"))
         hbox.pack_start(l, False, False, 2)
-        self.primary_color = GSettingsColorChooser("org.gnome.desktop.background", "primary-color", None)
+        self.primary_color = GSettingsColorChooser("org.cinnamon.background", "primary-color", None)
         hbox.pack_start(self.primary_color, False, False, 2)
-        self.secondary_color = GSettingsColorChooser("org.gnome.desktop.background", "secondary-color", None)
+        self.secondary_color = GSettingsColorChooser("org.cinnamon.background", "secondary-color", None)
         hbox.pack_start(self.secondary_color, False, False, 2)
         advanced_options_box.pack_start(hbox, False, False, 0)
         self.content_box.show_all()
diff --git a/js/ui/main.js b/js/ui/main.js
index ba240d2..5637cf5 100644
--- a/js/ui/main.js
+++ b/js/ui/main.js
@@ -84,6 +84,7 @@ let _cssStylesheet = null;
 let dynamicWorkspaces = null;
 let nWorks = null;
 let tracker = null;
+let backgroundManager = null;
 let desktopShown;
 
 let workspace_names = [];
@@ -212,7 +213,7 @@ function start() {
     // be predictable anyways.
     tracker = Cinnamon.WindowTracker.get_default();
     Cinnamon.AppUsage.get_default();
-
+    backgroundManager = Cinnamon.BackgroundManager.get_default();
     // The stage is always covered so Clutter doesn't need to clear it; however
     // the color is used as the default contents for the Muffin root background
     // actor so set it anyways.
diff --git a/src/Makefile.am b/src/Makefile.am
index 51413aa..6efce18 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -105,6 +105,7 @@ cinnamon_public_headers_h =		\
 	cinnamon-app-system.h		\
 	cinnamon-app-usage.h		\
 	cinnamon-arrow.h			\
+	cinnamon-background-manager.h	\
 	cinnamon-doc-system.h		\
 	cinnamon-embedded-window.h		\
 	cinnamon-generic-container.h	\
@@ -142,6 +143,7 @@ libcinnamon_la_SOURCES =		\
 	cinnamon-app-system.c		\
 	cinnamon-app-usage.c		\
 	cinnamon-arrow.c			\
+	cinnamon-background-manager.c	\
 	cinnamon-doc-system.c		\
 	cinnamon-embedded-window.c		\
 	cinnamon-generic-container.c	\
diff --git a/src/cinnamon-background-manager.c b/src/cinnamon-background-manager.c
new file mode 100644
index 0000000..9d95250
--- /dev/null
+++ b/src/cinnamon-background-manager.c
@@ -0,0 +1,411 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
+ *
+ * Copyright © 2001 Ximian, Inc.
+ * Copyright (C) 2007 William Jon McCann <mccann@jhu.edu>
+ * Copyright 2007 Red Hat, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#include "config.h"
+
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <string.h>
+#include <errno.h>
+
+#include <locale.h>
+
+#include <glib.h>
+#include <glib/gi18n.h>
+#include <gio/gio.h>
+#include <gdk/gdk.h>
+#include <gdk/gdkx.h>
+
+#define GNOME_DESKTOP_USE_UNSTABLE_API
+#include <libgnome-desktop/gnome-bg.h>
+#include <X11/Xatom.h>
+
+#include "cinnamon-background-manager.h"
+
+#define CINNAMON_BACKGROUND_MANAGER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), CINNAMON_TYPE_BACKGROUND_MANAGER, CinnamonBackgroundManagerPrivate))
+
+struct CinnamonBackgroundManagerPrivate
+{
+        GSettings   *settings;
+        GnomeBG     *bg;
+
+        GnomeBGCrossfade *fade;
+
+        GDBusProxy  *proxy;
+        guint        proxy_signal_id;
+};
+
+static void     cinnamon_background_manager_class_init  (CinnamonBackgroundManagerClass *klass);
+static void     cinnamon_background_manager_init        (CinnamonBackgroundManager      *background_manager);
+static void     cinnamon_background_manager_finalize    (GObject             *object);
+
+static void setup_bg (CinnamonBackgroundManager *manager);
+static void connect_screen_signals (CinnamonBackgroundManager *manager);
+
+G_DEFINE_TYPE (CinnamonBackgroundManager, cinnamon_background_manager, G_TYPE_OBJECT)
+
+static gpointer manager_object = NULL;
+
+static gboolean
+dont_draw_background (CinnamonBackgroundManager *manager)
+{
+        return !g_settings_get_boolean (manager->priv->settings,
+                                        "draw-background");
+}
+
+static void
+on_crossfade_finished (CinnamonBackgroundManager *manager)
+{
+        g_object_unref (manager->priv->fade);
+        manager->priv->fade = NULL;
+}
+
+static void
+draw_background (CinnamonBackgroundManager *manager,
+                 gboolean              use_crossfade)
+{
+        GdkDisplay *display;
+        int         n_screens;
+        int         i;
+
+        display = gdk_display_get_default ();
+        n_screens = gdk_display_get_n_screens (display);
+
+        for (i = 0; i < n_screens; ++i) {
+                GdkScreen *screen;
+                GdkWindow *root_window;
+                cairo_surface_t *surface;
+
+                screen = gdk_display_get_screen (display, i);
+
+                root_window = gdk_screen_get_root_window (screen);
+
+                surface = gnome_bg_create_surface (manager->priv->bg,
+                                                   root_window,
+                                                   gdk_screen_get_width (screen),
+                                                   gdk_screen_get_height (screen),
+                                                   TRUE);
+
+                if (use_crossfade) {
+
+                        if (manager->priv->fade != NULL) {
+                                g_object_unref (manager->priv->fade);
+                        }
+
+                        manager->priv->fade = gnome_bg_set_surface_as_root_with_crossfade (screen, surface);
+                        g_signal_connect_swapped (manager->priv->fade, "finished",
+                                                  G_CALLBACK (on_crossfade_finished),
+                                                  manager);
+                } else {
+                        gnome_bg_set_surface_as_root (screen, surface);
+                }
+
+                cairo_surface_destroy (surface);
+        }
+}
+
+static void
+on_bg_transitioned (GnomeBG              *bg,
+                    CinnamonBackgroundManager *manager)
+{
+        draw_background (manager, FALSE);
+}
+
+static gboolean
+settings_change_event_cb (GSettings            *settings,
+                          gpointer              keys,
+                          gint                  n_keys,
+                          CinnamonBackgroundManager *manager)
+{
+        gnome_bg_load_from_preferences (manager->priv->bg,
+                                        manager->priv->settings);
+        return FALSE;
+}
+
+static void
+on_screen_size_changed (GdkScreen            *screen,
+                        CinnamonBackgroundManager *manager)
+{
+        draw_background (manager, FALSE);
+}
+
+static void
+watch_bg_preferences (CinnamonBackgroundManager *manager)
+{
+        g_signal_connect (manager->priv->settings,
+                          "change-event",
+                          G_CALLBACK (settings_change_event_cb),
+                          manager);
+}
+
+static void
+on_bg_changed (GnomeBG              *bg,
+               CinnamonBackgroundManager *manager)
+{
+        draw_background (manager, TRUE);
+}
+
+static void
+setup_bg (CinnamonBackgroundManager *manager)
+{
+        g_return_if_fail (manager->priv->bg == NULL);
+
+        manager->priv->bg = gnome_bg_new ();
+
+        g_signal_connect (manager->priv->bg,
+                          "changed",
+                          G_CALLBACK (on_bg_changed),
+                          manager);
+
+        g_signal_connect (manager->priv->bg,
+                          "transitioned",
+                          G_CALLBACK (on_bg_transitioned),
+                          manager);
+
+        connect_screen_signals (manager);
+        watch_bg_preferences (manager);
+        gnome_bg_load_from_preferences (manager->priv->bg,
+                                        manager->priv->settings);
+}
+
+static void
+setup_bg_and_draw_background (CinnamonBackgroundManager *manager)
+{
+        setup_bg (manager);
+        draw_background (manager, FALSE);
+}
+
+static void
+disconnect_session_manager_listener (CinnamonBackgroundManager *manager)
+{
+        if (manager->priv->proxy && manager->priv->proxy_signal_id) {
+                g_signal_handler_disconnect (manager->priv->proxy,
+                                             manager->priv->proxy_signal_id);
+                manager->priv->proxy_signal_id = 0;
+        }
+}
+
+static void
+on_session_manager_signal (GDBusProxy   *proxy,
+                           const gchar  *sender_name,
+                           const gchar  *signal_name,
+                           GVariant     *parameters,
+                           gpointer      user_data)
+{
+        CinnamonBackgroundManager *manager = CINNAMON_BACKGROUND_MANAGER (user_data);
+
+        if (g_strcmp0 (signal_name, "SessionRunning") == 0) {
+                setup_bg_and_draw_background (manager);
+                disconnect_session_manager_listener (manager);
+        }
+}
+
+static void
+draw_background_after_session_loads (CinnamonBackgroundManager *manager)
+{
+        GError *error = NULL;
+        GDBusProxyFlags flags;
+
+        flags = G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES |
+                G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START;
+        manager->priv->proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
+                                                              flags,
+                                                              NULL, /* GDBusInterfaceInfo */
+                                                              "org.gnome.SessionManager",
+                                                              "/org/gnome/SessionManager",
+                                                              "org.gnome.SessionManager",
+                                                              NULL, /* GCancellable */
+                                                              &error);
+        if (manager->priv->proxy == NULL) {
+                g_warning ("Could not listen to session manager: %s",
+                           error->message);
+                g_error_free (error);
+                return;
+        }
+
+        manager->priv->proxy_signal_id = g_signal_connect (manager->priv->proxy,
+                                                           "g-signal",
+                                                           G_CALLBACK (on_session_manager_signal),
+                                                           manager);
+}
+
+
+static void
+disconnect_screen_signals (CinnamonBackgroundManager *manager)
+{
+        GdkDisplay *display;
+        int         i;
+        int         n_screens;
+
+        display = gdk_display_get_default ();
+        n_screens = gdk_display_get_n_screens (display);
+
+        for (i = 0; i < n_screens; ++i) {
+                GdkScreen *screen;
+                screen = gdk_display_get_screen (display, i);
+                g_signal_handlers_disconnect_by_func (screen,
+                                                      G_CALLBACK (on_screen_size_changed),
+                                                      manager);
+        }
+}
+
+static void
+connect_screen_signals (CinnamonBackgroundManager *manager)
+{
+        GdkDisplay *display;
+        int         i;
+        int         n_screens;
+
+        display = gdk_display_get_default ();
+        n_screens = gdk_display_get_n_screens (display);
+
+        for (i = 0; i < n_screens; ++i) {
+                GdkScreen *screen;
+                screen = gdk_display_get_screen (display, i);
+                g_signal_connect (screen,
+                                  "monitors-changed",
+                                  G_CALLBACK (on_screen_size_changed),
+                                  manager);
+                g_signal_connect (screen,
+                                  "size-changed",
+                                  G_CALLBACK (on_screen_size_changed),
+                                  manager);
+        }
+}
+
+static void
+draw_background_changed (GSettings            *settings,
+                         const char           *key,
+                         CinnamonBackgroundManager *manager)
+{
+        if (dont_draw_background (manager) == FALSE)
+                setup_bg_and_draw_background (manager);
+}
+
+gboolean
+cinnamon_background_manager_start (CinnamonBackgroundManager *manager)
+{
+        manager->priv->settings = g_settings_new ("org.cinnamon.background");
+        g_signal_connect (manager->priv->settings, "changed::draw-background",
+                          G_CALLBACK (draw_background_changed), manager);
+
+        setup_bg_and_draw_background (manager);
+            //draw_background_after_session_loads (manager);
+
+
+        return TRUE;
+}
+
+void
+cinnamon_background_manager_stop (CinnamonBackgroundManager *manager)
+{
+        CinnamonBackgroundManagerPrivate *p = manager->priv;
+
+        g_debug ("Stopping background manager");
+
+        disconnect_screen_signals (manager);
+
+        if (manager->priv->proxy) {
+                disconnect_session_manager_listener (manager);
+                g_object_unref (manager->priv->proxy);
+        }
+
+        g_signal_handlers_disconnect_by_func (manager->priv->settings,
+                                              settings_change_event_cb,
+                                              manager);
+
+        if (p->settings != NULL) {
+                g_object_unref (p->settings);
+                p->settings = NULL;
+        }
+
+        if (p->bg != NULL) {
+                g_object_unref (p->bg);
+                p->bg = NULL;
+        }
+}
+
+/**
+ * cinnamon_background_manager_get_default:
+ *
+ * Return Value: (transfer none): The global #CinnamonBackgroundManager singleton
+ */
+CinnamonBackgroundManager *
+cinnamon_background_manager_get_default ()
+{
+  static CinnamonBackgroundManager *instance = NULL;
+
+  if (instance == NULL)
+    instance = g_object_new (CINNAMON_TYPE_BACKGROUND_MANAGER, NULL);
+
+  return instance;
+}
+
+static GObject *
+cinnamon_background_manager_constructor (GType                  type,
+                                    guint                  n_construct_properties,
+                                    GObjectConstructParam *construct_properties)
+{
+        CinnamonBackgroundManager      *background_manager;
+
+        background_manager = CINNAMON_BACKGROUND_MANAGER (G_OBJECT_CLASS (cinnamon_background_manager_parent_class)->constructor (type,
+                                                                                                                        n_construct_properties,
+                                                                                                                        construct_properties));
+
+        return G_OBJECT (background_manager);
+}
+
+static void
+cinnamon_background_manager_class_init (CinnamonBackgroundManagerClass *klass)
+{
+        GObjectClass   *object_class = G_OBJECT_CLASS (klass);
+
+        object_class->constructor = cinnamon_background_manager_constructor;
+        object_class->finalize = cinnamon_background_manager_finalize;
+
+        g_type_class_add_private (klass, sizeof (CinnamonBackgroundManagerPrivate));
+}
+
+static void
+cinnamon_background_manager_init (CinnamonBackgroundManager *manager)
+{
+        manager->priv = CINNAMON_BACKGROUND_MANAGER_GET_PRIVATE (manager);
+        cinnamon_background_manager_start (manager);
+}
+
+static void
+cinnamon_background_manager_finalize (GObject *object)
+{
+        CinnamonBackgroundManager *background_manager;
+
+        g_return_if_fail (object != NULL);
+        g_return_if_fail (CINNAMON_IS_BACKGROUND_MANAGER (object));
+
+        background_manager = CINNAMON_BACKGROUND_MANAGER (object);
+
+        g_return_if_fail (background_manager->priv != NULL);
+
+        G_OBJECT_CLASS (cinnamon_background_manager_parent_class)->finalize (object);
+}
diff --git a/src/cinnamon-background-manager.h b/src/cinnamon-background-manager.h
new file mode 100644
index 0000000..9a56e32
--- /dev/null
+++ b/src/cinnamon-background-manager.h
@@ -0,0 +1,57 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2007 William Jon McCann <mccann@jhu.edu>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#ifndef __CINNAMON_BACKGROUND_MANAGER_H
+#define __CINNAMON_BACKGROUND_MANAGER_H
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define CINNAMON_TYPE_BACKGROUND_MANAGER         (cinnamon_background_manager_get_type ())
+#define CINNAMON_BACKGROUND_MANAGER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), CINNAMON_TYPE_BACKGROUND_MANAGER, CinnamonBackgroundManager))
+#define CINNAMON_BACKGROUND_MANAGER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), CINNAMON_TYPE_BACKGROUND_MANAGER, CinnamonBackgroundManagerClass))
+#define CINNAMON_IS_BACKGROUND_MANAGER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), CINNAMON_TYPE_BACKGROUND_MANAGER))
+#define CINNAMON_IS_BACKGROUND_MANAGER_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), CINNAMON_TYPE_BACKGROUND_MANAGER))
+#define CINNAMON_BACKGROUND_MANAGER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CINNAMON_TYPE_BACKGROUND_MANAGER, CinnamonBackgroundManagerClass))
+
+typedef struct CinnamonBackgroundManagerPrivate CinnamonBackgroundManagerPrivate;
+
+typedef struct
+{
+        GObject                     parent;
+        CinnamonBackgroundManagerPrivate *priv;
+} CinnamonBackgroundManager;
+
+typedef struct
+{
+        GObjectClass   parent_class;
+} CinnamonBackgroundManagerClass;
+
+GType                   cinnamon_background_manager_get_type            (void);
+
+CinnamonBackgroundManager *cinnamon_background_manager_get_default (void);
+
+gboolean                cinnamon_background_manager_start               (CinnamonBackgroundManager *manager);
+void                    cinnamon_background_manager_stop                (CinnamonBackgroundManager *manager);
+
+G_END_DECLS
+
+#endif /* __CINNAMON_BACKGROUND_MANAGER_H */
-- 
1.8.1.5


From a8ff3be406573d3163ac07e8a19fbe1d5a3ca0a7 Mon Sep 17 00:00:00 2001
From: Michael Webster <miketwebster@gmail.com>
Date: Tue, 16 Apr 2013 18:28:16 -0400
Subject: [PATCH 2/3] Change default background

---
 data/org.cinnamon.gschema.xml.in | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/data/org.cinnamon.gschema.xml.in b/data/org.cinnamon.gschema.xml.in
index 6f55477..35b0972 100644
--- a/data/org.cinnamon.gschema.xml.in
+++ b/data/org.cinnamon.gschema.xml.in
@@ -782,7 +782,7 @@
       </_description>
     </key>
     <key name="picture-uri" type="s">
-      <default>'file://@datadir@/themes/Adwaita/backgrounds/adwaita-timed.xml'</default>
+      <default>'file:///usr/share/backgrounds/linuxmint/default_background.jpg'</default>
       <_summary>Picture URI</_summary>
       <_description>
         URI to use for the background image. Not that the backend only supports
-- 
1.8.1.5


From 148ac0ab07f8248358e8baf510052d05e76d4d71 Mon Sep 17 00:00:00 2001
From: Michael Webster <miketwebster@gmail.com>
Date: Tue, 16 Apr 2013 18:41:16 -0400
Subject: [PATCH 3/3] Use distro-agnostic background..

---
 data/org.cinnamon.gschema.xml.in | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/data/org.cinnamon.gschema.xml.in b/data/org.cinnamon.gschema.xml.in
index 35b0972..0d01089 100644
--- a/data/org.cinnamon.gschema.xml.in
+++ b/data/org.cinnamon.gschema.xml.in
@@ -782,7 +782,7 @@
       </_description>
     </key>
     <key name="picture-uri" type="s">
-      <default>'file:///usr/share/backgrounds/linuxmint/default_background.jpg'</default>
+      <default>'file:///usr/share/themes/Adwaita/backgrounds/adwaita-timed.xml'</default>
       <_summary>Picture URI</_summary>
       <_description>
         URI to use for the background image. Not that the backend only supports
-- 
1.8.1.5

