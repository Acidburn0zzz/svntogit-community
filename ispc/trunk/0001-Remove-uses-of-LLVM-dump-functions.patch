diff --git a/src/llvmutil.cpp b/src/llvmutil.cpp
--- a/src/llvmutil.cpp
+++ b/src/llvmutil.cpp
@@ -45,6 +45,7 @@
   #include <llvm/IR/Instructions.h>
   #include <llvm/IR/BasicBlock.h>
 #endif
+#include <llvm/Support/raw_os_ostream.h>
 #include <set>
 #include <map>
 
@@ -1550,7 +1551,7 @@ lDumpValue(llvm::Value *v, std::set<llvm::Value *> &done) {
         return;
 
     fprintf(stderr, "  ");
-    v->dump();
+    v->print(llvm::errs());
     done.insert(v);
 
     if (inst == NULL)
diff --git a/src/opt.cpp b/src/opt.cpp
--- a/src/opt.cpp
+++ b/src/opt.cpp
@@ -173,7 +173,7 @@ static llvm::Pass *CreatePromoteLocalToPrivatePass();
                   strlen(getenv("FUNC"))))) {                           \
         fprintf(stderr, "Start of " NAME "\n");                \
         fprintf(stderr, "---------------\n");                  \
-        bb.dump();                                             \
+        bb.print(llvm::errs());                                \
         fprintf(stderr, "---------------\n\n");                \
     } else /* eat semicolon */
 
@@ -184,7 +184,7 @@ static llvm::Pass *CreatePromoteLocalToPrivatePass();
                   strlen(getenv("FUNC"))))) {                           \
         fprintf(stderr, "End of " NAME " %s\n", modifiedAny ? "** CHANGES **" : ""); \
         fprintf(stderr, "---------------\n");                  \
-        bb.dump();                                             \
+        bb.print(llvm::errs());                                \
         fprintf(stderr, "---------------\n\n");                \
     } else /* eat semicolon */
 
@@ -537,7 +537,7 @@ void
 Optimize(llvm::Module *module, int optLevel) {
     if (g->debugPrint) {
         printf("*** Code going into optimization ***\n");
-        module->dump();
+        module->print(llvm::errs(), nullptr);
     }
     DebugPassManager optPM;
     optPM.add(llvm::createVerifierPass(),0);
@@ -932,7 +932,7 @@ Optimize(llvm::Module *module, int optLevel) {
 
     if (g->debugPrint) {
         printf("\n*****\nFINAL OUTPUT\n*****\n");
-        module->dump();
+        module->print(llvm::errs(), nullptr);
     }
 
 }
@@ -4895,7 +4895,7 @@ bool
 DebugPass::runOnModule(llvm::Module &module) {
     fprintf(stderr, "%s", str_output);
     fflush(stderr);
-    module.dump();
+    module.print(llvm::errs(), nullptr);
     return true;
 }
 
