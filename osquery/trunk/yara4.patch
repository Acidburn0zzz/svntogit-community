commit 01d01e39a87e339c88cab216b85ee14428c0f2ec
Author: Anatol Pomozov <anatol.pomozov@gmail.com>
Date:   Fri May 15 19:04:57 2020 -0700

    Adopt code for the YARA 4 API changes
    
    https://github.com/VirusTotal/yara/wiki/Backward-incompatible-changes-in-YARA-4.0-API

diff --git a/osquery/tables/yara/yara_utils.cpp b/osquery/tables/yara/yara_utils.cpp
index 897c18c2..d08bf437 100644
--- a/osquery/tables/yara/yara_utils.cpp
+++ b/osquery/tables/yara/yara_utils.cpp
@@ -31,6 +31,7 @@ bool yaraShouldSkipFile(const std::string& path, mode_t st_mode) {
 void YARACompilerCallback(int error_level,
                           const char* file_name,
                           int line_number,
+                          const YR_RULE* rule,
                           const char* message,
                           void* user_data) {
   if (error_level == YARA_ERROR_LEVEL_ERROR) {
@@ -209,7 +210,7 @@ Status handleRuleFiles(const std::string& category,
  * This is the YARA callback. Used to store matching rules in the row which is
  * passed in as user_data.
  */
-int YARACallback(int message, void* message_data, void* user_data) {
+int YARACallback(YR_SCAN_CONTEXT* context, int message, void* message_data, void* user_data) {
   if (message == CALLBACK_MSG_RULE_MATCHING) {
     Row* r = (Row*)user_data;
     YR_RULE* rule = (YR_RULE*)message_data;
@@ -223,7 +224,7 @@ int YARACallback(int message, void* message_data, void* user_data) {
     YR_STRING* string = nullptr;
     yr_rule_strings_foreach(rule, string) {
       YR_MATCH* match = nullptr;
-      yr_string_matches_foreach(string, match) {
+      yr_string_matches_foreach(context, string, match) {
         if ((*r)["strings"].length() > 0) {
           (*r)["strings"] += "," + std::string(string->identifier);
         } else {
diff --git a/osquery/tables/yara/yara_utils.h b/osquery/tables/yara/yara_utils.h
index dd860041..bf984240 100644
--- a/osquery/tables/yara/yara_utils.h
+++ b/osquery/tables/yara/yara_utils.h
@@ -28,6 +28,7 @@ const std::string kYARAHome{OSQUERY_HOME "yara/"};
 void YARACompilerCallback(int error_level,
                           const char* file_name,
                           int line_number,
+                          const YR_RULE* rule,
                           const char* message,
                           void* user_data);
 
@@ -42,7 +43,7 @@ Status handleRuleFiles(const std::string& category,
  */
 bool yaraShouldSkipFile(const std::string& path, mode_t st_mode);
 
-int YARACallback(int message, void* message_data, void* user_data);
+int YARACallback(YR_SCAN_CONTEXT* context, int message, void* message_data, void* user_data);
 
 /**
  * @brief A simple ConfigParserPlugin for a "yara" dictionary key.
