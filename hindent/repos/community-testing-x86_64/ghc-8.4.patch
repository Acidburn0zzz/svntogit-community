From f0ac1ebed87bde6d93dbe5eac42ff5b5fb23e7ee Mon Sep 17 00:00:00 2001
From: Rob Looby <robertjlooby@gmail.com>
Date: Fri, 11 May 2018 13:12:07 -0500
Subject: [PATCH] Make work with lts-11 and ghc-8.4.2 nightly build

---
 .travis.yml              |  6 +++++-
 src/HIndent/CabalFile.hs | 28 ++++++++++++++++++++++++----
 stack.yaml               |  7 ++++---
 3 files changed, 33 insertions(+), 8 deletions(-)

diff --git a/src/HIndent/CabalFile.hs b/src/HIndent/CabalFile.hs
index 083d965..d8c731e 100644
--- a/src/HIndent/CabalFile.hs
+++ b/src/HIndent/CabalFile.hs
@@ -1,14 +1,21 @@
+{-# LANGUAGE CPP #-}
+
 module HIndent.CabalFile
   ( getCabalExtensionsForSourcePath
   ) where
 
+import qualified Data.ByteString as BS
 import Data.List
 import Data.Maybe
 import Data.Traversable
 import Distribution.ModuleName
 import Distribution.PackageDescription
 import Distribution.PackageDescription.Configuration
+#if MIN_VERSION_Cabal(2, 2, 0)
+import Distribution.PackageDescription.Parsec
+#else
 import Distribution.PackageDescription.Parse
+#endif
 import Language.Haskell.Extension
 import qualified Language.Haskell.Exts.Extension as HSE
 import System.Directory
@@ -82,6 +89,19 @@ findCabalFiles dir rel = do
     [] -> findCabalFiles (takeDirectory dir) (takeFileName dir </> rel)
     _ -> return $ Just (fmap (\n -> dir </> n) cabalnames, rel)
 
+getGenericPackageDescription :: FilePath -> IO (Maybe GenericPackageDescription)
+#if MIN_VERSION_Cabal(2, 2, 0)
+getGenericPackageDescription cabalPath = do
+    cabaltext <- BS.readFile cabalPath
+    return $ parseGenericPackageDescriptionMaybe cabaltext
+#else
+getGenericPackageDescription cabalPath = do
+  cabaltext <- readFile cabalPath
+  case parsePackageDescription cabaltext of
+    ParseOk _ gpd -> return $ Just gpd
+    _             -> return Nothing
+#endif
+
 -- | Find the `Stanza` that refers to this source path
 getCabalStanza :: FilePath -> IO (Maybe Stanza)
 getCabalStanza srcpath = do
@@ -91,10 +111,10 @@ getCabalStanza srcpath = do
     Just (cabalpaths, relpath) -> do
       stanzass <-
         for cabalpaths $ \cabalpath -> do
-          cabaltext <- readFile cabalpath
-          case parsePackageDescription cabaltext of
-            ParseFailed _ -> return []
-            ParseOk _ gpd -> do
+          genericPackageDescription <- getGenericPackageDescription cabalpath
+          case genericPackageDescription of
+            Nothing -> return []
+            Just gpd -> do
               return $ packageStanzas $ flattenPackageDescription gpd
       return $
         case filter (\stanza -> stanzaIsSourceFilePath stanza relpath) $
