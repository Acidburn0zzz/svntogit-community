diff -rupN coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_calendarData.c coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_calendarData.c
--- coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_calendarData.c	2021-03-12 14:51:31.467369566 +0100
+++ coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_calendarData.c	2021-03-12 14:55:07.887506576 +0100
@@ -115,8 +115,8 @@ int32_t GlobalizationNative_GetCalendars
 {
     UErrorCode err = U_ZERO_ERROR;
     char locale[ULOC_FULLNAME_CAPACITY];
-    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, FALSE, &err);
-    UEnumeration* pEnum = ucal_getKeywordValuesForLocale("calendar", locale, TRUE, &err);
+    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, false, &err);
+    UEnumeration* pEnum = ucal_getKeywordValuesForLocale("calendar", locale, true, &err);
     int stringEnumeratorCount = uenum_count(pEnum, &err);
     int calendarsReturned = 0;
     for (int i = 0; i < stringEnumeratorCount && calendarsReturned < calendarsCapacity; i++)
@@ -186,7 +186,7 @@ ResultCode GlobalizationNative_GetCalend
 {
     UErrorCode err = U_ZERO_ERROR;
     char locale[ULOC_FULLNAME_CAPACITY];
-    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, FALSE, &err);
+    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, false, &err);
 
     if (U_FAILURE(err))
         return UnknownError;
@@ -198,7 +198,7 @@ ResultCode GlobalizationNative_GetCalend
         case CalendarData_MonthDay:
             return GetMonthDayPattern(locale, result, resultCapacity);
         default:
-            assert(FALSE);
+            assert(false);
             return UnknownError;
     }
 }
@@ -219,19 +219,19 @@ static int InvokeCallbackForDatePattern(
     UDateFormat* pFormat = udat_open(UDAT_NONE, style, locale, NULL, 0, NULL, 0, &err);
 
     if (U_FAILURE(err))
-        return FALSE;
+        return false;
 
     UErrorCode ignore = U_ZERO_ERROR;
-    int32_t patternLen = udat_toPattern(pFormat, FALSE, NULL, 0, &ignore) + 1;
+    int32_t patternLen = udat_toPattern(pFormat, false, NULL, 0, &ignore) + 1;
 
     UChar* pattern = calloc(patternLen, sizeof(UChar));
     if (pattern == NULL)
     {
         udat_close(pFormat);
-        return FALSE;
+        return false;
     }
 
-    udat_toPattern(pFormat, FALSE, pattern, patternLen, &err);
+    udat_toPattern(pFormat, false, pattern, patternLen, &err);
     udat_close(pFormat);
 
     if (U_SUCCESS(err))
@@ -259,7 +259,7 @@ static int InvokeCallbackForDateTimePatt
     UDateTimePatternGenerator* pGenerator = udatpg_open(locale, &err);
 
     if (U_FAILURE(err))
-        return FALSE;
+        return false;
 
     UErrorCode ignore = U_ZERO_ERROR;
     int32_t patternLen = udatpg_getBestPattern(pGenerator, patternSkeleton, -1, NULL, 0, &ignore) + 1;
@@ -268,7 +268,7 @@ static int InvokeCallbackForDateTimePatt
     if (bestPattern == NULL)
     {
         udatpg_close(pGenerator);
-        return FALSE;
+        return false;
     }
 
     udatpg_getBestPattern(pGenerator, patternSkeleton, -1, bestPattern, patternLen, &err);
@@ -301,7 +301,7 @@ static int32_t EnumSymbols(const char* l
     UDateFormat* pFormat = udat_open(UDAT_DEFAULT, UDAT_DEFAULT, locale, NULL, 0, NULL, 0, &err);
 
     if (U_FAILURE(err))
-        return FALSE;
+        return false;
 
     char localeWithCalendarName[ULOC_FULLNAME_CAPACITY];
     strncpy(localeWithCalendarName, locale, ULOC_FULLNAME_CAPACITY);
@@ -314,7 +314,7 @@ static int32_t EnumSymbols(const char* l
     if (U_FAILURE(err))
     {
         udat_close(pFormat);
-        return FALSE;
+        return false;
     }
 
     udat_setCalendar(pFormat, pCalendar);
@@ -416,7 +416,7 @@ static int32_t EnumAbbrevEraNames(const
     strncpy(localeNamePtr, locale, ULOC_FULLNAME_CAPACITY);
     localeNamePtr[ULOC_FULLNAME_CAPACITY - 1] = 0;
 
-    while (TRUE)
+    while (true)
     {
         UErrorCode status = U_ZERO_ERROR;
         const char* name = GetCalendarName(calendarId);
@@ -431,7 +431,7 @@ static int32_t EnumAbbrevEraNames(const
         {
             EnumUResourceBundle(erasResBundle, callback, context);
             CloseResBundle(rootResBundle, calResBundle, targetCalResBundle, erasColResBundle, erasResBundle);
-            return TRUE;
+            return true;
         }
 
         // Couldn't find the data we need for this locale, we should fallback.
@@ -484,10 +484,10 @@ int32_t GlobalizationNative_EnumCalendar
 {
     UErrorCode err = U_ZERO_ERROR;
     char locale[ULOC_FULLNAME_CAPACITY];
-    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, FALSE, &err);
+    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, false, &err);
 
     if (U_FAILURE(err))
-        return FALSE;
+        return false;
 
     switch (dataType)
     {
@@ -528,8 +528,8 @@ int32_t GlobalizationNative_EnumCalendar
         case CalendarData_AbbrevEraNames:
             return EnumAbbrevEraNames(locale, calendarId, callback, context);
         default:
-            assert(FALSE);
-            return FALSE;
+            assert(false);
+            return false;
     }
 }
 
@@ -573,7 +573,7 @@ int32_t GlobalizationNative_GetJapaneseE
     UCalendar* pCal = ucal_open(NULL, 0, JAPANESE_LOCALE_AND_CALENDAR, UCAL_TRADITIONAL, &err);
 
     if (U_FAILURE(err))
-        return FALSE;
+        return false;
 
     ucal_set(pCal, UCAL_ERA, era);
     ucal_set(pCal, UCAL_YEAR, 1);
@@ -583,7 +583,7 @@ int32_t GlobalizationNative_GetJapaneseE
     if (U_FAILURE(err))
     {
         ucal_close(pCal);
-        return FALSE;
+        return false;
     }
 
     // set the date to Jan 1
@@ -620,5 +620,5 @@ int32_t GlobalizationNative_GetJapaneseE
     }
 
     ucal_close(pCal);
-    return FALSE;
+    return false;
 }
diff -rupN coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_casing.c coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_casing.c
--- coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_casing.c	2021-03-12 14:51:31.467369566 +0100
+++ coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_casing.c	2021-03-12 14:54:35.214466426 +0100
@@ -29,7 +29,7 @@ void GlobalizationNative_ChangeCase(
     // compiler wasn't doing that optimization, and it results in an ~15-20% perf
     // improvement on longer strings.)
 
-    UBool isError = FALSE;
+    UBool isError = false;
     int32_t srcIdx = 0, dstIdx = 0;
     UChar32 srcCodepoint, dstCodepoint;
 
@@ -40,7 +40,7 @@ void GlobalizationNative_ChangeCase(
             U16_NEXT(lpSrc, srcIdx, cwSrcLength, srcCodepoint);
             dstCodepoint = u_toupper(srcCodepoint);
             U16_APPEND(lpDst, dstIdx, cwDstLength, dstCodepoint, isError);
-            assert(isError == FALSE && srcIdx == dstIdx);
+            assert(isError == false && srcIdx == dstIdx);
         }
     }
     else
@@ -50,7 +50,7 @@ void GlobalizationNative_ChangeCase(
             U16_NEXT(lpSrc, srcIdx, cwSrcLength, srcCodepoint);
             dstCodepoint = u_tolower(srcCodepoint);
             U16_APPEND(lpDst, dstIdx, cwDstLength, dstCodepoint, isError);
-            assert(isError == FALSE && srcIdx == dstIdx);
+            assert(isError == false && srcIdx == dstIdx);
         }
     }
 }
@@ -68,7 +68,7 @@ void GlobalizationNative_ChangeCaseInvar
 {
     // See algorithmic comment in ChangeCase.
 
-    UBool isError = FALSE;
+    UBool isError = false;
     int32_t srcIdx = 0, dstIdx = 0;
     UChar32 srcCodepoint, dstCodepoint;
 
@@ -82,7 +82,7 @@ void GlobalizationNative_ChangeCaseInvar
             U16_NEXT(lpSrc, srcIdx, cwSrcLength, srcCodepoint);
             dstCodepoint = ((srcCodepoint == (UChar32)0x0131) ? (UChar32)0x0131 : u_toupper(srcCodepoint));
             U16_APPEND(lpDst, dstIdx, cwDstLength, dstCodepoint, isError);
-            assert(isError == FALSE && srcIdx == dstIdx);
+            assert(isError == false && srcIdx == dstIdx);
         }
     }
     else
@@ -95,7 +95,7 @@ void GlobalizationNative_ChangeCaseInvar
             U16_NEXT(lpSrc, srcIdx, cwSrcLength, srcCodepoint);
             dstCodepoint = ((srcCodepoint == (UChar32)0x0130) ? (UChar32)0x0130 : u_tolower(srcCodepoint));
             U16_APPEND(lpDst, dstIdx, cwDstLength, dstCodepoint, isError);
-            assert(isError == FALSE && srcIdx == dstIdx);
+            assert(isError == false && srcIdx == dstIdx);
         }
     }
 }
@@ -112,7 +112,7 @@ void GlobalizationNative_ChangeCaseTurki
 {
     // See algorithmic comment in ChangeCase.
 
-    UBool isError = FALSE;
+    UBool isError = false;
     int32_t srcIdx = 0, dstIdx = 0;
     UChar32 srcCodepoint, dstCodepoint;
 
@@ -125,7 +125,7 @@ void GlobalizationNative_ChangeCaseTurki
             U16_NEXT(lpSrc, srcIdx, cwSrcLength, srcCodepoint);
             dstCodepoint = ((srcCodepoint == (UChar32)0x0069) ? (UChar32)0x0130 : u_toupper(srcCodepoint));
             U16_APPEND(lpDst, dstIdx, cwDstLength, dstCodepoint, isError);
-            assert(isError == FALSE && srcIdx == dstIdx);
+            assert(isError == false && srcIdx == dstIdx);
         }
     }
     else
@@ -137,7 +137,7 @@ void GlobalizationNative_ChangeCaseTurki
             U16_NEXT(lpSrc, srcIdx, cwSrcLength, srcCodepoint);
             dstCodepoint = ((srcCodepoint == (UChar32)0x0049) ? (UChar32)0x0131 : u_tolower(srcCodepoint));
             U16_APPEND(lpDst, dstIdx, cwDstLength, dstCodepoint, isError);
-            assert(isError == FALSE && srcIdx == dstIdx);
+            assert(isError == false && srcIdx == dstIdx);
         }
     }
 }
diff -rupN coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_collation.c coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_collation.c
--- coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_collation.c	2021-03-12 14:51:31.467369566 +0100
+++ coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_collation.c	2021-03-12 14:55:29.346169931 +0100
@@ -306,10 +306,10 @@ UCollator* CloneCollatorWithOptions(cons
     return pClonedCollator;
 }
 
-// Returns TRUE if all the collation elements in str are completely ignorable
+// Returns true if all the collation elements in str are completely ignorable
 static int CanIgnoreAllCollationElements(const UCollator* pColl, const UChar* lpStr, int32_t length)
 {
-    int result = TRUE;
+    int result = true;
     UErrorCode err = U_ZERO_ERROR;
     UCollationElements* pCollElem = ucol_openElements(pColl, lpStr, length, &err);
 
@@ -320,7 +320,7 @@ static int CanIgnoreAllCollationElements
         {
             if (curCollElem != 0)
             {
-                result = FALSE;
+                result = false;
                 break;
             }
         }
@@ -328,7 +328,7 @@ static int CanIgnoreAllCollationElements
         ucol_closeElements(pCollElem);
     }
 
-    return U_SUCCESS(err) ? result : FALSE;
+    return U_SUCCESS(err) ? result : false;
 
 }
 
@@ -422,7 +422,7 @@ int32_t GlobalizationNative_GetSortVersi
     }
     else
     {
-        assert(FALSE && "Unexpected ucol_getVersion to fail.");
+        assert(false && "Unexpected ucol_getVersion to fail.");
 
         // we didn't use UCOL_TAILORINGS_VERSION because it is deprecated in ICU v5
         result = UCOL_RUNTIME_VERSION << 16 | UCOL_BUILDER_VERSION;
@@ -527,7 +527,7 @@ static int AreEqualOrdinalIgnoreCase(UCh
 
     if (one == two)
     {
-        return TRUE;
+        return true;
     }
 
     if (one == 0x0131 || two == 0x0131)
@@ -535,7 +535,7 @@ static int AreEqualOrdinalIgnoreCase(UCh
         // On Windows with InvariantCulture, the LATIN SMALL LETTER DOTLESS I (U+0131)
         // capitalizes to itself, whereas with ICU it capitalizes to LATIN CAPITAL LETTER I (U+0049).
         // We special case it to match the Windows invariant behavior.
-        return FALSE;
+        return false;
     }
 
     return u_toupper(one) == u_toupper(two);
@@ -560,14 +560,14 @@ int32_t GlobalizationNative_IndexOfOrdin
         const UChar *src = lpSource, *trg = lpTarget;
         UChar32 srcCodepoint, trgCodepoint;
 
-        int32_t match = TRUE;
+        int32_t match = true;
         while (trgIdx < cwTargetLength)
         {
             U16_NEXT(src, srcIdx, cwSourceLength, srcCodepoint);
             U16_NEXT(trg, trgIdx, cwTargetLength, trgCodepoint);
             if (!AreEqualOrdinalIgnoreCase(srcCodepoint, trgCodepoint))
             {
-                match = FALSE; 
+                match = false; 
                 break;
             }
         }
@@ -598,7 +598,7 @@ int32_t GlobalizationNative_StartsWith(
                         int32_t cwSourceLength,
                         int32_t options)
 {
-    int32_t result = FALSE;
+    int32_t result = false;
     UErrorCode err = U_ZERO_ERROR;
     const UCollator* pColl = GetCollatorFromSortHandle(pSortHandle, options, &err);
 
@@ -614,7 +614,7 @@ int32_t GlobalizationNative_StartsWith(
             {
                 if (idx == 0)
                 {
-                    result = TRUE;
+                    result = true;
                 }
                 else
                 {
@@ -640,7 +640,7 @@ int32_t GlobalizationNative_EndsWith(
                         int32_t cwSourceLength,
                         int32_t options)
 {
-    int32_t result = FALSE;
+    int32_t result = false;
     UErrorCode err = U_ZERO_ERROR;
     const UCollator* pColl = GetCollatorFromSortHandle(pSortHandle, options, &err);
 
@@ -657,7 +657,7 @@ int32_t GlobalizationNative_EndsWith(
             {
                 if ((idx + usearch_getMatchedLength(pSearch)) == cwSourceLength)
                 {
-                    result = TRUE;
+                    result = true;
                 }
                 else
                 {
diff -rupN coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_icushim.c coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_icushim.c
--- coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_icushim.c	2021-03-12 14:51:31.467369566 +0100
+++ coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_icushim.c	2021-03-12 14:55:47.701211172 +0100
@@ -38,13 +38,13 @@ static int FindICULibs(const char* versi
 
     if (libicuuc == NULL)
     {
-        return FALSE;
+        return false;
     }
 
     // in OSX all ICU APIs exist in the same library libicucore.A.dylib
     libicui18n = libicuuc;
 
-    return TRUE;
+    return true;
 }
 
 #else // __APPLE__
@@ -103,13 +103,13 @@ static int FindSymbolVersion(int majorVe
                 sprintf(symbolName, "u_strlen%s", symbolVersion);
                 if (dlsym(libicuuc, symbolName) == NULL)
                 {
-                    return FALSE;
+                    return false;
                 }
             }
         }
     }
 
-    return TRUE;
+    return true;
 }
 
 // Try to open the necessary ICU libraries
@@ -159,12 +159,12 @@ static int FindLibUsingOverride(const ch
         {
             if (OpenICULibraries(first, second, third, versionPrefix, symbolName, symbolVersion))
             {
-                return TRUE;
+                return true;
             }
         }
     }
 
-    return FALSE;
+    return false;
 }
 
 // Search for library files with names including the major version.
@@ -176,7 +176,7 @@ static int FindLibWithMajorVersion(const
     // Select the version of ICU present at build time.
     if (OpenICULibraries(MinICUVersion, -1, -1, versionPrefix, symbolName, symbolVersion))
     {
-        return TRUE;
+        return true;
     }
 
     // Select the highest supported version of ICU present on the local machine
@@ -184,11 +184,11 @@ static int FindLibWithMajorVersion(const
     {
         if (OpenICULibraries(i, -1, -1, versionPrefix, symbolName, symbolVersion))
         {
-            return TRUE;
+            return true;
         }
     }
 
-    return FALSE;
+    return false;
 }
 
 // Select the highest supported version of ICU present on the local machine
@@ -201,12 +201,12 @@ static int FindLibWithMajorMinorVersion(
         {
             if (OpenICULibraries(i, j, -1, versionPrefix, symbolName, symbolVersion))
             {
-                return TRUE;
+                return true;
             }
         }
     }
 
-    return FALSE;
+    return false;
 }
 
 // Select the highest supported version of ICU present on the local machine
@@ -221,13 +221,13 @@ static int FindLibWithMajorMinorSubVersi
             {
                 if (OpenICULibraries(i, j, k, versionPrefix, symbolName, symbolVersion))
                 {
-                    return TRUE;
+                    return true;
                 }
             }
         }
     }
 
-    return FALSE;
+    return false;
 }
 
 
@@ -256,7 +256,7 @@ int32_t GlobalizationNative_LoadICU()
         if (!FindICULibs(VERSION_PREFIX_SUSE, symbolName, symbolVersion))
 #endif
         {
-            return FALSE;
+            return false;
         }
     }
 
@@ -275,7 +275,7 @@ int32_t GlobalizationNative_LoadICU()
     libicui18n = NULL;
 #endif // __APPLE__
 
-    return TRUE;
+    return true;
 }
 
 // GlobalizationNative_GetICUVersion
diff -rupN coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_locale.c coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_locale.c
--- coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_locale.c	2021-03-12 14:51:31.470703210 +0100
+++ coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_locale.c	2021-03-12 14:55:55.868637806 +0100
@@ -15,7 +15,7 @@ int32_t UErrorCodeToBool(UErrorCode stat
 {
     if (U_SUCCESS(status))
     {
-        return TRUE;
+        return true;
     }
 
     // assert errors that should never occur
@@ -24,7 +24,7 @@ int32_t UErrorCodeToBool(UErrorCode stat
 
     // add possible SetLastError support here
 
-    return FALSE;
+    return false;
 }
 
 int32_t GetLocale(const UChar* localeName,
@@ -193,7 +193,7 @@ int32_t GlobalizationNative_GetLocaleNam
     UErrorCode status = U_ZERO_ERROR;
 
     char localeNameBuffer[ULOC_FULLNAME_CAPACITY];
-    GetLocale(localeName, localeNameBuffer, ULOC_FULLNAME_CAPACITY, TRUE, &status);
+    GetLocale(localeName, localeNameBuffer, ULOC_FULLNAME_CAPACITY, true, &status);
     u_charsToUChars_safe(localeNameBuffer, value, valueLength, &status);
 
     if (U_SUCCESS(status))
diff -rupN coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_localeNumberData.c coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_localeNumberData.c
--- coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_localeNumberData.c	2021-03-12 14:51:31.470703210 +0100
+++ coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_localeNumberData.c	2021-03-12 14:56:16.237199744 +0100
@@ -56,10 +56,10 @@ static char* NormalizeNumericPattern(con
     }
 
     int index = 0;
-    int minusAdded = FALSE;
-    int digitAdded = FALSE;
-    int currencyAdded = FALSE;
-    int spaceAdded = FALSE;
+    int minusAdded = false;
+    int digitAdded = false;
+    int currencyAdded = false;
+    int spaceAdded = false;
 
     for (int i = iStart; i <= iEnd; i++)
     {
@@ -69,7 +69,7 @@ static char* NormalizeNumericPattern(con
             case UCHAR_MINUS:
             case UCHAR_OPENPAREN:
             case UCHAR_CLOSEPAREN:
-                minusAdded = TRUE;
+                minusAdded = true;
                 break;
         }
     }
@@ -103,7 +103,7 @@ static char* NormalizeNumericPattern(con
             case UCHAR_DIGIT:
                 if (!digitAdded)
                 {
-                    digitAdded = TRUE;
+                    digitAdded = true;
                     destPattern[index++] = 'n';
                 }
                 break;
@@ -111,7 +111,7 @@ static char* NormalizeNumericPattern(con
             case UCHAR_CURRENCY:
                 if (!currencyAdded)
                 {
-                    currencyAdded = TRUE;
+                    currencyAdded = true;
                     destPattern[index++] = 'C';
                 }
                 break;
@@ -120,19 +120,19 @@ static char* NormalizeNumericPattern(con
             case UCHAR_NBSPACE:
                 if (!spaceAdded)
                 {
-                    spaceAdded = TRUE;
+                    spaceAdded = true;
                     destPattern[index++] = ' ';
                 }
                 else
                 {
-                    assert(FALSE);
+                    assert(false);
                 }
                 break;
 
             case UCHAR_MINUS:
             case UCHAR_OPENPAREN:
             case UCHAR_CLOSEPAREN:
-                minusAdded = TRUE;
+                minusAdded = true;
                 destPattern[index++] = (char)ch;
                 break;
 
@@ -162,7 +162,7 @@ static int GetNumericPattern(const UNumb
     const int MAX_DOTNET_NUMERIC_PATTERN_LENGTH = 6; // example: "(C n)" plus terminator
 
     UErrorCode ignore = U_ZERO_ERROR;
-    int32_t icuPatternLength = unum_toPattern(pNumberFormat, FALSE, NULL, 0, &ignore) + 1;
+    int32_t icuPatternLength = unum_toPattern(pNumberFormat, false, NULL, 0, &ignore) + 1;
 
     UChar* icuPattern = calloc(icuPatternLength, sizeof(UChar));
     if (icuPattern == NULL)
@@ -172,7 +172,7 @@ static int GetNumericPattern(const UNumb
 
     UErrorCode err = U_ZERO_ERROR;
 
-    unum_toPattern(pNumberFormat, FALSE, icuPattern, icuPatternLength, &err);
+    unum_toPattern(pNumberFormat, false, icuPattern, icuPatternLength, &err);
 
     assert(U_SUCCESS(err));
 
@@ -200,7 +200,7 @@ static int GetNumericPattern(const UNumb
         }
     }
 
-    assert(FALSE); // should have found a valid pattern
+    assert(false); // should have found a valid pattern
     free(normalizedPattern);
     return INVALID_FORMAT;
 }
@@ -239,7 +239,7 @@ static int GetCurrencyNegativePattern(co
 
     if (U_SUCCESS(status))
     {
-        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), TRUE);
+        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), true);
         if (value >= 0)
         {
             unum_close(pFormat);
@@ -270,7 +270,7 @@ static int GetCurrencyPositivePattern(co
 
     if (U_SUCCESS(status))
     {
-        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), FALSE);
+        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), false);
         if (value >= 0)
         {
             unum_close(pFormat);
@@ -301,7 +301,7 @@ static int GetNumberNegativePattern(cons
 
     if (U_SUCCESS(status))
     {
-        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), TRUE);
+        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), true);
         if (value >= 0)
         {
             unum_close(pFormat);
@@ -333,7 +333,7 @@ static int GetPercentNegativePattern(con
 
     if (U_SUCCESS(status))
     {
-        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), TRUE);
+        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), true);
         if (value >= 0)
         {
             unum_close(pFormat);
@@ -364,7 +364,7 @@ static int GetPercentPositivePattern(con
 
     if (U_SUCCESS(status))
     {
-        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), FALSE);
+        int value = GetNumericPattern(pFormat, Patterns, ARRAY_LENGTH(Patterns), false);
         if (value >= 0)
         {
             unum_close(pFormat);
@@ -408,11 +408,11 @@ int32_t GlobalizationNative_GetLocaleInf
 {
     UErrorCode status = U_ZERO_ERROR;
     char locale[ULOC_FULLNAME_CAPACITY];
-    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, FALSE, &status);
+    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, false, &status);
 
     if (U_FAILURE(status))
     {
-        return FALSE;
+        return false;
     }
 
     switch (localeNumberData)
@@ -515,7 +515,7 @@ int32_t GlobalizationNative_GetLocaleInf
             break;
         default:
             status = U_UNSUPPORTED_ERROR;
-            assert(FALSE);
+            assert(false);
             break;
     }
 
@@ -534,7 +534,7 @@ int32_t GlobalizationNative_GetLocaleInf
 {
     UErrorCode status = U_ZERO_ERROR;
     char locale[ULOC_FULLNAME_CAPACITY];
-    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, FALSE, &status);
+    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, false, &status);
 
     if (U_FAILURE(status))
     {
diff -rupN coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_localeStringData.c coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_localeStringData.c
--- coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_localeStringData.c	2021-03-12 14:51:31.470703210 +0100
+++ coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_localeStringData.c	2021-03-12 14:56:31.718640278 +0100
@@ -210,7 +210,7 @@ int32_t GlobalizationNative_GetLocaleInf
 {
     UErrorCode status = U_ZERO_ERROR;
     char locale[ULOC_FULLNAME_CAPACITY];
-    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, FALSE, &status);
+    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, false, &status);
 
     if (U_FAILURE(status))
     {
@@ -268,10 +268,10 @@ int32_t GlobalizationNative_GetLocaleInf
             status = GetLocaleInfoDecimalFormatSymbol(locale, UNUM_INTL_CURRENCY_SYMBOL, value, valueLength);
             break;
         case LocaleString_CurrencyEnglishName:
-            status = GetLocaleCurrencyName(locale, FALSE, value, valueLength);
+            status = GetLocaleCurrencyName(locale, false, value, valueLength);
             break;
         case LocaleString_CurrencyNativeName:
-            status = GetLocaleCurrencyName(locale, TRUE, value, valueLength);
+            status = GetLocaleCurrencyName(locale, true, value, valueLength);
             break;
         case LocaleString_MonetaryDecimalSeparator:
             status = GetLocaleInfoDecimalFormatSymbol(locale, UNUM_MONETARY_SEPARATOR_SYMBOL, value, valueLength);
@@ -281,10 +281,10 @@ int32_t GlobalizationNative_GetLocaleInf
                 GetLocaleInfoDecimalFormatSymbol(locale, UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL, value, valueLength);
             break;
         case LocaleString_AMDesignator:
-            status = GetLocaleInfoAmPm(locale, TRUE, value, valueLength);
+            status = GetLocaleInfoAmPm(locale, true, value, valueLength);
             break;
         case LocaleString_PMDesignator:
-            status = GetLocaleInfoAmPm(locale, FALSE, value, valueLength);
+            status = GetLocaleInfoAmPm(locale, false, value, valueLength);
             break;
         case LocaleString_PositiveSign:
             status = GetLocaleInfoDecimalFormatSymbol(locale, UNUM_PLUS_SIGN_SYMBOL, value, valueLength);
@@ -352,10 +352,10 @@ int32_t GlobalizationNative_GetLocaleTim
 {
     UErrorCode err = U_ZERO_ERROR;
     char locale[ULOC_FULLNAME_CAPACITY];
-    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, FALSE, &err);
+    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, false, &err);
     UDateFormatStyle style = (shortFormat != 0) ? UDAT_SHORT : UDAT_MEDIUM;
     UDateFormat* pFormat = udat_open(style, UDAT_NONE, locale, NULL, 0, NULL, 0, &err);
-    udat_toPattern(pFormat, FALSE, value, valueLength, &err);
+    udat_toPattern(pFormat, false, value, valueLength, &err);
     udat_close(pFormat);
     return UErrorCodeToBool(err);
 }
diff -rupN coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_normalization.c coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_normalization.c
--- coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_normalization.c	2021-03-12 14:51:31.470703210 +0100
+++ coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_normalization.c	2021-03-12 14:54:11.855626285 +0100
@@ -48,7 +48,7 @@ int32_t GlobalizationNative_IsNormalized
 
     if (U_SUCCESS(err))
     {
-        return isNormalized == TRUE ? 1 : 0;
+        return isNormalized ? 1 : 0;
     }
     else
     {
diff -rupN coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_timeZoneInfo.c coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_timeZoneInfo.c
--- coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c.orig/src/corefx/System.Globalization.Native/pal_timeZoneInfo.c	2021-03-12 14:51:31.470703210 +0100
+++ coreclr.fa682a7bd0a7a1eb5f80904c10b88301eb33150c/src/corefx/System.Globalization.Native/pal_timeZoneInfo.c	2021-03-12 14:54:44.828694339 +0100
@@ -19,7 +19,7 @@ ResultCode GlobalizationNative_GetTimeZo
 {
     UErrorCode err = U_ZERO_ERROR;
     char locale[ULOC_FULLNAME_CAPACITY];
-    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, FALSE, &err);
+    GetLocale(localeName, locale, ULOC_FULLNAME_CAPACITY, false, &err);
 
     int32_t timeZoneIdLength = -1; // timeZoneId is NULL-terminated
     UCalendar* calendar = ucal_open(timeZoneId, timeZoneIdLength, locale, UCAL_DEFAULT, &err);
