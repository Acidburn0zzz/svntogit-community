# Maintainer: David Runge <dave@sleepmap.de>
pkgname=apparmor
pkgver=2.13.1
pkgrel=2
pkgdesc="Mandatory Access Control (MAC) using Linux Security Module (LSM)"
arch=('x86_64')
url="https://gitlab.com/apparmor/apparmor"
license=('GPL')
depends=('audit' 'pam' 'python')
makedepends=('swig' 'ruby')
checkdepends=('dejagnu' 'python-pyflakes')
optdepends=('perl: perl bindings'
            'ruby: ruby bindings')
provides=('libapparmor')
replaces=('apparmor-libapparmor' 'apparmor-pam' 'apparmor-parser'
'apparmor-profiles' 'apparmor-utils' 'apparmor-vim')
backup=('etc/apparmor/easyprof.conf'
        'etc/apparmor/logprof.conf'
        'etc/apparmor/notify.conf'
        'etc/apparmor/parser.conf'
        'etc/apparmor/subdomain.conf'
        'etc/apparmor/severity.db')
source=("https://launchpad.net/${pkgname}/${pkgver%.[0-9]}/${pkgver}/+download/${pkgname}-${pkgver}.tar.gz"{,.asc}
        "https://gitlab.com/${pkgname}/${pkgname}/merge_requests/240.diff")
sha512sums=('e4b9788ecc0b59285f17d5e87669f507bf849c15d0ac3833e8d1d6aa2ece7add15814c75f257cea9d71a709c1af4990d8b76773e59fd42dbf5cfa2de0f9495a7'
            'SKIP'
            'f784a6939352d12f9641d70e58447d1cfd018a6986141d4c9e8188032d71532b8c9dd38c4fec99d08bbe464527eb7031c504803de702a9ece4e331a1fea0980a')
# AppArmor Development Team (AppArmor signing key) <apparmor@lists.ubuntu.com>
validpgpkeys=('3ECDCBA5FB34D254961CC53F6689E64E3D3664BB')
_core_perl="/usr/bin/core_perl"

prepare() {
  cd "${pkgname}-${pkgver}"
  # fix PYTHONPATH for aa-logprof based check
  local _py3_ver=$(python --version | cut -d " " -f2)
  local path="${PWD}/libraries/libapparmor/swig/python/build/lib.linux-${CARCH}-${_py3_ver%"."*}/LibAppArmor"
  local libs="${PWD}/libraries/libapparmor/src/.libs"
  sed -e "/PYTHONPATH/ s|utils\ |utils:$path\ LD_LIBRARY_PATH=$libs\ |" \
      -i profiles/Makefile
  # remove test-aa.py (utils check), producing too many fails
  rm -v utils/test/test-aa.py
  # fix bin directory for parser install target
  # fix lib dir location
  sed -e 's|/usr/sbin|/usr/bin|g' \
      -e 's|/sbin|/usr/bin|g' \
      -e 's/\}\/lib\/apparmor/\}\/usr\/lib\/apparmor/' \
      -i parser/Makefile
  # fix default installation path for vim syntax file
  sed -e 's/share\/apparmor/share\/vim\/vimfiles\/syntax/' \
      -i utils/vim/Makefile
  # fixing syntax error in rc.apparmor.functions:
  # https://gitlab.com/apparmor/apparmor/merge_requests/240/diffs
  patch -Np1 -i ../240.diff
  cd libraries/libapparmor/
  autoreconf -vfi
}

build() {
  # export required perl executable locations
  export MAKEFLAGS+=" POD2MAN=${_core_perl}/pod2man"
  export MAKEFLAGS+=" POD2HTML=${_core_perl}/pod2html"
  export MAKEFLAGS+=" PODCHECKER=${_core_perl}/podchecker"
  export MAKEFLAGS+=" PROVE=${_core_perl}/prove"
  cd "${pkgname}-${pkgver}/libraries/libapparmor/"
  ./configure --prefix=/usr \
              --sbindir=/usr/bin \
              --with-perl \
              --with-python \
              --with-ruby
  make
  cd ../..
  make -C binutils
  make -C parser
  make -C profiles
  make -C utils
  make -C changehat/pam_apparmor
  make -C utils/vim
}

check() {
  cd "$pkgname-$pkgver"
  make -C libraries/libapparmor check
  make -C binutils check
# parser checks don't run on non-apparmor enabled kernel
#  make -C parser check
# profiles check need to be run on a system with aa installed?
#  make -C profiles check
  make -C utils check
}

package() {
  cd "$pkgname-$pkgver"
  make -C libraries/libapparmor DESTDIR="${pkgdir}" install
  make -C changehat/pam_apparmor DESTDIR="${pkgdir}/usr" install
  make -C binutils DESTDIR="${pkgdir}" install
  make -C parser DESTDIR="${pkgdir}" install
  make -C parser DESTDIR="${pkgdir}" install-systemd
  make -C profiles DESTDIR="${pkgdir}" install
  make -C utils DESTDIR="${pkgdir}" BINDIR="${pkgdir}/usr/bin" install
  # removing empty core_perl directory
  rm -rv "${pkgdir}"/usr/lib/perl5/*/core_perl
  # move ruby bindings to vendor_ruby
  mv -v "${pkgdir}/usr/lib/ruby/site_ruby/" \
    "${pkgdir}/usr/lib/ruby/vendor_ruby/"
  # adding files below /etc/apparmor.d to backup array
  cd "${pkgdir}"
  # tricking extract_function_variable() in makepkg into not detecting the
  # backup array modification
  [[ /usr/bin/true ]] && backup=( ${backup[@]} $(find "etc/${pkgname}.d/" -type f) )
}
