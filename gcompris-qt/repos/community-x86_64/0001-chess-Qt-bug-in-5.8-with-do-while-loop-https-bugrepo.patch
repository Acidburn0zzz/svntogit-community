From 36606b617776ea0c87dac48834e440930d1d881a Mon Sep 17 00:00:00 2001
From: Johnny Jazeix <jazeix@gmail.com>
Date: Sat, 18 Feb 2017 19:39:02 +0100
Subject: [PATCH 1/3] chess, Qt bug in 5.8 with do-while loop
 (https://bugreports.qt.io/browse/QTBUG-59012)

---
 src/activities/chess/engine.js | 28 ++++++++++++++++++----------
 1 file changed, 18 insertions(+), 10 deletions(-)

diff --git a/src/activities/chess/engine.js b/src/activities/chess/engine.js
index 9a8a48d6..12330306 100644
--- a/src/activities/chess/engine.js
+++ b/src/activities/chess/engine.js
@@ -581,11 +581,14 @@ function p4_check_check(state, colour){
     /*find the king.  The pieces list updates from the end,
      * so the last-most king is correctly placed.*/
     var pieces = state.pieces[colour];
-    var p;
     var i = pieces.length;
-    do {
-        p = pieces[--i];
-    } while (p[0] != (P4_KING | colour));
+    var king = P4_KING | colour
+    // can't do-while loop: https://bugreports.qt.io/browse/QTBUG-59012
+    var val = king-1
+    while (val !== king) {
+        var p = pieces[--i];
+        val = p[0]
+    };
     var s = p[1];
     var other_colour = 1 - colour;
     var dir = 10 - 20 * colour;
@@ -614,19 +617,26 @@ function p4_check_check(state, colour){
         var m = diagonal_moves[i];
         var e = s;
         var E;
-        do {
+        // can't do-while loop: https://bugreports.qt.io/browse/QTBUG-59012
+        e += m;
+        E = board[e];
+        while (!E) {
             e += m;
             E = board[e];
-        } while (!E);
+        }
         if((E & diag_mask) == diag_slider)
             return true;
 
         m = grid_moves[i];
         e = s;
-        do {
+        // can't do-while loop: https://bugreports.qt.io/browse/QTBUG-59012
+        e += m;
+        E = board[e];
+        while (!E) {
             e += m;
             E = board[e];
-        } while (!E);
+        }
+        
         if((E & grid_mask) == grid_slider)
             return true;
     }
@@ -984,7 +994,6 @@ function p4_move(state, s, e, promotion){
 
     /*Try the move, and see what the response is.*/
     var changes = p4_make_move(state, s, e, promotion);
-
     /*is it check? */
     if (p4_check_check(state, colour)){
         p4_unmake_move(state, changes);
@@ -997,7 +1006,6 @@ function p4_move(state, s, e, promotion){
 
     state.enpassant = changes.ep;
     state.history.push([s, e, promotion]);
-
     /*draw timeout: 50 moves without pawn move or capture is a draw */
     if (changes.E || changes.ep_position){
         state.draw_timeout = 0;
-- 
2.12.2

