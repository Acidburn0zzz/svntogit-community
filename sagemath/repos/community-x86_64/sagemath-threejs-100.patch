diff --git a/src/ext/threejs/threejs_template.html b/src/ext/threejs/threejs_template.html
index 0243bc1..48e8268 100644
--- a/src/ext/threejs/threejs_template.html
+++ b/src/ext/threejs/threejs_template.html
@@ -114,7 +114,7 @@ SAGE_SCRIPTS
         scene.add( sprite );
     }
 
-    if ( options.axes ) scene.add( new THREE.AxisHelper( Math.min( a[0]*b[1].x, a[1]*b[1].y, a[2]*b[1].z ) ) );
+    if ( options.axes ) scene.add( new THREE.AxesHelper( Math.min( a[0]*b[1].x, a[1]*b[1].y, a[2]*b[1].z ) ) );
 
     var camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.1, 1000 );
     camera.up.set( 0, 0, 1 );
@@ -177,7 +177,11 @@ SAGE_SCRIPTS
                                                    transparent: transparent, opacity: json.opacity,
                                                    alphaTest: .1 } );
 
-        var c = geometry.center().multiplyScalar( -1 );
+        var c = new THREE.Vector3();
+        geometry.computeBoundingBox();
+        geometry.boundingBox.getCenter( c );
+        geometry.translate( -c.x, -c.y, -c.z );
+
         var mesh = new THREE.Points( geometry, material );
         mesh.position.set( c.x, c.y, c.z );
         scene.add( mesh );
@@ -199,7 +203,11 @@ SAGE_SCRIPTS
         var material = new THREE.LineBasicMaterial( { color: json.color, linewidth: json.linewidth,
                                                       transparent: transparent, opacity: json.opacity } );
 
-        var c = geometry.center().multiplyScalar( -1 );
+        var c = new THREE.Vector3();
+        geometry.computeBoundingBox();
+        geometry.boundingBox.getCenter( c );
+        geometry.translate( -c.x, -c.y, -c.z );
+
         var mesh = new THREE.LineSegments( geometry, material );
         mesh.position.set( c.x, c.y, c.z );
         scene.add( mesh );
@@ -235,7 +243,11 @@ SAGE_SCRIPTS
                                      transparent: transparent, opacity: json.opacity,
                                      shininess: 20 } );
 
-        var c = geometry.center().multiplyScalar( -1 );
+        var c = new THREE.Vector3();
+        geometry.computeBoundingBox();
+        geometry.boundingBox.getCenter( c );
+        geometry.translate( -c.x, -c.y, -c.z );
+
         var mesh = new THREE.Mesh( geometry, material );
         mesh.position.set( c.x, c.y, c.z );
         scene.add( mesh );
