diff --git a/build/pkgs/cython/package-version.txt b/build/pkgs/cython/package-version.txt
index e346294..11eeeba 100644
--- a/build/pkgs/cython/package-version.txt
+++ b/build/pkgs/cython/package-version.txt
@@ -1 +1 @@
-0.22
+0.22.p1
diff --git a/build/pkgs/cython/patches/embedsignatures.patch b/build/pkgs/cython/patches/embedsignatures.patch
new file mode 100644
index 0000000..c3d81f0
--- /dev/null
+++ b/build/pkgs/cython/patches/embedsignatures.patch
@@ -0,0 +1,44 @@
+commit 9139a7f836151fb5bdb1624a05dce13b1bb17164
+Author: Stefan Behnel <stefan_ml@behnel.de>
+Date:   Mon Apr 6 10:45:48 2015 +0200
+
+    support NULL as default argument in auto doc transform
+
+diff --git a/Cython/Compiler/AutoDocTransforms.py b/Cython/Compiler/AutoDocTransforms.py
+index 775f635..88b0cd8 100644
+--- a/Cython/Compiler/AutoDocTransforms.py
++++ b/Cython/Compiler/AutoDocTransforms.py
+@@ -51,6 +51,8 @@ class EmbedSignature(CythonTransform):
+         default_val = arg.default
+         if not default_val:
+             return None
++        if isinstance(default_val, ExprNodes.NullNode):
++            return 'NULL'
+         try:
+             denv = self.denv  # XXX
+             ctval = default_val.compile_time_value(self.denv)
+diff --git a/tests/run/embedsignatures.pyx b/tests/run/embedsignatures.pyx
+index 0bfebfe..781cd21 100644
+--- a/tests/run/embedsignatures.pyx
++++ b/tests/run/embedsignatures.pyx
+@@ -199,6 +199,9 @@ __doc__ = ur"""
+ 
+     >>> print(funcdoc(f_defexpr5))
+     f_defexpr5(int x=4)
++
++    >>> print(funcdoc(f_charptr_null))
++    f_charptr_null(char *s=NULL) -> char *
+ """
+ 
+ cdef class Ext:
+@@ -403,6 +406,10 @@ cpdef f_defexpr4(int x = (Ext.CONST1 + FLAG1) * Ext.CONST2):
+ cpdef f_defexpr5(int x = 2+2):
+     pass
+ 
++cpdef (char*) f_charptr_null(char* s=NULL):
++    return s or b'abc'
++
++
+ # no signatures for lambda functions
+ lambda_foo = lambda x: 10
+ lambda_bar = lambda x: 20
diff --git a/src/doc/common/sage_autodoc.py b/src/doc/common/sage_autodoc.py
index b7969ab..7f71b9c 100644
--- a/src/doc/common/sage_autodoc.py
+++ b/src/doc/common/sage_autodoc.py
@@ -38,7 +38,7 @@ from sphinx.util.compat import Directive
 from sphinx.util.inspect import isdescriptor, safe_getmembers, safe_getattr
 from sphinx.util.docstrings import prepare_docstring
 
-from sage.misc.sageinspect import _sage_getdoc_unformatted, sage_getargspec, isclassinstance
+from sage.misc.sageinspect import sage_getdoc_original, sage_getargspec, isclassinstance
 from sage.misc.lazy_import import LazyImport
 
 try:
@@ -408,7 +408,7 @@ class Documenter(object):
 
     def get_doc(self, encoding=None):
         """Decode and return lines of the docstring(s) for the object."""
-        docstring = _sage_getdoc_unformatted(self.object) #self.get_attr(self.object, '__doc__', None)
+        docstring = sage_getdoc_original(self.object)
         if docstring:
             # make sure we have Unicode docstrings, then sanitize and split
             # into lines
@@ -532,7 +532,7 @@ class Documenter(object):
             else:
                 # ignore undocumented members if :undoc-members:
                 # is not given
-                doc = _sage_getdoc_unformatted(member) #self.get_attr(member, '__doc__', None)
+                doc = sage_getdoc_original(member)
                 skip = not self.options.undoc_members and not doc
 
             # give the user a chance to decide whether this member
@@ -817,7 +817,9 @@ class FunctionDocumenter(ModuleLevelDocumenter):
         # whose doc string coincides with that of f and is thus different from
         # that of the class CachedFunction. In that situation, we want that f is documented.
         # This is part of SAGE TRAC 9976
-        return isinstance(member, (FunctionType, BuiltinFunctionType)) or (isclassinstance(member) and _sage_getdoc_unformatted(member)!=_sage_getdoc_unformatted(member.__class__))
+        return (isinstance(member, (FunctionType, BuiltinFunctionType))
+                or (isclassinstance(member)
+                    and sage_getdoc_original(member) != sage_getdoc_original(member.__class__)))
 
     #SAGE TRAC 9976: This function has been rewritten to support the
     #_sage_argspec_ attribute which makes it possible to get argument
@@ -961,15 +963,15 @@ class ClassDocumenter(ModuleLevelDocumenter):
         content = self.env.config.autoclass_content
 
         docstrings = []
-        docstring = _sage_getdoc_unformatted(self.object) #self.get_attr(self.object, '__doc__', None)
+        docstring = sage_getdoc_original(self.object)
         if docstring:
             docstrings.append(docstring)
 
         # for classes, what the "docstring" is can be controlled via a
         # config value; the default is only the class docstring
         if content in ('both', 'init'):
-            initdocstring = _sage_getdoc_unformatted( #self.get_attr(
-                self.get_attr(self.object, '__init__', None))#, '__doc__')
+            initdocstring = sage_getdoc_original(
+                self.get_attr(self.object, '__init__', None))
             # for new-style classes, no __init__ means default __init__
             if initdocstring == object.__init__.__doc__:
                 initdocstring = None
diff --git a/src/sage/misc/cachefunc.pyx b/src/sage/misc/cachefunc.pyx
index efe98bc..a9faca6 100644
--- a/src/sage/misc/cachefunc.pyx
+++ b/src/sage/misc/cachefunc.pyx
@@ -803,7 +803,7 @@ cdef class CachedFunction(object):
         from sage.misc.sageinspect import _extract_embedded_position
         f = self.f
         doc = f.__doc__ or ''
-        if not doc or _extract_embedded_position(doc.splitlines()[0]) is None:
+        if not doc or _extract_embedded_position(doc) is None:
             try:
                 sourcelines = sage_getsourcelines(f)
                 from sage.env import SAGE_SRC, SAGE_LIB
diff --git a/src/sage/misc/lazy_attribute.pyx b/src/sage/misc/lazy_attribute.pyx
index ec74e1a..fe013ae 100644
--- a/src/sage/misc/lazy_attribute.pyx
+++ b/src/sage/misc/lazy_attribute.pyx
@@ -66,7 +66,7 @@ cdef class _lazy_attribute(object):
 
             sage: Parent.element_class
             <sage.misc.lazy_attribute.lazy_attribute object at 0x...>
-            sage: Parent.element_class.__doc__[64:120]
+            sage: Parent.element_class.__doc__[91:147]
             'The (default) class for the elements of this parent\n\n   '
             sage: Parent.element_class.__name__
             'element_class'
diff --git a/src/sage/misc/sagedoc.py b/src/sage/misc/sagedoc.py
index 1a6c178..2c9e6e0 100644
--- a/src/sage/misc/sagedoc.py
+++ b/src/sage/misc/sagedoc.py
@@ -409,12 +409,6 @@ def format(s, embedded=False):
 
     Directives must be separated by a comma.
 
-    NOTE:
-
-    If the first line of the string provides embedding information,
-    which is the case for doc strings from extension modules, then
-    the first line will not be changed.
-
     INPUT:
 
     - ``s`` - string
@@ -425,13 +419,18 @@ def format(s, embedded=False):
     Set ``embedded`` equal to True if formatting for use in the
     notebook; this just gets passed as an argument to ``detex``.
 
+    .. SEEALSO::
+
+        :func:`sage.misc.sageinspect.sage_getdoc` to get the formatted
+        documentation of a given object.
+
     EXAMPLES::
 
         sage: from sage.misc.sagedoc import format
-        sage: identity_matrix(2).rook_vector.__doc__[110:182]
+        sage: identity_matrix(2).rook_vector.__doc__[201:273]
         'Let `A` be an `m` by `n` (0,1)-matrix. We identify `A` with a chessboard'
 
-        sage: format(identity_matrix(2).rook_vector.__doc__[110:182])
+        sage: format(identity_matrix(2).rook_vector.__doc__[201:273])
         'Let A be an m by n (0,1)-matrix. We identify A with a chessboard\n'
 
     If the first line of the string is 'nodetex', remove 'nodetex' but
@@ -456,18 +455,6 @@ def format(s, embedded=False):
         sage: sage.misc.sagedoc.format(sage.combinat.ranker.on_fly.__doc__)
         "   Returns ...  Todo: add tests as in combinat::rankers\n"
 
-    We check that the embedding information of a doc string from an extension
-    module is preserved, even if it is longer than a usual line. Moreover,
-    a ``nodetex`` directive in the first "essential" line of the doc string
-    is recognised. That has been implemented in trac ticket #11815::
-
-        sage: r = 'File: _local_user_with_a_very_long_name_that_would_normally_be_wrapped_sage_temp_machine_name_1234_tmp_1_spyx_0.pyx (starting at line 6)\nnodetex\nsome doc for a cython method\n`x \geq y`'
-        sage: print format(r)
-        File: _local_user_with_a_very_long_name_that_would_normally_be_wrapped_sage_temp_machine_name_1234_tmp_1_spyx_0.pyx (starting at line 6)
-        <BLANKLINE>
-        some doc for a cython method
-        `x \geq y`
-
     In the following use case, the ``nodetex`` directive would have been ignored prior
     to #11815::
 
@@ -488,11 +475,10 @@ def format(s, embedded=False):
             `x \geq y`
         <BLANKLINE>
 
-    We check that the ``noreplace`` directive works, even combined with ``nodetex`` and
-    an embedding information (see trac ticket #11817)::
+    We check that the ``noreplace`` directive works, even combined with
+    ``nodetex`` (see :trac:`11817`)::
 
-        sage: print format('File: bla.py (starting at line 1)\nnodetex, noreplace\n<<<identity_matrix>>>`\\not= 0`')
-        File: bla.py (starting at line 1)
+        sage: print format('''nodetex, noreplace\n<<<identity_matrix>>>`\\not= 0`''')
         <<<identity_matrix>>>`\not= 0`
 
     If replacement is impossible, then no error is raised::
@@ -512,24 +498,6 @@ def format(s, embedded=False):
     if not isinstance(s, str):
         raise TypeError("s must be a string")
 
-    # Doc strings may contain embedding information, which should not
-    # be subject to formatting (line breaks must not be inserted).
-    # Hence, we first try to find out whether there is an embedding
-    # information.
-    first_newline = s.find(os.linesep)
-    embedding_info = ''
-    if first_newline > -1:
-        first_line = s[:first_newline]
-        from sage.misc.sageinspect import _extract_embedded_position
-        if _extract_embedded_position(first_line) is not None:
-            embedding_info = first_line + os.linesep
-            s = s[first_newline+len(os.linesep):]
-            # Hence, by now, s starts with the second line.
-    else:
-        from sage.misc.sageinspect import _extract_embedded_position
-        if _extract_embedded_position(s) is not None:
-            return s
-
     # Leading empty lines must be removed, since we search for directives
     # in the first line.
     s = s.lstrip(os.linesep)
@@ -587,7 +555,7 @@ def format(s, embedded=False):
             s = process_mathtt(s)
         s = process_extlinks(s, embedded=embedded)
         s = detex(s, embedded=embedded)
-    return embedding_info+s
+    return s
 
 def format_src(s):
     """
diff --git a/src/sage/misc/sageinspect.py b/src/sage/misc/sageinspect.py
index 86850cb..aa3c6a0 100644
--- a/src/sage/misc/sageinspect.py
+++ b/src/sage/misc/sageinspect.py
@@ -63,16 +63,6 @@ Python classes::
     sage: sage_getsource(BlockFinder)
     'class BlockFinder:...'
 
-Python classes with no docstring, but an __init__ docstring::
-
-    sage: class Foo:
-    ...     def __init__(self):
-    ...         'docstring'
-    ...         pass
-    ...
-    sage: sage_getdoc(Foo)
-    'docstring\n'
-
 Test introspection of functions defined in Python and Cython files:
 
 Cython functions::
@@ -127,6 +117,7 @@ import inspect
 import functools
 import os
 import tokenize
+import types
 EMBEDDED_MODE = False
 from sage.env import SAGE_SRC
 
@@ -162,7 +153,7 @@ import re
 # Parse strings of form "File: sage/rings/rational.pyx (starting at line 1080)"
 # "\ " protects a space in re.VERBOSE mode.
 __embedded_position_re = re.compile(r'''
-\A                                          # anchor to the beginning of the string
+^                                           # anchor to the beginning of the line
 File:\ (?P<FILENAME>.*?)                    # match File: then filename
 \ \(starting\ at\ line\ (?P<LINENO>\d+)\)   # match line number
 \n?                                         # if there is a newline, eat it
@@ -204,19 +195,22 @@ def _extract_embedded_position(docstring):
     - Extensions by Nick Alexander
     - Extension for interactive Cython code by Simon King
     """
-    if docstring is None:
+    try:
+        res = __embedded_position_re.search(docstring)
+    except TypeError:
         return None
-    res = __embedded_position_re.match(docstring)
-    if res is not None:
-        raw_filename = res.group('FILENAME')
-        filename = os.path.join(SAGE_SRC, raw_filename)
-        if not os.path.isfile(filename):
-            from sage.misc.misc import SPYX_TMP
-            filename = os.path.join(SPYX_TMP, '_'.join(raw_filename.split('_')[:-1]), raw_filename)
-        lineno = int(res.group('LINENO'))
-        original = res.group('ORIGINAL')
-        return (original, filename, lineno)
-    return None
+
+    if res is None:
+        return None
+
+    raw_filename = res.group('FILENAME')
+    filename = os.path.join(SAGE_SRC, raw_filename)
+    if not os.path.isfile(filename):
+        from sage.misc.misc import SPYX_TMP
+        filename = os.path.join(SPYX_TMP, '_'.join(raw_filename.split('_')[:-1]), raw_filename)
+    lineno = int(res.group('LINENO'))
+    original = res.group('ORIGINAL')
+    return (original, filename, lineno)
 
 
 class BlockFinder:
@@ -1474,23 +1468,30 @@ def sage_getdef(obj, obj_name=''):
 def _sage_getdoc_unformatted(obj):
     r"""
     Return the unformatted docstring associated to ``obj`` as a
-    string.  Feed the results from this into the
-    sage.misc.sagedoc.format for printing to the screen.
-
-    INPUT: ``obj``, a function, module, etc.: something with a docstring.
+    string.
 
     If ``obj`` is a Cython object with an embedded position in its
-    docstring, the embedded position is stripped.
+    docstring, the embedded position is **not** stripped.
+
+    INPUT:
+
+    - ``obj`` -- a function, module, etc.: something with a docstring.
 
     EXAMPLES::
 
         sage: from sage.misc.sageinspect import _sage_getdoc_unformatted
-        sage: _sage_getdoc_unformatted(identity_matrix)[87:126]
-        'Return the `n \\times n` identity matrix'
+        sage: print _sage_getdoc_unformatted(sage.rings.integer.Integer)
+        Integer(x=None, base=0)
+        File: sage/rings/integer.pyx (starting at line ...)
+        <BLANKLINE>
+            The ``Integer`` class represents arbitrary precision
+            integers. It derives from the ``Element`` class, so
+            integers can be used as ring elements anywhere in Sage.
+        ...
 
     TESTS:
 
-    Test that we suppress useless built-in output (Ticket #3342)
+    Test that we suppress useless built-in output (:trac:`3342`)::
 
         sage: from sage.misc.sageinspect import _sage_getdoc_unformatted
         sage: _sage_getdoc_unformatted(isinstance.__class__)
@@ -1501,36 +1502,132 @@ def _sage_getdoc_unformatted(obj):
     - William Stein
     - extensions by Nick Alexander
     """
-    if obj is None: return ''
-    r = None
+    if obj is None:
+        return ''
     try:
         r = obj._sage_doc_()
     except (AttributeError, TypeError): # the TypeError occurs if obj is a class
         r = obj.__doc__
 
-    #Check to see if there is an __init__ method, and if there
-    #is, use its docstring.
-    if r is None and hasattr(obj, '__init__'):
-        r = obj.__init__.__doc__
-
-    if r is None:
-        return ''
-
     # Check if the __doc__ attribute was actually a string, and
     # not a 'getset_descriptor' or similar.
-    import types
     if not isinstance(r, types.StringTypes):
         return ''
+    elif isinstance(r, unicode):
+        return r.encode('utf-8', 'ignore')
+    else:
+        return r
+
+
+def sage_getdoc_original(obj):
+    r"""
+    Return the unformatted docstring associated to ``obj`` as a
+    string.
+
+    If ``obj`` is a Cython object with an embedded position or signature in
+    its docstring, the embedded information is stripped. If the stripped
+    docstring is empty, then the stripped docstring of ``obj.__init__`` is
+    returned instead.
+
+    Feed the results from this into the function
+    :func:`sage.misc.sagedoc.format` for printing to the screen.
+
+    INPUT:
+
+    - ``obj`` -- a function, module, etc.: something with a docstring.
+
+    EXAMPLES::
+
+        sage: from sage.misc.sageinspect import sage_getdoc_original
+
+    Here is a class that has its own docstring::
+
+        sage: print sage_getdoc_original(sage.rings.integer.Integer)
+        <BLANKLINE>
+            The ``Integer`` class represents arbitrary precision
+            integers. It derives from the ``Element`` class, so
+            integers can be used as ring elements anywhere in Sage.
+        ...
+
+    Here is a class that does not have its own docstring, so that the
+    docstring of the ``__init__`` method is used::
+
+        sage: print sage_getdoc_original(Parent)
+        <BLANKLINE>
+        Base class for all parents.
+        <BLANKLINE>
+        Parents are the Sage/mathematical analogues of container
+        objects in computer science.
+        ...
+
+    Old-style classes are supported::
+
+        sage: class OldStyleClass:
+        ....:     def __init__(self):
+        ....:         '''The __init__ docstring'''
+        ....:         pass
+        sage: print sage_getdoc_original(OldStyleClass)
+        The __init__ docstring
+
+    When there is no ``__init__`` method, we just get an empty string::
+
+        sage: class OldStyleClass:
+        ....:     pass
+        sage: sage_getdoc_original(OldStyleClass)
+        ''
+
+    If an instance of a class does not have its own docstring, the docstring
+    of its class results::
 
-    from sagenb.misc.misc import encoded_str
-    return encoded_str(r)
+        sage: sage_getdoc_original(sage.plot.colors.aliceblue) == sage_getdoc_original(sage.plot.colors.Color)
+        True
+
+    """
+    # typ is the type corresponding to obj, which is obj itself if
+    # that was a type or old-style class
+    if isinstance(obj, (type, types.ClassType) ):
+        typ = obj
+    else:
+        typ = type(obj)
+
+    s = _sage_getdoc_unformatted(obj)
+    if s:
+        pos = _extract_embedded_position(s)
+        if pos is None:
+            # It can still be that the doc starts with the signature of the
+            # class' __init__ method, but does not contain embedding
+            # information. This is particularly critical if it contains * or
+            # **, which would be misinterpreted by sphinx.
+            name = typ.__name__.split('.')[-1]
+            if s.startswith(name + "("):
+                L = s.split(os.linesep, 1)
+                if L[0].endswith(")"):
+                    if len(L) < 2:
+                        s = ""    # The doc was just one line with the signature
+                    else:
+                        s = L[1]  # Remove first line, keep the rest
+        else:
+            s = pos[0]
+    if not s:
+        try:
+            init = typ.__init__
+        except AttributeError:
+            pass
+        else:
+            # The docstring of obj is empty. To get something, we want to use
+            # the documentation of the __init__ method, but only if it belongs
+            # to (the type of) obj. The type for which a method is defined is
+            # either stored in the attribute `__objclass__` (cython) or
+            # `im_class` (python) of the method.
+            if (getattr(init, '__objclass__', None) or
+                getattr(init, 'im_class', None)) == typ:
+                return sage_getdoc_original(init)
+    return s
 
 def sage_getdoc(obj, obj_name='', embedded_override=False):
     r"""
     Return the docstring associated to ``obj`` as a string.
 
-    INPUT: ``obj``, a function, module, etc.: something with a docstring.
-
     If ``obj`` is a Cython object with an embedded position in its
     docstring, the embedded position is stripped.
 
@@ -1539,6 +1636,10 @@ def sage_getdoc(obj, obj_name='', embedded_override=False):
     EMBEDDED_MODE.  If this argument is True, then it is formatted as
     if EMBEDDED_MODE were True.
 
+    INPUT:
+
+    - ``obj`` -- a function, module, etc.: something with a docstring.
+
     EXAMPLES::
 
         sage: from sage.misc.sageinspect import sage_getdoc
@@ -1561,18 +1662,10 @@ def sage_getdoc(obj, obj_name='', embedded_override=False):
     - extensions by Nick Alexander
     """
     import sage.misc.sagedoc
-    if obj is None: return ''
-    r = _sage_getdoc_unformatted(obj)
-
-    if r is None:
+    if obj is None:
         return ''
-
-    s = sage.misc.sagedoc.format(str(r), embedded=(embedded_override or EMBEDDED_MODE))
-
-    # If there is a Cython embedded position, it needs to be stripped
-    pos = _extract_embedded_position(s)
-    if pos is not None:
-        s, _, _ = pos
+    r = sage_getdoc_original(obj)
+    s = sage.misc.sagedoc.format(r, embedded=(embedded_override or EMBEDDED_MODE))
 
     # Fix object naming
     if obj_name != '':
@@ -1763,7 +1856,7 @@ def sage_getsourcelines(obj):
 
     - ``obj`` -- function, etc.
 
-    OUTPUT: 
+    OUTPUT:
 
     (source_lines, lineno) or None: ``source_lines`` is a list of
     strings, and ``lineno`` is an integer.
@@ -1879,37 +1972,41 @@ def sage_getsourcelines(obj):
         if isinstance(obj,functools.partial):
             return sage_getsourcelines(obj.func)
         else:
-            #obj=obj.__class__
             return sage_getsourcelines(obj.__class__)
 
-    # If we can handle it, we do.  We first try Python's inspect, and
-    # if that fails then we try _sage_getdoc_unformatted. We can not use
-    # the latter right away, since otherwise there is an import problem
-    # at sage startup, believe it or not.
-    d = inspect.getdoc(obj)
+    # First, we deal with nested classes. Their name contains a dot, and we
+    # have a special function for that purpose.
+    if (not hasattr(obj, '__class__')) or hasattr(obj,'__metaclass__'):
+        # That hapens for ParentMethods
+        # of categories
+        if '.' in obj.__name__ or '.' in getattr(obj,'__qualname__',''):
+            return _sage_getsourcelines_name_with_dot(obj)
+
+    # Next, we try _sage_getdoc_unformatted()
+    d = _sage_getdoc_unformatted(obj)
     pos = _extract_embedded_position(d)
     if pos is None:
-        if (not hasattr(obj, '__class__')) or hasattr(obj,'__metaclass__'):
-            # That hapens for ParentMethods
-            # of categories
-            if '.' in obj.__name__ or '.' in getattr(obj,'__qualname__',''):
-                return _sage_getsourcelines_name_with_dot(obj)
-        d = _sage_getdoc_unformatted(obj)
-        pos = _extract_embedded_position(d)
-        if pos is None:
+        try:
+            return inspect.getsourcelines(obj)
+        except (IOError, TypeError) as err:
             try:
-                return inspect.getsourcelines(obj)
-            except (IOError, TypeError):
-                if inspect.isclass(obj):
-                    try:
-                        B = obj.__base__
-                    except AttributeError:
-                        B = None
-                    if B is not None and B is not obj:
-                        return sage_getsourcelines(B)
-                if obj.__class__ != type:
-                    return sage_getsourcelines(obj.__class__)
-                raise
+                objinit = obj.__init__
+            except AttributeError:
+                pass
+            else:
+                d = _sage_getdoc_unformatted(objinit)
+                pos = _extract_embedded_position(d)
+                if pos is None:
+                    if inspect.isclass(obj):
+                        try:
+                            B = obj.__base__
+                        except AttributeError:
+                            B = None
+                        if B is not None and B is not obj:
+                            return sage_getsourcelines(B)
+                    if obj.__class__ != type:
+                        return sage_getsourcelines(obj.__class__)
+                    raise err
 
     (orig, filename, lineno) = pos
     try:
diff --git a/src/sage/repl/ipython_tests.py b/src/sage/repl/ipython_tests.py
index 810d82d..1303006 100644
--- a/src/sage/repl/ipython_tests.py
+++ b/src/sage/repl/ipython_tests.py
@@ -26,8 +26,6 @@ calls when you ask for the single-questionmark help, like `foo?` ::
        EXAMPLES:
     ...
     Class docstring:
-    function(code, globals[, name[, argdefs[, closure]]])
-    <BLANKLINE>
     Create a function object from a code object and a dictionary. The
     optional name string overrides the name from the code object. The
     optional argdefs tuple specifies the default argument values. The
diff --git a/src/sage/sets/set_from_iterator.py b/src/sage/sets/set_from_iterator.py
index ed43898..0416da0 100644
--- a/src/sage/sets/set_from_iterator.py
+++ b/src/sage/sets/set_from_iterator.py
@@ -449,7 +449,7 @@ class Decorator:
         from sage.misc.sageinspect import sage_getsourcelines, sage_getfile, _extract_embedded_position
         f = self.f
         doc = f.__doc__ or ''
-        if _extract_embedded_position(doc.splitlines()[0]) is None:
+        if _extract_embedded_position(doc) is None:
             try:
                 sourcelines = sage_getsourcelines(f)
                 from sage.env import SAGE_LIB, SAGE_SRC
diff --git a/src/sage/structure/dynamic_class.py b/src/sage/structure/dynamic_class.py
index 57495e2..84bd3e1 100644
--- a/src/sage/structure/dynamic_class.py
+++ b/src/sage/structure/dynamic_class.py
@@ -393,11 +393,6 @@ def dynamic_class_internal(name, bases, cls=None, reduction=None, doccls=None, p
         methods['_sage_src_lines_'] = _sage_src_lines
     methods['__doc__'] = doccls.__doc__
     methods['__module__'] = doccls.__module__
-    #if "_sage_doc_" not in methods:
-    #    from sage.misc.sageinspect import sage_getdoc
-    #    def _sage_getdoc(obj):
-    #        return sage_getdoc(cls)
-    #    methods['_sage_src_lines_'] = _sage_getdoc
 
     metaclass = DynamicMetaclass
     # The metaclass of a class must derive from the metaclasses of its
diff --git a/src/setup.py b/src/setup.py
index bc2a5a1..e632f78 100644
--- a/src/setup.py
+++ b/src/setup.py
@@ -537,6 +537,7 @@ def run_cythonize():
     version_file = os.path.join(os.path.dirname(__file__), '.cython_version')
     version_stamp = '\n'.join([
         'cython version: ' + str(Cython.__version__),
+        'embedsignature: True'
         'debug: ' + str(debug),
         'profile: ' + str(profile),
     ])
@@ -550,6 +551,7 @@ def run_cythonize():
         build_dir='build/cythonized',
         force=force,
         compiler_directives={
+            'embedsignature': True,
             'profile': profile,
         })

