diff --git a/Data/Algorithm/Patience.hs.orig b/Data/Algorithm/Patience.hs
index f987659..c7ccfba 100644
--- a/Data/Algorithm/Patience.hs.orig
+++ b/Data/Algorithm/Patience.hs
@@ -15,6 +15,7 @@ import qualified Data.Sequence as S
 import Data.Sequence ( (<|), (|>), (><), ViewL(..), ViewR(..) )
 import qualified Data.Foldable as F
 import qualified Data.Map      as M
+import qualified Data.Map.Strict as MS
 import qualified Data.IntMap   as IM
 
 import Data.List
@@ -68,7 +69,7 @@ longestIncreasing = extract . foldl' ins IM.empty where
 -- Elements whose second component appears exactly once.
 unique :: (Ord t) => S.Seq (a,t) -> M.Map t a
 unique = M.mapMaybe id . F.foldr ins M.empty where
-  ins (a,x) = M.insertWith' (\_ _ -> Nothing) x (Just a)
+  ins (a,x) = MS.insertWith (\_ _ -> Nothing) x (Just a)
 
 -- Given two sequences of numbered "lines", returns a list of points
 -- where unique lines match up.
