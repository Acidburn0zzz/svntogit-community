diff --git a/hphp/runtime/base/tv-helpers.cpp b/hphp/runtime/base/tv-helpers.cpp
index 4e01e81..1a872dd 100644
--- a/hphp/runtime/base/tv-helpers.cpp
+++ b/hphp/runtime/base/tv-helpers.cpp
@@ -14,6 +14,8 @@
    +----------------------------------------------------------------------+
 */

+#include <cmath>
+
 #include "hphp/runtime/base/tv-helpers.h"

 #include "hphp/runtime/base/dummy-resource.h"
@@ -673,7 +675,7 @@ bool tvCoerceParamToInt64InPlace(TypedValue* tv) {
   if (RuntimeOption::PHP7_ScalarTypes && tv->m_type == KindOfDouble) {
     if (tv->m_data.dbl < std::numeric_limits<int64_t>::min()) return false;
     if (tv->m_data.dbl > std::numeric_limits<int64_t>::max()) return false;
-    if (isnan(tv->m_data.dbl)) return false;
+    if (std::isnan(tv->m_data.dbl)) return false;
   }
   tvCastToInt64InPlace(tv);
   return true;
diff --git a/hphp/runtime/base/zend-printf.cpp b/hphp/runtime/base/zend-printf.cpp
index a008f3a..c6f0fa4 100644
--- a/hphp/runtime/base/zend-printf.cpp
+++ b/hphp/runtime/base/zend-printf.cpp
@@ -18,6 +18,7 @@
 #include "hphp/runtime/base/zend-printf.h"

 #include <math.h>
+#include <cmath>

 #include "hphp/runtime/base/array-iterator.h"
 #include "hphp/runtime/base/builtin-functions.h"
@@ -693,14 +694,14 @@ inline static void appenddouble(StringBuffer *buffer,
     precision = MAX_FLOAT_PRECISION;
   }

-  if (isnan(number)) {
+  if (std::isnan(number)) {
     is_negative = (number<0);
     appendstring(buffer, "NaN", 3, 0, padding,
                  alignment, 3, is_negative, 0, always_sign);
     return;
   }

-  if (isinf(number)) {
+  if (std::isinf(number)) {
     is_negative = (number<0);
     appendstring(buffer, "INF", 3, 0, padding,
                  alignment, 3, is_negative, 0, always_sign);
@@ -1407,10 +1408,10 @@ static int xbuf_format_converter(char **outbuf, const char *fmt, va_list ap)
               goto fmt_error;
           }

-          if (isnan(fp_num)) {
+          if (std::isnan(fp_num)) {
             s = const_cast<char*>("nan");
             s_len = 3;
-          } else if (isinf(fp_num)) {
+          } else if (std::isinf(fp_num)) {
             s = const_cast<char*>("inf");
             s_len = 3;
           } else {
@@ -1448,11 +1449,11 @@ static int xbuf_format_converter(char **outbuf, const char *fmt, va_list ap)
               goto fmt_error;
           }

-          if (isnan(fp_num)) {
+          if (std::isnan(fp_num)) {
              s = const_cast<char*>("NAN");
              s_len = 3;
              break;
-           } else if (isinf(fp_num)) {
+           } else if (std::isinf(fp_num)) {
              if (fp_num > 0) {
                s = const_cast<char*>("INF");
                s_len = 3;
diff --git a/hphp/runtime/ext/std/ext_std_math.cpp b/hphp/runtime/ext/std/ext_std_math.cpp
index 7bb7390..2d6da60 100644
--- a/hphp/runtime/ext/std/ext_std_math.cpp
+++ b/hphp/runtime/ext/std/ext_std_math.cpp
@@ -24,6 +24,8 @@
 #include "hphp/runtime/ext/std/ext_std.h"
 #include "hphp/system/constants.h"

+#include <cmath>
+
 namespace HPHP {
 ///////////////////////////////////////////////////////////////////////////////

@@ -187,9 +189,9 @@ Variant HHVM_FUNCTION(abs, const Variant& number) {
   }
 }

 bool HHVM_FUNCTION(is_finite, double val) { return std::isfinite(val);}
-bool HHVM_FUNCTION(is_infinite, double val) { return isinf(val);}
-bool HHVM_FUNCTION(is_nan, double val) { return isnan(val);}
+bool HHVM_FUNCTION(is_infinite, double val) { return std::isinf(val);}
+bool HHVM_FUNCTION(is_nan, double val) { return std::isnan(val);}

 Variant HHVM_FUNCTION(ceil, const Variant& number) {
   int64_t ival;
diff --git a/hphp/runtime/ext_zend_compat/php-src/main/snprintf.cpp b/hphp/runtime/ext_zend_compat/php-src/main/snprintf.cpp
index 352c4f8..7745085 100644
--- a/hphp/runtime/ext_zend_compat/php-src/main/snprintf.cpp
+++ b/hphp/runtime/ext_zend_compat/php-src/main/snprintf.cpp
@@ -29,6 +29,8 @@
 #include <stdlib.h>
 #include <math.h>

+#include <cmath>
+
 #ifdef HAVE_INTTYPES_H
 #include <inttypes.h>
 #endif
@@ -989,10 +991,10 @@ static int format_converter(register buffy * odp, const char *fmt, va_list ap) /
               goto fmt_error;
           }

-          if (zend_isnan(fp_num)) {
+          if (std::isnan(fp_num)) {
             s = "NAN";
             s_len = 3;
-          } else if (zend_isinf(fp_num)) {
+          } else if (std::isinf(fp_num)) {
             s = "INF";
             s_len = 3;
           } else {
@@ -1030,11 +1032,11 @@ static int format_converter(register buffy * odp, const char *fmt, va_list ap) /
               goto fmt_error;
           }

-          if (zend_isnan(fp_num)) {
+          if (std::isnan(fp_num)) {
             s = "NAN";
             s_len = 3;
             break;
-          } else if (zend_isinf(fp_num)) {
+          } else if (std::isinf(fp_num)) {
             if (fp_num > 0) {
               s = "INF";
               s_len = 3;
