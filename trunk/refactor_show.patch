diff --git a/src/doc/de/tutorial/latex.rst b/src/doc/de/tutorial/latex.rst
index 5fd844e..aa66b0d 100644
--- a/src/doc/de/tutorial/latex.rst
+++ b/src/doc/de/tutorial/latex.rst
@@ -128,7 +128,6 @@ Kapitel :ref:`sec-custom-generation` dargestellt.
 Der interne ``pretty_print()`` Befehl zeigt die Konvertierung von Sage
 Objekten in HTML Code der MathJax nutzt im Notebook.  ::
 
-    sage: from sage.misc.latex import pretty_print
     sage: pretty_print(x^12)
     <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}x^{12}</script></html>
     sage: pretty_print(integrate(sin(x), x))
diff --git a/src/doc/en/thematic_tutorials/explicit_methods_in_number_theory/nf_introduction.rst 
b/src/doc/en/thematic_tutorials/explicit_methods_in_number_theory/nf_introduction.rst
index 397c4cf..554b8a1 100644
--- a/src/doc/en/thematic_tutorials/explicit_methods_in_number_theory/nf_introduction.rst
+++ b/src/doc/en/thematic_tutorials/explicit_methods_in_number_theory/nf_introduction.rst
@@ -274,15 +274,15 @@ it to the variable ``a``.
 Viewing complicated symbolic expressions
 ----------------------------------------
 
-To see the solution nicely typeset, use the ``show``
+To see the solution nicely typeset, use the ``pretty_print``
 command
 
 .. link
 
 ::
 
-    sage: show(a)
-    -\frac{1}{2} ...
+    sage: pretty_print(a)
+    <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}-\frac{1}{2} ...
 
 .. math::
 
diff --git a/src/doc/fr/tutorial/latex.rst b/src/doc/fr/tutorial/latex.rst
index caa5854..fd2c8c0 100644
--- a/src/doc/fr/tutorial/latex.rst
+++ b/src/doc/fr/tutorial/latex.rst
@@ -125,7 +125,6 @@ La commande interne ``pretty_print()`` permet de convertir un objet Sage en code
 HTML utilisant MathJax. C'est le code qui sera ensuite utilisé dans le
 bloc-notes ::
 
-    sage: from sage.misc.latex import pretty_print
     sage: pretty_print(x^12)
     <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}x^{12}</script></html>
     sage: pretty_print(integrate(sin(x), x))
diff --git a/src/doc/pt/tutorial/latex.rst b/src/doc/pt/tutorial/latex.rst
index 70ebcd4..62298ae 100644
--- a/src/doc/pt/tutorial/latex.rst
+++ b/src/doc/pt/tutorial/latex.rst
@@ -132,7 +132,6 @@ esse processo é discutido abaixo na seção
 O comando interno ``pretty_print()`` ilustra a conversão de objetos do
 Sage para HTML que emprega o MathJax no Notebook. ::
 
-    sage: from sage.misc.latex import pretty_print
     sage: pretty_print(x^12)
     <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}x^{12}</script></html>
     sage: pretty_print(integrate(sin(x), x))
diff --git a/src/sage/graphs/generic_graph.py b/src/sage/graphs/generic_graph.py
index e0d573f..da82461 100644
--- a/src/sage/graphs/generic_graph.py
+++ b/src/sage/graphs/generic_graph.py
@@ -15414,6 +15414,21 @@ class GenericGraph(GenericGraph_pyx):
         from sage.graphs.graph_plot import GraphPlot
         return GraphPlot(graph=self, options=options)
 
+    def _rich_repr_(self, display_manager, **kwds):
+        """
+        Rich Output Magic Method
+
+        See :mod:`sage.repl.rich_output` for details.
+
+        EXAMPLES::
+
+            sage: from sage.repl.rich_output import get_display_manager
+            sage: dm = get_display_manager()
+            sage: Graph()._rich_repr_(dm, edge_labels=True)
+            OutputImagePng container
+        """
+        return self.plot(**kwds)._rich_repr_(display_manager)
+        
     @options()
     def plot(self, **options):
         r"""
diff --git a/src/sage/graphs/graph_list.py b/src/sage/graphs/graph_list.py
index e70cc6c..dca963e 100644
--- a/src/sage/graphs/graph_list.py
+++ b/src/sage/graphs/graph_list.py
@@ -239,21 +239,18 @@ def to_sparse6(list, file = None, output_list=False):
         file.write(l)
         file.flush()

-def to_graphics_arrays(list, **kwds):
+        
+def to_graphics_array(graph_list, **kwds):
     """
-    Returns a list of Sage graphics arrays containing the graphs in
-    list. The maximum number of graphs per array is 20 (5 rows of 4).
-    Use this function if there are too many graphs for the show_graphs
-    function. The graphics arrays will contain 20 graphs each except
-    potentially the last graphics array in the list.
+    Draw all graphs in a graphics array
 
     INPUT:
 
+    -  ``graph_list`` - a list of Sage graphs
 
-    -  ``list`` - a list of Sage graphs
-
+    GRAPH PLOTTING: 
 
-    GRAPH PLOTTING: Defaults to circular layout for graphs. This allows
+    Defaults to circular layout for graphs. This allows
     for a nicer display in a small area and takes much less time to
     compute than the spring- layout algorithm for many graphs.
 
@@ -261,44 +258,27 @@ def to_graphics_arrays(list, **kwds):
 
         sage: glist = []
         sage: for i in range(999):
-        ...    glist.append(graphs.RandomGNP(6,.45))
-        ...
-        sage: garray = graphs_list.to_graphics_arrays(glist)
-
-    Display the first graphics array in the list.
-
-    ::
-
-        sage: garray[0].show()
-
-    Display the last graphics array in the list.
-
-    ::
-
-        sage: garray[len(garray)-1].show()
+        ....:     glist.append(graphs.RandomGNP(6,.45))
+        sage: garray = graphs_list.to_graphics_array(glist)
+        sage: garray.nrows(), garray.ncols()
+        (250, 4)
 
     See the .plot() or .show() documentation for an individual graph
-    for options, all of which are available from to_graphics_arrays
-
-    ::
+    for options, all of which are available from
+    :func:`to_graphics_array`::
 
         sage: glist = []
         sage: for _ in range(10):
         ...       glist.append(graphs.RandomLobster(41, .3, .4))
-        sage: w = graphs_list.to_graphics_arrays(glist, layout='spring', vertex_size=20)
-        sage: len(w)
-        1
-        sage: w[0]
+        sage: graphs_list.to_graphics_array(glist, layout='spring', vertex_size=20)
         Graphics Array of size 3 x 4
     """
-    from sage.plot.plot import graphics_array
     from sage.graphs import graph
     plist = []
-    g_arrays = []
-    for i in range (len(list)):
-        if ( isinstance( list[i], graph.GenericGraph ) ):
-            pos = list[i].get_pos()
-            if ( pos is None ):
+    for i in range(len(graph_list)):
+        if isinstance(graph_list[i], graph.GenericGraph):
+            pos = graph_list[i].get_pos()
+            if pos is None:
                 if 'layout' not in kwds:
                     kwds['layout'] = 'circular'
                 if 'vertex_size' not in kwds:
@@ -306,39 +286,16 @@ def to_graphics_arrays(list, **kwds):
                 if 'vertex_labels' not in kwds:
                     kwds['vertex_labels'] = False
                 kwds['graph_border'] = True
-                plist.append(list[i].plot(**kwds))
-            else: plist.append(list[i].plot(pos=pos, vertex_size=50, vertex_labels=False, graph_border=True))
-        else:  raise TypeError('Param list must be a list of Sage (di)graphs.')
-
-    num_arrays = len(plist) // 20
-    if ( len(plist)%20 > 0 ): num_arrays += 1
-    rows = 5
-    cols = 4
-
-    for i in range (num_arrays-1):
-        glist = []
-        for j in range (rows*cols):
-            glist.append(plist[ i*rows*cols + j ])
-        ga = graphics_array(glist, rows, cols)
-        ga._set_figsize_([8,10])
-        g_arrays.append(ga)
-
-    last = len(plist)%20
-    if ( last == 0 and len(plist) != 0 ): last = 20
-    index = (num_arrays-1)*rows*cols
-    last_rows = last/cols
-    if ( last%cols > 0 ): last_rows += 1
-
-    glist = []
-    for i in range (last):
-        glist.append(plist[ i + index])
-    ga = graphics_array(glist, last_rows, cols)
-    ga._set_figsize_([8, 2*last_rows])
-    g_arrays.append(ga)
-
-    return g_arrays
-
-def show_graphs(list, **kwds):
+                plist.append(graph_list[i].plot(**kwds))
+            else:
+                plist.append(graph_list[i].plot(pos=pos, vertex_size=50, vertex_labels=False, graph_border=True))
+        else:
+            raise TypeError('param list must be a list of Sage (di)graphs.')
+    from sage.plot.plot import graphics_array
+    return graphics_array(plist, ncols=4)
+
+
+def show_graphs(graph_list, **kwds):
     """
     Shows a maximum of 20 graphs from list in a sage graphics array. If
     more than 20 graphs are given in the list argument, then it will
@@ -395,20 +352,18 @@ def show_graphs(list, **kwds):
         sage: graphs_list.show_graphs(g)
 
     See the .plot() or .show() documentation for an individual graph
-    for options, all of which are available from to_graphics_arrays
-
-    ::
+    for options, all of which are available from
+    :func:`to_graphics_array`::
 
         sage: glist = []
         sage: for _ in range(10):
-        ...       glist.append(graphs.RandomLobster(41, .3, .4))
+        ....:     glist.append(graphs.RandomLobster(41, .3, .4))
         sage: graphs_list.show_graphs(glist, layout='spring', vertex_size=20)
     """
-    ga_list = to_graphics_arrays(list, **kwds)
-
-    for i in range (len(ga_list)):
-        (ga_list[i]).show()
+    graph_list = list(graph_list)
+    for i in range(len(graph_list) // 20 + 1):
+        graph_slice =graph_list[20*i:20*(i+1)]
+        to_graphics_array(graph_slice, **kwds).show()
 
-    return
 
 
diff --git a/src/sage/misc/all.py b/src/sage/misc/all.py
index 315d66f..a459fb3 100644
--- a/src/sage/misc/all.py
+++ b/src/sage/misc/all.py
@@ -136,7 +136,6 @@ from functional import (additive_order,
                         round,
                         quotient,
                         quo,
-                        show,
                         isqrt,
                         squarefree_part,
                         symbolic_sum as sum,
@@ -144,7 +143,7 @@ from functional import (additive_order,
                         zero)
 
 
-from latex import LatexExpr, latex, view, pretty_print, pretty_print_default
+from latex import LatexExpr, latex, view, pretty_print_default
 
 from trace import trace
 
diff --git a/src/sage/misc/functional.py b/src/sage/misc/functional.py
index 80aa7f0..0fcbae2 100644
--- a/src/sage/misc/functional.py
+++ b/src/sage/misc/functional.py
@@ -1517,66 +1517,6 @@ def quotient(x, y, *args, **kwds):
 
 quo = quotient
 
-def show(x, *args, **kwds):
-    r"""
-    Show a graphics object x.
-
-    For additional ways to show objects in the notebook, look
-    at the methods on the html object.  For example,
-    html.table will produce an HTML table from a nested
-    list.
-
-
-    OPTIONAL INPUT:
-
-
-    -  ``filename`` - (default: None) string
-
-
-    SOME OF THESE MAY APPLY:
-
-    - ``dpi`` - dots per inch
-
-    - ``figsize``- [width, height] (same for square aspect)
-
-    - ``axes`` - (default: True)
-
-    - ``fontsize`` - positive integer
-
-    - ``frame`` - (default: False) draw a MATLAB-like frame around the
-      image
-
-    EXAMPLES::
-
-        sage: show(graphs(3))
-        sage: show(list(graphs(3)))
-    """
-    if not isinstance(x, (sage.interfaces.expect.Expect, sage.interfaces.expect.ExpectElement)):
-        try:
-            return x.show(*args, **kwds)
-        except AttributeError:
-            pass
-    if isinstance(x, sage.interfaces.mathematica.MathematicaElement):
-        return x.show(*args, **kwds)
-
-    import types
-    if isinstance(x, types.GeneratorType):
-        x = list(x)
-    if isinstance(x, list):
-        if len(x) > 0:
-            from sage.graphs.graph import GenericGraph
-            if isinstance(x[0], GenericGraph):
-                import sage.graphs.graph_list as graphs_list
-                graphs_list.show_graphs(x)
-                return
-    _do_show(x)
-
-def _do_show(x):
-    if sage.doctest.DOCTEST_MODE:
-        return sage.misc.latex.latex(x)
-    from latex import view
-    view(x, mode='display')
-
 
 def isqrt(x):
     """
diff --git a/src/sage/misc/latex.py b/src/sage/misc/latex.py
index ff29f07..9648672 100644
--- a/src/sage/misc/latex.py
+++ b/src/sage/misc/latex.py
@@ -2368,97 +2368,6 @@ def repr_lincomb(symbols, coeffs):
     s = s.replace("+ -","- ")
     return s
 
-def print_or_typeset(object):
-    r"""
-    'view' or 'print' the object depending on the situation.
-
-    In particular, if in notebook mode with the typeset box checked,
-    view the object. Otherwise, print the object.
-
-    INPUT:
-
-    - ``object`` -- Anything
-
-    EXAMPLES::
-
-        sage: sage.misc.latex.print_or_typeset(3)
-        3
-        sage: sage.misc.latex.EMBEDDED_MODE=True
-        sage: sage.misc.latex.print_or_typeset(3)
-        3
-        sage: TEMP = sys.displayhook
-        sage: sys.displayhook = sage.misc.latex.pretty_print
-        sage: sage.misc.latex.print_or_typeset(3)
-        <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}3</script></html>
-        sage: sage.misc.latex.EMBEDDED_MODE=False
-        sage: sys.displayhook = TEMP
-    """
-    import sys
-    if EMBEDDED_MODE and sys.displayhook == pretty_print:
-        view(object)
-    else:
-        print(object)
-
-def pretty_print (*args):
-    r"""
-    Try to pretty print the arguments in an intelligent way. For graphics
-    objects, this returns their default representation. For other
-    objects, in the notebook, this calls the :func:`view` command,
-    while from the command line, this produces an html string suitable
-    for processing by MathJax.
-
-    INPUT:
-
-    - ``objects`` -- The input can be any Sage object, a list or tuple of
-      Sage objects, or Sage objects passed in as separate arguments.
-
-    This function is used in the notebook when the "Typeset" button is
-    checked.
-
-    EXAMPLES::
-
-        sage: pretty_print(ZZ)  # indirect doctest
-        <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}\Bold{Z}</script></html>
-        sage: pretty_print("Integers = ", ZZ) # trac 11775
-        <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}\verb|Integers|\phantom{\verb!x!}\verb|=| \Bold{Z}</script></html>
-
-    To typeset LaTeX code as-is, use :class:`LatexExpr`::
-
-        sage: pretty_print(LatexExpr(r"\frac{x^2 + 1}{x - 2}"))
-        <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}\frac{x^2 + 1}{x - 2}</script></html>
-    """
-    # view s if it is not empty. Used twice.
-    def _show_s(s):
-        if s != []:
-            if EMBEDDED_MODE:
-                view(tuple(s), combine_all=True)
-            else:
-                print(MathJax().eval(tuple(s), mode='inline',
-                        combine_all=True))
-
-    import __builtin__
-    in_ipython = hasattr(__builtin__, 'get_ipython')
-    s = []
-    for object in args:
-        if object is None:
-            continue
-        if in_ipython:
-            get_ipython().displayhook.update_user_ns(object)
-        else:
-            __builtin__._ = object
-
-        from sage.plot.plot import Graphics
-        from sage.plot.plot3d.base import Graphics3d
-        if isinstance(object, (Graphics, Graphics3d)):
-            _show_s(s)
-            s = []
-            print(repr(object))
-
-        else:
-            s.append(object)
-
-    _show_s(s)
-    return
 
 def pretty_print_default(enable=True):
     r"""
diff --git a/src/sage/plot/plot.py b/src/sage/plot/plot.py
index ccf6ce7..85e144d 100644
--- a/src/sage/plot/plot.py
+++ b/src/sage/plot/plot.py
@@ -2364,6 +2364,7 @@ def reshape(v, n, m):
 
     # Now v should be a single list.
     # First, make it have the right length.
+    v = list(v)   # do not mutate the argument
     for i in xrange(n*m - len(v)):
         v.append(G)
 
@@ -2379,20 +2380,21 @@ def reshape(v, n, m):
 
     return L
 
-def graphics_array(array, n=None, m=None):
+def graphics_array(array, nrows=None, ncols=None):
     r"""
     ``graphics_array`` take a list of lists (or tuples) of
     graphics objects and plots them all on one canvas (single plot).
 
     INPUT:
 
-    -  ``array`` - a list of lists or tuples
-
-    -  ``n, m`` - (optional) integers - if n and m are
-       given then the input array is flattened and turned into an n x m
-       array, with blank graphics objects padded at the end, if
-       necessary.
+    - ``array`` -- a list of lists or tuples. The graphics objects to
+       combine into a graphics array.
 
+    - ``nrows, ncols`` -- (optional) integers. If both are given then
+       the input array is flattened and turned into an ``nrows`` x
+       ``ncols`` array, with blank graphics objects padded at the end,
+       if necessary. If only one is specified, the other is chosen
+       automatically.
 
     EXAMPLE: Make some plots of `\sin` functions::
 
@@ -2429,20 +2431,41 @@ def graphics_array(array, n=None, m=None):
         sage: L = [plot(sin(k*x),(x,-pi,pi)) for k in [1..3]]
         sage: G = graphics_array(L)
         sage: G.show(figsize=[5,3])  # smallish and compact
-
-    ::
-
         sage: G.show(figsize=[10,20])  # bigger and tall and thin; long time (2s on sage.math, 2012)
+        sage: G.show(figsize=8)  # figure as a whole is a square
 
-    ::
+    Specifying only the number of rows or the number of columns
+    computes the other dimension automatically::
 
-        sage: G.show(figsize=8)  # figure as a whole is a square
+        sage: ga = graphics_array([plot(sin)] * 10, nrows=3)
+        sage: ga.nrows(), ga.ncols()
+        (3, 4)
+        sage: ga = graphics_array([plot(sin)] * 10, ncols=3)
+        sage: ga.nrows(), ga.ncols()
+        (4, 3)
     """
-    if not n is None:
-        # Flatten then reshape input
-        n = int(n)
-        m = int(m)
-        array = reshape(array, n, m)
+    # TODO: refactor the whole array flattening and reshaping into a class
+    if nrows is None and ncols is None:
+        pass
+    elif nrows is not None and ncols is not None:
+        nrows = int(nrows)
+        ncols = int(ncols)
+        array = reshape(array, nrows, ncols)
+    else:
+        # nrows is None xor ncols is None
+        if len(array) > 0 and isinstance(array[0], Graphics):
+            length = len(array)
+        else:
+            length = sum(map(len, array))
+        if nrows is None:
+            ncols = int(ncols)
+            nrows = length // ncols + 1
+        elif ncols is None:
+            nrows = int(nrows)
+            ncols = length // nrows + 1
+        else:
+            assert False
+        array = reshape(array, nrows, ncols)
     return GraphicsArray(array)
 
 def var_and_list_of_values(v, plot_points):
diff --git a/src/sage/repl/all.py b/src/sage/repl/all.py
index 9367bfc..81f1ea9 100644
--- a/src/sage/repl/all.py
+++ b/src/sage/repl/all.py
@@ -7,3 +7,4 @@ lazy_import('sage.repl.attach', [
         'attach', 'detach', 'attached_files', 'load_attach_path',
         'reset_load_attach_path', 'load_attach_mode'])
 
+from sage.repl.rich_output.pretty_print import pretty_print, show
diff --git a/src/sage/repl/display/fancy_repr.py b/src/sage/repl/display/fancy_repr.py
index 1658cb2..5c1aa69 100644
--- a/src/sage/repl/display/fancy_repr.py
+++ b/src/sage/repl/display/fancy_repr.py
@@ -287,82 +287,6 @@ class PlainPythonRepr(ObjectReprABC):
         return True
 
 
-class AsciiArtRepr(ObjectReprABC):
-    """
-    Ascii Art representation
-
-    .. automethod:: __call__
-    """
-
-    def __call__(self, obj, p, cycle):
-        r"""
-        Return ascii art format.
-
-        INPUT:
-
-        - ``obj`` -- anything. Object to format.
-
-        - ``p`` -- PrettyPrinter instance.
-
-        - ``cycle`` -- boolean. Whether there is a cycle.
-
-        OUTPUT:
-
-        Boolean. Whether the representer is applicable to ``obj``. If
-        ``True``, the string representation is appended to ``p``.
-
-        EXAMPLES::
-
-            sage: from sage.repl.display.fancy_repr import AsciiArtRepr
-            sage: pp = AsciiArtRepr()
-            sage: pp.format_string(x/2)
-            'x\n-\n2'
-        """
-        from sage.misc.ascii_art import ascii_art
-        output = ascii_art(obj)
-        p.text(output)
-        return True
-
-
-class TypesetRepr(ObjectReprABC):
-    """
-    Typeset representation
-
-    .. automethod:: __call__
-    """
-
-    def __call__(self, obj, p, cycle):
-        r"""
-        Return typeset format.
-
-        INPUT:
-
-        - ``obj`` -- anything. Object to format.
-
-        - ``p`` -- PrettyPrinter instance.
-
-        - ``cycle`` -- boolean. Whether there is a cycle.
-
-        OUTPUT:
-
-        Boolean. Whether the representer is applicable to ``obj``. If
-        ``True``, the string representation is appended to ``p``.
-
-        EXAMPLES::
-
-            sage: from sage.repl.display.fancy_repr import TypesetRepr
-            sage: pp = TypesetRepr()
-            sage: pp.format_string(x/2)
-            <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}\frac{1}{2} \, x</script></html>
-            ''
-        """
-        # We should probably return that as string, but
-        # latex.pretty_print doesn't give us a useful interface
-        from sage.misc.latex import pretty_print
-        pretty_print(obj)
-        return True
-
-
 class TallListRepr(ObjectReprABC):
     """
     Special representation for lists with tall entries (e.g. matrices)
diff --git a/src/sage/repl/display/pretty_print.py b/src/sage/repl/display/pretty_print.py
index 3648b40..ff3aebc 100644
--- a/src/sage/repl/display/pretty_print.py
+++ b/src/sage/repl/display/pretty_print.py
@@ -156,29 +156,3 @@ class SagePrettyPrinter(PrettyPrinter):
             self.end_group()
             self.stack.pop()
 
-
-
-class AsciiArtPrettyPrinter(SagePrettyPrinter):
-    """
-    Pretty printer returning ASCII art
-    """
-
-    pretty_repr = (
-        AsciiArtRepr(),
-    ) + SagePrettyPrinter.pretty_repr
-
-
-class TypesetPrettyPrinter(SagePrettyPrinter):
-    """
-    Pretty printer returning typeset html
-
-    This is also used in the emacs-mode.
-    """
-
-    pretty_repr = (
-        TypesetRepr(),
-    ) + SagePrettyPrinter.pretty_repr
-
-
-
-
diff --git a/src/sage/repl/rich_output/__init__.py b/src/sage/repl/rich_output/__init__.py
index 5b028cd..ad29d0d 100644
--- a/src/sage/repl/rich_output/__init__.py
+++ b/src/sage/repl/rich_output/__init__.py
@@ -1,5 +1,6 @@
 # -*- encoding: utf-8 -*-
 
 from .display_manager import get_display_manager
+from .pretty_print import pretty_print
 
 
diff --git a/src/sage/repl/rich_output/backend_base.py b/src/sage/repl/rich_output/backend_base.py
index 7f4f127..d9e1fe4 100644
--- a/src/sage/repl/rich_output/backend_base.py
+++ b/src/sage/repl/rich_output/backend_base.py
@@ -250,7 +250,7 @@ class BackendBase(SageObject):
         printer.flush()
         return stream.getvalue()
 
-    def plain_text_formatter(self, obj):
+    def plain_text_formatter(self, obj, **kwds):
         r"""
         Hook to override how plain text is being formatted.
 
@@ -263,6 +263,14 @@ class BackendBase(SageObject):
 
         - ``obj`` -- anything.
 
+        - ``**kwds`` -- optional keyword arguments to control the
+          formatting. Supported are:
+
+            * ``concatenate`` -- boolean (default: ``False``). If
+              ``True``, the argument ``obj`` must be iterable and its
+              entries will be concatenated. There is a single
+              whitespace between entries.
+
         OUTPUT:
 
         Instance of
@@ -283,20 +291,36 @@ class BackendBase(SageObject):
             10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 
             19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 
             28,\n 29]'
-        """
+
+            sage: out = backend.plain_text_formatter(range(20), concatenate=True)
+            sage: out.text.get()
+            '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'
+       """
         from sage.repl.display.pretty_print import SagePrettyPrinter
-        plain_text = self._apply_pretty_printer(SagePrettyPrinter, obj)
+        if kwds.get('concatenate', False):
+            plain_text = ' '.join(
+                self._apply_pretty_printer(SagePrettyPrinter, o) for o in obj)
+        else:
+            plain_text = self._apply_pretty_printer(SagePrettyPrinter, obj)
         from sage.repl.rich_output.output_basic import OutputPlainText
         return OutputPlainText(plain_text)
 
-    def ascii_art_formatter(self, obj):
-        """
+    def ascii_art_formatter(self, obj, **kwds):
+        r"""
         Hook to override how ascii art is being formatted.
 
         INPUT:
 
         - ``obj`` -- anything.
 
+        - ``**kwds`` -- optional keyword arguments to control the
+          formatting. Supported are:
+
+            * ``concatenate`` -- boolean (default: ``False``). If
+              ``True``, the argument ``obj`` must be iterable and its
+              entries will be concatenated. There is a single
+              whitespace between entries.
+
         OUTPUT:
 
         Instance of
@@ -318,13 +342,25 @@ class BackendBase(SageObject):
             <BLANKLINE>
                                             ]
              22, 23, 24, 25, 26, 27, 28, 29 ]
-        """
-        from sage.repl.display.pretty_print import AsciiArtPrettyPrinter
-        ascii_art = self._apply_pretty_printer(AsciiArtPrettyPrinter, obj)
+
+            sage: backend.ascii_art_formatter([1,2,3], concatenate=False).ascii_art.get()
+            '[         ]\n[ 1, 2, 3 ]'
+            sage: backend.ascii_art_formatter([1,2,3], concatenate=True ).ascii_art.get()
+            '1 2 3'
+        """
+        from sage.misc.ascii_art import ascii_art, empty_ascii_art
+        if kwds.get('concatenate', False):
+            result = empty_ascii_art
+            for o in obj:
+                if result is not empty_ascii_art:
+                    result += ascii_art(' ')
+                result += ascii_art(o)
+        else:
+            result = ascii_art(obj)
         from sage.repl.rich_output.output_basic import OutputAsciiArt
-        return OutputAsciiArt(ascii_art)
+        return OutputAsciiArt(str(result))
 
-    def latex_formatter(self, obj):
+    def latex_formatter(self, obj, **kwds):
         r"""
         Hook to override how Latex is being formatted.
 
@@ -332,6 +368,14 @@ class BackendBase(SageObject):
 
         - ``obj`` -- anything.
 
+        - ``**kwds`` -- optional keyword arguments to control the
+          formatting. Supported are:
+
+            * ``concatenate`` -- boolean (default: ``False``). If
+              ``True``, the argument ``obj`` must be iterable and its
+              entries will be concatenated. There is a single
+              whitespace between entries.
+
         OUTPUT:
 
         Instance of
@@ -351,9 +395,28 @@ class BackendBase(SageObject):
             '\\newcommand{\\Bold}[1]{\\mathbf{#1}}\\frac{1}{2}'
             sage: out.mathjax()
             '<html><script type="math/tex; mode=display">\\newcommand{\\Bold}[1]{\\mathbf{#1}}\\frac{1}{2}</script></html>'
+
+            sage: out = backend.latex_formatter([1/2, x, 3/4, ZZ], concatenate=False)
+            sage: out.latex.get()
+            '\\newcommand{\\Bold}[1]{\\mathbf{#1}}\\left[\\frac{1}{2}, x, \\frac{3}{4}, \\Bold{Z}\\right]'
+            sage: out = backend.latex_formatter([1/2, x, 3/4, ZZ], concatenate=True)
+            sage: out.latex.get()
+            '\\newcommand{\\Bold}[1]{\\mathbf{#1}}\\frac{1}{2} x \\frac{3}{4} \\Bold{Z}'
+
+        TESTS::
+
+            sage: backend.latex_formatter([], concatenate=False).latex.get()
+            '\\newcommand{\\Bold}[1]{\\mathbf{#1}}\\left[\\right]'
+            sage: backend.latex_formatter([], concatenate=True).latex.get()
+            '\\newcommand{\\Bold}[1]{\\mathbf{#1}}'
         """
+        concatenate = kwds.get('concatenate', False)
         from sage.misc.latex import MathJax
-        mathjax = MathJax().eval(obj, mode='plain', combine_all=True)
+        if concatenate:
+            obj = tuple(obj)    # MathJax treats tuples special
+            mathjax = MathJax().eval(obj, mode='plain', combine_all=True)
+        else:
+            mathjax = MathJax().eval(obj, mode='plain', combine_all=False)
         from sage.repl.rich_output.output_basic import OutputLatex
         return OutputLatex(str(mathjax))
 
diff --git a/src/sage/repl/rich_output/backend_doctest.py b/src/sage/repl/rich_output/backend_doctest.py
index 3689a7f..c585ffa 100644
--- a/src/sage/repl/rich_output/backend_doctest.py
+++ b/src/sage/repl/rich_output/backend_doctest.py
@@ -146,8 +146,8 @@ class BackendDoctest(BackendBase):
             Graphics object consisting of 1 graphics primitive
         """
         self.validate(rich_output)
-        if any(isinstance(rich_output, cls) for cls in 
-               [OutputPlainText, OutputAsciiArt, OutputLatex]):
+        if any(isinstance(rich_output, cls)
+               for cls in [OutputPlainText, OutputAsciiArt, OutputLatex]):
             rich_output.print_to_stdout()
         else:
             plain_text.print_to_stdout()
@@ -179,8 +179,9 @@ class BackendDoctest(BackendBase):
             sage: dm.display_immediately(plt)   # indirect doctest
         """
         self.validate(rich_output)
-        if any(isinstance(rich_output, cls) for cls in 
-               [OutputPlainText, OutputAsciiArt, OutputLatex]):
+        if isinstance(rich_output, OutputLatex):
+            print(rich_output.mathjax(display=False))
+        elif any(isinstance(rich_output, cls) for cls in [OutputPlainText, OutputAsciiArt]):
             rich_output.print_to_stdout()
 
     def validate(self, rich_output):
diff --git a/src/sage/repl/rich_output/display_manager.py b/src/sage/repl/rich_output/display_manager.py
index 92f6868..b9b8a02 100644
--- a/src/sage/repl/rich_output/display_manager.py
+++ b/src/sage/repl/rich_output/display_manager.py
@@ -430,13 +430,13 @@ class DisplayManager(SageObject):
         output.__class__ = specialized_class
         return output
         
-    def _preferred_text_formatter(self, obj, plain_text=None):
+    def _preferred_text_formatter(self, obj, plain_text=None, **kwds):
         """
         Return the preferred textual representation
 
         INPUT:
 
-        - ``obj`` -- anything.
+        - ``obj`` -- anything. The objects to format.
 
         - ``plain_text`` -- ``None`` (default) or string. The plain
           text representation. If specified, this will be used for
@@ -458,19 +458,19 @@ class DisplayManager(SageObject):
             sage: dm = get_display_manager()
             sage: dm.preferences.text is None
             True
-            sage: dm._preferred_text_formatter(1/42)
+            sage: dm._preferred_text_formatter([1/42])
             OutputPlainText container
 
             sage: dm.preferences.text = 'plain'
-            sage: dm._preferred_text_formatter(1/42)
+            sage: dm._preferred_text_formatter([1/42])
             OutputPlainText container
 
             sage: dm.preferences.text = 'ascii_art'
-            sage: dm._preferred_text_formatter(1/42)
+            sage: dm._preferred_text_formatter([1/42])
             OutputAsciiArt container
 
             sage: dm.preferences.text = 'latex'
-            sage: dm._preferred_text_formatter(1/42)          
+            sage: dm._preferred_text_formatter([1/42])          
             \newcommand{\Bold}[1]{\mathbf{#1}}\verb|OutputLatex|\phantom{\verb!x!}\verb|container|
 
             sage: del dm.preferences.text   # reset to default
@@ -478,12 +478,12 @@ class DisplayManager(SageObject):
         want = self.preferences.text
         supported = self._backend.supported_output()
         if want == 'ascii_art' and OutputAsciiArt in supported:
-            out = self._backend.ascii_art_formatter(obj)
+            out = self._backend.ascii_art_formatter(obj, **kwds)
             if type(out) != OutputAsciiArt:
                 raise OutputTypeException('backend returned wrong output type, require AsciiArt')
             return out
         if want == 'latex' and OutputLatex in supported:
-            out = self._backend.latex_formatter(obj)
+            out = self._backend.latex_formatter(obj, **kwds)
             if type(out) != OutputLatex:
                 raise OutputTypeException('backend returned wrong output type, require Latex')
             return out
@@ -491,7 +491,7 @@ class DisplayManager(SageObject):
             if type(plain_text) != OutputPlainText:
                 raise OutputTypeException('backend returned wrong output type, require PlainText')
             return plain_text
-        out =  self._backend.plain_text_formatter(obj)
+        out =  self._backend.plain_text_formatter(obj, **kwds)
         if type(out) != OutputPlainText:
             raise OutputTypeException('backend returned wrong output type, require PlainText')
         return out
@@ -578,9 +578,10 @@ class DisplayManager(SageObject):
             with restricted_output(self, [OutputPlainText]):
                 plain_text = self._call_rich_repr(obj, rich_repr_kwds)
         if plain_text is None:
-            plain_text = self._backend.plain_text_formatter(obj)
+            plain_text = self._backend.plain_text_formatter(obj, **rich_repr_kwds)
         if rich_output is None:
-            rich_output = self._preferred_text_formatter(obj, plain_text=plain_text)
+            rich_output = self._preferred_text_formatter(
+                obj, plain_text=plain_text, **rich_repr_kwds)
         # promote output container types to backend-specific containers
         plain_text = self._promote_output(plain_text)
         rich_output = self._promote_output(rich_output)
diff --git a/src/sage/repl/rich_output/output_basic.py b/src/sage/repl/rich_output/output_basic.py
index f445071..dd01012 100644
--- a/src/sage/repl/rich_output/output_basic.py
+++ b/src/sage/repl/rich_output/output_basic.py
@@ -251,10 +251,15 @@ class OutputLatex(OutputBase):
         """
         self.latex = OutputBuffer(latex)
 
-    def mathjax(self):
+    def mathjax(self, display=True):
         r"""
         Return the LaTeX with a surrounding MathJax HTML code.
 
+        INPUT:
+
+        - ``display`` -- boolean. Whether to return display (as
+          opposed to inline) TeX.
+
         EXAMPLES::
 
             sage: from sage.repl.rich_output.output_catalog import OutputLatex
@@ -265,9 +270,14 @@ class OutputLatex(OutputBase):
             '1'
             sage: rich_output.mathjax()
             '<html><script type="math/tex; mode=display">1</script></html>'
+            sage: rich_output.mathjax(display=False)
+            '<html><script type="math/tex">1</script></html>'
         """
-        return r'<html><script type="math/tex; mode=display">{0}</script></html>'.format(
-            self.latex.get())
+        if display:
+            template  = r'<html><script type="math/tex; mode=display">{0}</script></html>'
+        else:
+            template  = r'<html><script type="math/tex">{0}</script></html>'
+        return template.format(self.latex.get())
 
     def display_equation(self):
         r"""
diff --git a/src/sage/repl/rich_output/pretty_print.py b/src/sage/repl/rich_output/pretty_print.py
new file mode 100644
index 0000000..6ec008c
--- /dev/null
+++ b/src/sage/repl/rich_output/pretty_print.py
@@ -0,0 +1,245 @@
+# -*- encoding: utf-8 -*-
+"""
+The ``pretty_print`` command.
+
+Works similar to the ``print`` function, except that it always tries
+to use a rich output for an object. Only if that is not available it
+is falling back on the plain text.
+
+EXAMPLES::
+
+    sage: pretty_print(1, 2, 3)
+    <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}1 2 3</script></html>
+
+Printing a graphics object just prints a string, whereas
+:func:`pretty_print` does not print anything and just shows the
+graphics instead::
+
+    sage: print(plot(sin))
+    Graphics object consisting of 1 graphics primitive
+    sage: pretty_print(plot(sin))
+"""
+
+
+#*****************************************************************************
+#       Copyright (C) 2015 Volker Braun <vbraun.name@gmail.com>
+#
+#  Distributed under the terms of the GNU General Public License (GPL)
+#  as published by the Free Software Foundation; either version 2 of
+#  the License, or (at your option) any later version.
+#                  http://www.gnu.org/licenses/
+#*****************************************************************************
+
+
+import types
+import collections
+
+from sage.structure.sage_object import SageObject
+from sage.repl.rich_output import get_display_manager
+
+
+class SequencePrettyPrinter(SageObject):
+
+    def __init__(self, *args, **kwds):
+        """
+        Pretty Printer for Muliple Arguments.
+
+        INPUT/OUTPUT:
+
+        Same as :func:`pretty_print`, except that the number of
+        arguments must be >= 2. Otherwise its not a sequence of things
+        to print.
+
+        EXAMPLES::
+
+            sage: pretty_print(1, 2, 3)   # indirect doctest
+            <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}1 2 3</script></html>
+            sage: from sage.repl.rich_output.pretty_print import SequencePrettyPrinter
+            sage: SequencePrettyPrinter(1, 2, 3).pretty_print()
+            1 2 3
+        """
+        self.args = args
+        assert len(self.args) >= 2
+        self.kwds = kwds
+
+    def is_homogeneous(self, common_type):
+        """
+        Return whether the pretty print items are homogeneous
+
+        INPUT:
+        
+        - ``common_type`` -- a type.
+
+        OUTPUT:
+
+        Boolean. Whether all items to be pretty printed are of said
+        type.
+
+        EXAMPLES::
+
+            sage: from sage.repl.rich_output.pretty_print import SequencePrettyPrinter
+            sage: seq = SequencePrettyPrinter(1, 2, 3)
+            sage: seq.is_homogeneous(Integer)
+            True
+            sage: seq.is_homogeneous(str)
+            False
+        """
+        return all(isinstance(arg, common_type) for arg in self.args)
+        
+    def _concatenate_graphs(self):
+        """
+        Plot multiple graphs into a single plot
+
+        OUTPUT:
+
+        A graphics object.
+
+        EXAMPLES::
+
+            sage: from sage.repl.rich_output.pretty_print import SequencePrettyPrinter
+            sage: plt = SequencePrettyPrinter(*list(graphs(3)))._concatenate_graphs()
+            sage: type(plt)
+            <class 'sage.plot.graphics.GraphicsArray'>
+            sage: plt
+            Graphics Array of size 2 x 4
+        """
+        import sage.graphs.graph_list as graphs_list
+        return graphs_list.to_graphics_array(self.args, **self.kwds)
+
+    def _concatenate_graphics(self):
+        """
+        Combine multiple graphics objects into one graphics array
+
+        OUTPUT:
+
+        A graphics array.
+
+        EXAMPLES::
+
+            sage: from sage.repl.rich_output.pretty_print import SequencePrettyPrinter
+            sage: ga = SequencePrettyPrinter(*[Graphics()]*5)._concatenate_graphics()
+            sage: type(ga)
+            <class 'sage.plot.graphics.GraphicsArray'>
+            sage: ga.nrows(), ga.ncols()
+            (2, 4)
+        """
+        from sage.plot.plot import graphics_array
+        return graphics_array(self.args, ncols=4, **self.kwds)
+    
+    def pretty_print(self):
+        """
+        Actually do the pretty print.
+
+        EXAMPLES::
+
+            sage: from sage.repl.rich_output.pretty_print import SequencePrettyPrinter
+            sage: SequencePrettyPrinter(1, 2, 3).pretty_print()
+            1 2 3
+
+        The keyword arguments are only used the first time graphics
+        output is generated::
+
+            sage: seq = SequencePrettyPrinter(Graph(), Graph(), edge_labels=True)
+            sage: seq.pretty_print()   # does not pass edge_labels to graphics object
+            sage: seq._concatenate_graphs().show(edge_labels=True)
+            Traceback (most recent call last):
+            ...
+            TypeError: matplotlib() got an unexpected keyword argument 'edge_labels'
+        """
+        from sage.plot.plot import Graphics
+        from sage.graphs.graph import GenericGraph
+        if self.is_homogeneous(GenericGraph):
+            args = self._concatenate_graphs()
+            kwds = dict()
+        elif self.is_homogeneous(Graphics):
+            args = self._concatenate_graphics()
+            kwds = dict()
+        else:
+            args = self.args
+            kwds = dict(self.kwds)
+            kwds['concatenate'] = True
+        get_display_manager().display_immediately(args, **kwds)
+
+
+def pretty_print(*args, **kwds):
+    r"""
+    Pretty print the arguments in an intelligent way.
+    
+    For a single positional argument, this function chooses the
+    highest-quality output supported by the user interface.
+    
+    For certain homogeneous multiple positional arguments a suitable
+    combined graphical output is generated. In particular, graphs and
+    plots are treated special.
+
+    Otherwise this function will concatenate the textual
+    representations. Latex output is preferred if none is specified
+    via
+    :meth:`~sage.repl.rich_output.display_manager.DisplayManager.preferences`.
+
+    INPUT:
+
+    - ``*args`` -- any number of positional arguments. The objects to
+      pretty print. If the single argument is an iterator/generator
+      then it is expanded.
+
+    - ``**kwds`` -- optional keyword arguments that are passed to the
+      rich representation. Examples include:
+
+        - ``dpi`` - dots per inch
+
+        - ``figsize``- [width, height] (same for square aspect)
+
+        - ``axes`` - (default: True)
+
+        - ``fontsize`` - positive integer
+
+        - ``frame`` - (default: False) draw a MATLAB-like frame around
+          the image
+
+    EXAMPLES::
+
+        sage: pretty_print(ZZ)
+        <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}\Bold{Z}</script></html>
+
+        sage: pretty_print("Integers = ", ZZ) # trac 11775
+        <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}\verb|Integers|\phantom{\verb!x!}\verb|=| \Bold{Z}</script></html>
+
+    To typeset LaTeX code as-is, use :class:`LatexExpr`::
+
+        sage: pretty_print(LatexExpr(r"\frac{x^2 + 1}{x - 2}"))
+        <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}\frac{x^2 + 1}{x - 2}</script></html>
+
+    Iterators and generators are unwrapped::
+
+        sage: iterator = iter(range(3));  iterator
+        <listiterator object at 0x...>
+        sage: pretty_print(iterator)
+        <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}0 1 2</script></html>
+
+    TESTS::
+
+        sage: plt = plot(sin)
+        sage: pretty_print(plt)             # graphics output
+        sage: pretty_print(ZZ, 123, plt)    # latex output
+        <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}\Bold{Z} 123 \verb|Graphics|\phantom{\verb!x!}\verb|object|\phantom{\verb!x!}\verb|consisting|\phantom{\verb!x!}\verb|of|\phantom{\verb!x!}\verb|1|\phantom{\verb!x!}\verb|graphics|\phantom{\verb!x!}\verb|primitive|</script></html>
+        sage: pretty_print(plt, plt)        # graphics output
+    """
+    if len(args) == 1 and isinstance(args[0], (types.GeneratorType, collections.Iterator)):
+        args = tuple(args[0])
+    dm = get_display_manager()
+    old_preferences_text = dm.preferences.text
+    try:
+        if dm.preferences.text is None:
+            dm.preferences.text = 'latex'
+        if len(args) == 0:
+            pass
+        elif len(args) == 1:
+            dm.display_immediately(*args, **kwds)
+        else:
+            SequencePrettyPrinter(*args, **kwds).pretty_print()
+    finally:
+        dm.preferences.text = old_preferences_text
+    
+    
+show = pretty_print
diff --git a/src/sage/symbolic/expression.pyx b/src/sage/symbolic/expression.pyx
index c21bd8a..c980e3d 100644
--- a/src/sage/symbolic/expression.pyx
+++ b/src/sage/symbolic/expression.pyx
@@ -10307,16 +10307,23 @@ cdef class Expression(CommutativeRingElement):
         return fast_callable(self, etb)
 
     def show(self):
-        """
-        Show this symbolic expression, i.e., typeset it nicely.
+        r"""
+        Pretty-Print this symbolic expression
+
+        This typeset it nicely and prints it immediately.
+
+        OUTPUT:
+
+        This method does not return anything. Like ``print``, output
+        is sent directly to the screen.
 
         EXAMPLES::
 
             sage: (x^2 + 1).show()
-            x^{2}  + 1
+            <html><script type="math/tex">\newcommand{\Bold}[1]{\mathbf{#1}}x^{2} + 1</script></html>
         """
-        from sage.misc.functional import _do_show
-        return _do_show(self)
+        from sage.repl.rich_output.pretty_print import pretty_print
+        pretty_print(self)
 
     def plot(self, *args, **kwds):
         """

