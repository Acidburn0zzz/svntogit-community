# Maintainer: Sven-Hendrik Haase <sh@lutzhaase.com>
# Contributor: Adria Arrufat (archdria) <adria.arrufat+AUR@protonmail.ch>
# Contributor: Thibault Lorrain (fredszaq) <fredszaq@gmail.com>

pkgbase=tensorflow
pkgname=(tensorflow tensorflow-opt tensorflow-cuda tensorflow-opt-cuda python-tensorflow python-tensorflow-opt python-tensorflow-cuda python-tensorflow-opt-cuda)
pkgver=1.12.0
_pkgver=1.12.0
pkgrel=6
pkgdesc="Library for computation using data flow graphs for scalable machine learning"
url="https://www.tensorflow.org/"
license=('APACHE')
arch=('x86_64')
depends=('c-ares')
makedepends=('bazel' 'python-numpy' 'cuda' 'nvidia-utils' 'nccl'
             'cudnn' 'python-pip' 'python-wheel' 'python-setuptools' 'python-h5py'
             'python-keras-applications' 'python-keras-preprocessing')
optdepends=('tensorboard: Tensorflow visualization toolkit')
source=("https://github.com/tensorflow/tensorflow/archive/v${_pkgver}.tar.gz"
        # Temp fix for https://github.com/tensorflow/tensorflow/issues/24124
        https://github.com/bazelbuild/bazel/releases/download/0.19.2/bazel-0.19.2-linux-x86_64
        # python37.patch
        protobuf-version-bump.patch
        protobuf-python37.patch
        protobuf-python37-apply.patch
        # try_import.patch
        explicitly_import_bazelrc.patch
        5b14577d42842871f1cb0eb8dfe77d32db1eb654.patch)
sha512sums=('b145a9118856aa00a829ab6af89bff4e1e131371c96d77b07532544112803c4574d97ef224b28a64437a2af8db4286786dc0b4123efe110b2aa734b443a7e238'
            'bd87b7c8c517ff2c4783b7b09c4609e9979d79985ff8ed1d564a8f2f49ad8588bfb72eb5d20b3ecc6c7e7e20b64e79e3913c4705b14d7a330ffbc2a0e09f10c4'
            'b9821d8eed1bb0125ddb8ebc46e8a4b8630789aac9b35aa4ecf24459476370f8b57fcf016952d7b7b61bee4177124abba343b7c9e956645b8895d2680f84e29a'
            'c5e24f584153752e7e22f472c8b0378dce8d0e07fa44598f571d27707d1ac5d0917ca1b6556c59259ef27c1405da6f83b9080ed803550ae6a6121ea3054d3111'
            'e13399375a8d61f695f67be20d86570b0e7e9b8682ea00eb689b3638e2b12ce50cb45fbe46f2ce1b1f065d043a29b8fac1b96eeec01317415ef2d8b51ac8332a'
            'b4567bef73007c388ae782cda0b9f2e06c7d87de03e97dfd99e258275cd60be8a1fa07359eae24316f9d059e00b6abc632d7c72f84318de1a6f4902f59d6fd8e'
            'b6807d1958f7a53ee5f86a873214ccbe4d648fe9845e9c5e0183feab67e244bcf02af8db0847283383fed627783975a65a39350306f3b21122e7cbd195b84e2e')

prepare() {
  patch -d tensorflow-${_pkgver} -Np1 -i ${srcdir}/5b14577d42842871f1cb0eb8dfe77d32db1eb654.patch
  # https://github.com/tensorflow/tensorflow/issues/20950
  patch -d tensorflow-${_pkgver} -Np1 -i ${srcdir}/protobuf-version-bump.patch
  patch -d tensorflow-${_pkgver} -Np1 -i ${srcdir}/protobuf-python37-apply.patch
  # https://github.com/protocolbuffers/protobuf/issues/4086
  cp ${srcdir}/protobuf-python37.patch tensorflow-${_pkgver}/third_party/
  # https://github.com/tensorflow/tensorflow/issues/23402
  patch -d "tensorflow-${_pkgver}" -Np1 -i "${srcdir}/explicitly_import_bazelrc.patch"

  cp -r tensorflow-${_pkgver} tensorflow-${_pkgver}-opt
  cp -r tensorflow-${_pkgver} tensorflow-${_pkgver}-cuda
  cp -r tensorflow-${_pkgver} tensorflow-${_pkgver}-opt-cuda
  # These environment variables influence the behavior of the configure call below.
  export PYTHON_BIN_PATH=/usr/bin/python
  export USE_DEFAULT_PYTHON_LIB_PATH=1
  export TF_NEED_JEMALLOC=1
  export TF_NEED_KAFKA=0
  export TF_NEED_OPENCL_SYCL=0
  export TF_NEED_AWS=0
  export TF_NEED_GCP=0
  export TF_NEED_HDFS=0
  export TF_NEED_S3=0
  export TF_ENABLE_XLA=1
  export TF_NEED_GDR=0
  export TF_NEED_VERBS=0
  export TF_NEED_OPENCL=0
  export TF_NEED_MPI=0
  export TF_NEED_TENSORRT=0
  export TF_NEED_NGRAPH=0
  export TF_NEED_IGNITE=0
  export TF_NEED_ROCM=0
  export TF_SET_ANDROID_WORKSPACE=0
  export TF_DOWNLOAD_CLANG=0
  export TF_NCCL_VERSION=2.3
  export NCCL_INSTALL_PATH=/usr

  chmod +x "${srcdir}"/bazel-0.19.2-linux-x86_64
}

build() {
  cd ${srcdir}/tensorflow-${_pkgver}
  export CC_OPT_FLAGS="-march=x86-64"
  export TF_NEED_CUDA=0
  ./configure
  "${srcdir}"/bazel-0.19.2-linux-x86_64 \
    build --config=opt \
      //tensorflow:libtensorflow.so \
      //tensorflow:libtensorflow_cc.so \
      //tensorflow:install_headers \
      //tensorflow/tools/pip_package:build_pip_package
  bazel-bin/tensorflow/tools/pip_package/build_pip_package ${srcdir}/tmp

  cd ${srcdir}/tensorflow-${_pkgver}-cuda
  export CC_OPT_FLAGS="-march=x86-64"
  export TF_NEED_CUDA=1
  export GCC_HOST_COMPILER_PATH=/usr/bin/gcc-7
  export TF_CUDA_CLANG=0
  # export CLANG_CUDA_COMPILER_PATH=/usr/bin/clang
  export CUDA_TOOLKIT_PATH=/opt/cuda
  export TF_CUDA_VERSION=$($CUDA_TOOLKIT_PATH/bin/nvcc --version | sed -n 's/^.*release \(.*\),.*/\1/p')
  export CUDNN_INSTALL_PATH=/usr/lib
  export TF_CUDNN_VERSION=$(sed -n 's/^#define CUDNN_MAJOR\s*\(.*\).*/\1/p' /usr/include/cudnn.h)
  export TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.2,3.5,3.7,5.0,5.2,5.3,6.0,6.1,6.2,7.0,7.2,7.5
  ./configure
  "${srcdir}"/bazel-0.19.2-linux-x86_64 \
    build --config=opt --config=opt \
      //tensorflow:libtensorflow.so \
      //tensorflow:libtensorflow_cc.so \
      //tensorflow:install_headers \
      //tensorflow/tools/pip_package:build_pip_package
  bazel-bin/tensorflow/tools/pip_package/build_pip_package ${srcdir}/tmpcuda

  cd ${srcdir}/tensorflow-${_pkgver}-opt
  export CC_OPT_FLAGS="-march=haswell"
  export TF_NEED_CUDA=0
  ./configure
  "${srcdir}"/bazel-0.19.2-linux-x86_64 \
    build --config=opt \
      //tensorflow:libtensorflow.so \
      //tensorflow:libtensorflow_cc.so \
      //tensorflow:install_headers \
      //tensorflow/tools/pip_package:build_pip_package
  bazel-bin/tensorflow/tools/pip_package/build_pip_package ${srcdir}/tmpopt

  cd ${srcdir}/tensorflow-${_pkgver}-opt-cuda
  export CC_OPT_FLAGS="-march=haswell"
  export TF_NEED_CUDA=1
  export GCC_HOST_COMPILER_PATH=/usr/bin/gcc-7
  export TF_CUDA_CLANG=0
  # export CLANG_CUDA_COMPILER_PATH=/usr/bin/clang
  export CUDA_TOOLKIT_PATH=/opt/cuda
  export TF_CUDA_VERSION=$($CUDA_TOOLKIT_PATH/bin/nvcc --version | sed -n 's/^.*release \(.*\),.*/\1/p')
  export CUDNN_INSTALL_PATH=/usr/lib
  export TF_CUDNN_VERSION=$(sed -n 's/^#define CUDNN_MAJOR\s*\(.*\).*/\1/p' /usr/include/cudnn.h)
  export TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.2,3.5,3.7,5.0,5.2,5.3,6.0,6.1,6.2,7.0,7.2,7.5
  ./configure
  "${srcdir}"/bazel-0.19.2-linux-x86_64 \
    build --config=opt --config=opt \
      //tensorflow:libtensorflow.so \
      //tensorflow:libtensorflow_cc.so \
      //tensorflow:install_headers \
      //tensorflow/tools/pip_package:build_pip_package
  bazel-bin/tensorflow/tools/pip_package/build_pip_package ${srcdir}/tmpcudaopt
}

package_tensorflow() {
  cd ${srcdir}/tensorflow-${_pkgver}

  tensorflow/c/generate-pc.sh --prefix=/usr --version=${pkgver}
  install -Dm644 tensorflow.pc ${pkgdir}/usr/lib/pkgconfig/tensorflow.pc
  install -Dm755 bazel-bin/tensorflow/libtensorflow.so ${pkgdir}/usr/lib/libtensorflow.so
  install -Dm755 bazel-bin/tensorflow/libtensorflow_cc.so ${pkgdir}/usr/lib/libtensorflow_cc.so
  install -Dm755 bazel-bin/tensorflow/libtensorflow_framework.so ${pkgdir}/usr/lib/libtensorflow_framework.so
  install -Dm644 tensorflow/c/c_api.h ${pkgdir}/usr/include/tensorflow/c/c_api.h
  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE

  mkdir -p ${pkgdir}/usr/include/tensorflow/
  cp -r bazel-genfiles/tensorflow/include/tensorflow ${pkgdir}/usr/include/
}

package_tensorflow-opt() {
  conflicts=(tensorflow)
  provides=(tensorflow)
  pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CPU optimizations)"

  cd ${srcdir}/tensorflow-${_pkgver}-opt

  tensorflow/c/generate-pc.sh --prefix=/usr --version=${pkgver}
  install -Dm644 tensorflow.pc ${pkgdir}/usr/lib/pkgconfig/tensorflow.pc
  install -Dm755 bazel-bin/tensorflow/libtensorflow.so ${pkgdir}/usr/lib/libtensorflow.so
  install -Dm755 bazel-bin/tensorflow/libtensorflow_cc.so ${pkgdir}/usr/lib/libtensorflow_cc.so
  install -Dm755 bazel-bin/tensorflow/libtensorflow_framework.so ${pkgdir}/usr/lib/libtensorflow_framework.so
  install -Dm644 tensorflow/c/c_api.h ${pkgdir}/usr/include/tensorflow/c/c_api.h
  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE

  mkdir -p ${pkgdir}/usr/include/tensorflow/
  cp -r bazel-genfiles/tensorflow/include/tensorflow ${pkgdir}/usr/include/
}

package_tensorflow-cuda() {
  depends+=(cuda cudnn nccl)
  conflicts=(tensorflow)
  provides=(tensorflow)
  pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CUDA)"

  cd ${srcdir}/tensorflow-${_pkgver}-cuda

  tensorflow/c/generate-pc.sh --prefix=/usr --version=${pkgver}
  install -Dm644 tensorflow.pc ${pkgdir}/usr/lib/pkgconfig/tensorflow.pc
  install -Dm755 bazel-bin/tensorflow/libtensorflow.so ${pkgdir}/usr/lib/libtensorflow.so
  install -Dm755 bazel-bin/tensorflow/libtensorflow_cc.so ${pkgdir}/usr/lib/libtensorflow_cc.so
  install -Dm755 bazel-bin/tensorflow/libtensorflow_framework.so ${pkgdir}/usr/lib/libtensorflow_framework.so
  install -Dm644 tensorflow/c/c_api.h ${pkgdir}/usr/include/tensorflow/c/c_api.h
  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE

  mkdir -p ${pkgdir}/usr/include/tensorflow/
  cp -r bazel-genfiles/tensorflow/include/tensorflow ${pkgdir}/usr/include/
}

package_tensorflow-opt-cuda() {
  depends+=(cuda cudnn nccl)
  conflicts=(tensorflow)
  provides=(tensorflow tensorflow-cuda)
  pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CUDA and CPU optimizations)"

  cd ${srcdir}/tensorflow-${_pkgver}-opt-cuda

  tensorflow/c/generate-pc.sh --prefix=/usr --version=${pkgver}
  install -Dm644 tensorflow.pc ${pkgdir}/usr/lib/pkgconfig/tensorflow.pc
  install -Dm755 bazel-bin/tensorflow/libtensorflow.so ${pkgdir}/usr/lib/libtensorflow.so
  install -Dm755 bazel-bin/tensorflow/libtensorflow_cc.so ${pkgdir}/usr/lib/libtensorflow_cc.so
  install -Dm755 bazel-bin/tensorflow/libtensorflow_framework.so ${pkgdir}/usr/lib/libtensorflow_framework.so
  install -Dm644 tensorflow/c/c_api.h ${pkgdir}/usr/include/tensorflow/c/c_api.h
  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE

  mkdir -p ${pkgdir}/usr/include/tensorflow/
  cp -r bazel-genfiles/tensorflow/include/tensorflow ${pkgdir}/usr/include/
}

package_python-tensorflow() {
  depends+=(python-termcolor python-astor python-gast python-numpy python-protobuf absl-py python-h5py python-keras-applications python-keras-preprocessing)

  cd ${srcdir}/tensorflow-${_pkgver}

  WHEEL_PACKAGE=$(find ${srcdir}/tmp -name "tensor*.whl")
  pip install --ignore-installed --upgrade --root $pkgdir/ $WHEEL_PACKAGE --no-dependencies

  # tensorboard has been separated from upstream but they still install it with
  # tensorflow. I don't know what kind of sense that makes but we have to clean
  # it out from this pacakge.
  rm -rf ${pkgdir}/usr/bin/tensorboard

  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE
}

package_python-tensorflow-opt() {
  depends+=(python-termcolor python-astor python-gast python-numpy python-protobuf absl-py python-h5py python-keras-applications python-keras-preprocessing)
  conflicts=(python-tensorflow)
  provides=(python-tensorflow)
  pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CPU optimizations)"

  cd ${srcdir}/tensorflow-${_pkgver}-opt

  WHEEL_PACKAGE=$(find ${srcdir}/tmpopt -name "tensor*.whl")
  pip install --ignore-installed --upgrade --root $pkgdir/ $WHEEL_PACKAGE --no-dependencies

  # tensorboard has been separated from upstream but they still install it with
  # tensorflow. I don't know what kind of sense that makes but we have to clean
  # it out from this pacakge.
  rm -rf ${pkgdir}/usr/bin/tensorboard

  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE
}

package_python-tensorflow-cuda() {
  depends+=(python-termcolor python-astor python-gast python-numpy cuda cudnn python-pycuda python-protobuf absl-py nccl python-h5py python-keras-applications python-keras-preprocessing)
  conflicts=(python-tensorflow)
  provides=(python-tensorflow)
  pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CUDA)"

  cd ${srcdir}/tensorflow-${_pkgver}-cuda

  WHEEL_PACKAGE=$(find ${srcdir}/tmpcuda -name "tensor*.whl")
  pip install --ignore-installed --upgrade --root $pkgdir/ $WHEEL_PACKAGE --no-dependencies

  # tensorboard has been separated from upstream but they still install it with
  # tensorflow. I don't know what kind of sense that makes but we have to clean
  # it out from this pacakge.
  rm -rf ${pkgdir}/usr/bin/tensorboard

  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE
}

package_python-tensorflow-opt-cuda() {
  depends+=(python-termcolor python-astor python-gast python-numpy cuda cudnn python-pycuda python-protobuf absl-py nccl python-h5py python-keras-applications python-keras-preprocessing)
  conflicts=(python-tensorflow)
  provides=(python-tensorflow python-tensorflow-cuda)
  pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CUDA and CPU optimizations)"

  cd ${srcdir}/tensorflow-${_pkgver}-opt-cuda

  WHEEL_PACKAGE=$(find ${srcdir}/tmpcudaopt -name "tensor*.whl")
  pip install --ignore-installed --upgrade --root $pkgdir/ $WHEEL_PACKAGE --no-dependencies

  # tensorboard has been separated from upstream but they still install it with
  # tensorflow. I don't know what kind of sense that makes but we have to clean
  # it out from this pacakge.
  rm -rf ${pkgdir}/usr/bin/tensorboard

  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE
}

# vim:set ts=2 sw=2 et:
