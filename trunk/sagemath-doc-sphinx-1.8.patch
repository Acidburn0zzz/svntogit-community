diff --git a/src/sage_setup/docbuild/__init__.py b/src/sage_setup/docbuild/__init__.py
index ff67979..83b49e1 100644
--- a/src/sage_setup/docbuild/__init__.py
+++ b/src/sage_setup/docbuild/__init__.py
@@ -332,6 +331,18 @@ class AllBuilder(object):
         for document in refs:
             getattr(get_builder(document), 'inventory')(*args, **kwds)
 
+        # In the inventory build, the directory
+        # SAGE_DOC/inventory/en/reference/_static might be created,
+        # but it is unnecessary in the inventory build -- this
+        # directory should contain javascript and style files
+        # specifically for the html build -- and it can confuse
+        # intersphinx and the html builder when they look for
+        # inventory files. So delete this directory.
+        staticdir = os.path.join(SAGE_DOC, 'inventory', 'en', 'reference', '_static')
+        if os.path.isdir(staticdir):
+            logger.info("Deleting _static directory in the inventory build")
+            shutil.rmtree(staticdir)
+
         logger.warning("Building reference manual, second pass.\n")
         for document in refs:
             getattr(get_builder(document), name)(*args, **kwds)
diff --git a/src/sage_setup/docbuild/ext/sage_autodoc.py b/src/sage_setup/docbuild/ext/sage_autodoc.py
index 2c399bad51..96abec3382 100644
--- a/src/sage_setup/docbuild/ext/sage_autodoc.py
+++ b/src/sage_setup/docbuild/ext/sage_autodoc.py
@@ -39,8 +39,9 @@ from docutils.statemachine import ViewList
 import sphinx
 from sphinx.util import rpartition, force_decode
 from sphinx.locale import _
-from sphinx.pycode import ModuleAnalyzer, PycodeError
-from sphinx.application import ExtensionError
+from sphinx.pycode import ModuleAnalyzer
+from sphinx.errors import ExtensionError, PycodeError
+from sphinx.util.logging import getLogger
 from sphinx.util.nodes import nested_parse_with_titles
 from docutils.parsers.rst import Directive
 from sphinx.util.inspect import getargspec, isdescriptor, safe_getmembers, \
diff --git a/src/sage_setup/docbuild/ext/multidocs.py b/src/sage_setup/docbuild/ext/multidocs.py
index dc2e065e7e..ddd28c1a46 100644
--- a/src/sage_setup/docbuild/ext/multidocs.py
+++ b/src/sage_setup/docbuild/ext/multidocs.py
@@ -302,7 +302,6 @@ def init_subdoc(app):
                     os.unlink(static_dir)
             os.symlink(master_static_dir, static_dir)

-        app.builder.copy_static_files = link_static_files

     if app.config.multidoc_first_pass == 1:
         app.config.intersphinx_mapping = {}
diff --git a/src/sage_setup/docbuild/__init__.py b/src/sage_setup/docbuild/__init__.py
index 0b24b1a..ff67979 100644
--- a/src/sage_setup/docbuild/__init__.py
+++ b/src/sage_setup/docbuild/__init__.py
@@ -47,7 +47,6 @@ import logging, warnings
 
 logger = logging.getLogger(__name__)
 
-import sphinx.cmdline
 import sphinx.util.console
 import sphinx.ext.intersphinx
 
diff --git a/src/sage_setup/docbuild/ext/multidocs.py b/src/sage_setup/docbuild/ext/multidocs.py
index 62d3946..262cb3c 100644
--- a/src/sage_setup/docbuild/ext/multidocs.py
+++ b/src/sage_setup/docbuild/ext/multidocs.py
@@ -32,6 +32,7 @@ from sphinx.util.console import bold
 from sage.env import SAGE_DOC
 from sage.misc.misc import sage_makedirs
 
+logger = sphinx.util.logging.getLogger(__name__)
 
 CITE_FILENAME = 'citations.pickle'
 
@@ -48,13 +49,13 @@ def merge_environment(app, env):
 
     - domaindata['py']['modules'] # list of python modules
     """
-    app.info(bold('Merging environment/index files...'))
+    logger.info(bold('Merging environment/index files...'))
     for curdoc in app.env.config.multidocs_subdoc_list:
-        app.info("    %s:"%curdoc, nonl=1)
+        logger.info("    %s:"%curdoc, nonl=1)
         docenv = get_env(app, curdoc)
         if docenv is not None:
             fixpath = lambda path: os.path.join(curdoc, path)
-            app.info(" %s todos, %s index, %s citations"%(
+            logger.info(" %s todos, %s index, %s citations"%(
                     len(docenv.todo_all_todos),
                     len(docenv.indexentries),
                     len(docenv.domaindata["std"]["citations"])
@@ -99,8 +100,8 @@ def merge_environment(app, env):
                 six.iteritems(docenv.domaindata['py']['modules'])):
                 newmodules[ind] = (fixpath(modpath),v1,v2,v3)
             env.domaindata['py']['modules'].update(newmodules)
-            app.info(", %s modules"%(len(newmodules)))
-    app.info('... done (%s todos, %s index, %s citations, %s modules)'%(
+            logger.info(", %s modules"%(len(newmodules)))
+    logger.info('... done (%s todos, %s index, %s citations, %s modules)'%(
             len(env.todo_all_todos),
             len(env.indexentries),
             len(env.domaindata["std"]["citations"]),
@@ -118,8 +119,8 @@ def get_env(app, curdoc):
     try:
         f = open(filename, 'rb')
     except IOError:
-        app.info("")
-        app.warn("Unable to fetch %s " % filename)
+        logger.info("")
+        logger.warn("Unable to fetch %s " % filename)
         return None
     docenv = cPickle.load(f)
     f.close()
@@ -130,16 +131,16 @@ def merge_js_index(app):
     """
     Merge the JS indexes of the sub-docs into the main JS index
     """
-    app.info('')
-    app.info(bold('Merging js index files...'))
+    logger.info('')
+    logger.info(bold('Merging js index files...'))
     mapping = app.builder.indexer._mapping
     for curdoc in app.env.config.multidocs_subdoc_list:
-        app.info("    %s:"%curdoc, nonl=1)
+        logger.info("    %s:"%curdoc, nonl=1)
         fixpath = lambda path: os.path.join(curdoc, path)
         index = get_js_index(app, curdoc)
         if index is not None:
             # merge the mappings
-            app.info(" %s js index entries"%(len(index._mapping)))
+            logger.info(" %s js index entries"%(len(index._mapping)))
             for (ref, locs) in six.iteritems(index._mapping):
                 newmapping = set(map(fixpath, locs))
                 if ref in mapping:
@@ -159,8 +160,8 @@ def merge_js_index(app):
             dest = os.path.join(app.outdir, "_sources", curdoc)
             if not os.path.exists(dest):
                 os.symlink(os.path.join("..", curdoc, "_sources"), dest)
-    app.info('... done (%s js index entries)'%(len(mapping)))
-    app.info(bold('Writing js search indexes...'), nonl=1)
+    logger.info('... done (%s js index entries)'%(len(mapping)))
+    logger.info(bold('Writing js search indexes...'), nonl=1)
     return [] # no extra page to setup
 
 
@@ -181,8 +182,8 @@ def get_js_index(app, curdoc):
     try:
         f = open(indexfile, 'rb')
     except IOError:
-        app.info("")
-        app.warn("Unable to fetch %s " % indexfile)
+        logger.info("")
+        logger.warn("Unable to fetch %s " % indexfile)
         return None
     indexer.load(f, sphinx.search.js_index)
     f.close()
@@ -238,7 +239,7 @@ def write_citations(app, citations):
     outdir = citation_dir(app)
     with atomic_write(os.path.join(outdir, CITE_FILENAME), binary=True) as f:
         cPickle.dump(citations, f)
-    app.info("Saved pickle file: %s" % CITE_FILENAME)
+    logger.info("Saved pickle file: %s" % CITE_FILENAME)
 
 
 def fetch_citation(app, env):
@@ -246,13 +247,13 @@ def fetch_citation(app, env):
     Fetch the global citation index from the refman to allow for cross
     references.
     """
-    app.builder.info(bold('loading cross citations... '), nonl=1)
+    logger.info(bold('loading cross citations... '), nonl=1)
     filename = os.path.join(citation_dir(app), '..', CITE_FILENAME)
     if not os.path.isfile(filename):
         return
     with open(filename, 'rb') as f:
         cache = cPickle.load(f)
-    app.builder.info("done (%s citations)."%len(cache))
+    logger.info("done (%s citations)."%len(cache))
     cite = env.domaindata["std"]["citations"]
     for ind, (path, tag, lineno) in six.iteritems(cache):
         if ind not in cite: # don't override local citation
@@ -265,18 +266,17 @@ def init_subdoc(app):
     doc itself.
     """
     if app.config.multidocs_is_master:
-        app.info(bold("Compiling the master document"))
+        logger.info(bold("Compiling the master document"))
         app.connect('env-updated', merge_environment)
         app.connect('html-collect-pages', merge_js_index)
         if app.config.multidocs_subdoc_list:
             # Master file with indexes computed by merging indexes:
             # Monkey patch index fetching to silence warning about broken index
             def load_indexer(docnames):
-                app.builder.info(bold('skipping loading of indexes... '), nonl=1)
+                logger.info(bold('skipping loading of indexes... '), nonl=1)
             app.builder.load_indexer = load_indexer
-
     else:
-        app.info(bold("Compiling a sub-document"))
+        logger.info(bold("Compiling a sub-document"))
         app.connect('html-page-context', fix_path_html)
         if not app.config.multidoc_first_pass:
             app.connect('env-updated', fetch_citation)
@@ -292,7 +292,7 @@ def init_subdoc(app):
                     def copy_static_files(self):
                     [...]
             """
-            app.builder.info(bold('linking _static directory.'))
+            logger.info(bold('linking _static directory.'))
             static_dir = os.path.join(app.builder.outdir, '_static')
             master_static_dir = os.path.join('..', '_static')
             if os.path.lexists(static_dir):
diff --git a/src/sage_setup/docbuild/ext/sage_autodoc.py b/src/sage_setup/docbuild/ext/sage_autodoc.py
index ecad739..587f592 100644
--- a/src/sage_setup/docbuild/ext/sage_autodoc.py
+++ b/src/sage_setup/docbuild/ext/sage_autodoc.py
@@ -49,6 +49,8 @@ from sphinx.util.inspect import getargspec, isdescriptor, safe_getmembers, \
     isenumclass, isenumattribute
 from sphinx.util.docstrings import prepare_docstring
 
+logger = getLogger(__name__)
+
 try:
     if sys.version_info >= (3,):
         import typing
@@ -554,7 +556,7 @@ class Documenter(object):
 
         Returns True if successful, False if an error occurred.
         """
-        dbg = self.env.app.debug
+        dbg = logger.debug
         if self.objpath:
             dbg('[autodoc] from %s import %s',
                 self.modname, '.'.join(self.objpath))
@@ -988,7 +990,7 @@ class Documenter(object):
             # be cached anyway)
             self.analyzer.find_attr_docs()
         except PycodeError as err:
-            self.env.app.debug('[autodoc] module analyzer failed: %s', err)
+            logger.debug('[autodoc] module analyzer failed: %s', err)
             # A few things could have happened here:
             # * there is no source file -- e.g. for builtin and C modules
             # * the source file contains syntax that Sphinx can not parse,
@@ -1732,8 +1734,8 @@ class AutoDirective(Directive):
             source, lineno = self.reporter.get_source_and_line(self.lineno)
         except AttributeError:
             source = lineno = None
-        self.env.app.debug('[autodoc] %s:%s: input:\n%s',
-                           source, lineno, self.block_text)
+        logger.debug('[autodoc] %s:%s: input:\n%s',
+                     source, lineno, self.block_text)
 
         # find out what documenter to call
         objtype = self.name[4:]
@@ -1762,7 +1764,7 @@ class AutoDirective(Directive):
         if not self.result:
             return self.warnings
 
-        self.env.app.debug2('[autodoc] output:\n%s', '\n'.join(self.result))
+        logger.debug('[autodoc] output:\n%s', '\n'.join(self.result))
 
         # record all filenames as dependencies -- this will at least
         # partially make automatic invalidation possible
diff --git a/src/sage_setup/docbuild/sphinxbuild.py b/src/sage_setup/docbuild/sphinxbuild.py
index 8f7034f..87c29b7 100644
--- a/src/sage_setup/docbuild/sphinxbuild.py
+++ b/src/sage_setup/docbuild/sphinxbuild.py
@@ -22,6 +22,7 @@ We redirect stdout and stderr to our own logger, and remove some unwanted chatte
 # ****************************************************************************
 
 import os, sys, re, sphinx
+import sphinx.cmd.build
 
 # override the fancy multi-line formatting
 def term_width_line(text):
@@ -310,12 +311,12 @@ def runsphinx():
     try:
         sys.stdout = SageSphinxLogger(sys.stdout, os.path.basename(output_dir))
         sys.stderr = SageSphinxLogger(sys.stderr, os.path.basename(output_dir))
-        # Note that this call as of eraly 2018 leaks memory. So make sure that
+        # Note that this call as of early 2018 leaks memory. So make sure that
         # you don't call runsphinx() several times in a row. (i.e., you want to
         # fork() somewhere before this call.)
         # We don't use subprocess here, as we don't want to re-initialize Sage
         # for every docbuild as this takes a while.
-        sphinx.cmdline.main(sys.argv[1:])
+        sphinx.cmd.build.main(sys.argv[1:])
         sys.stderr.raise_errors()
         sys.stdout.raise_errors()
     finally:
