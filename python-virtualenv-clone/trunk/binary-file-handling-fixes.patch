diff --git a/clonevirtualenv.py b/clonevirtualenv.py
index 1fd9ed9..f22700a 100644
--- a/clonevirtualenv.py
+++ b/clonevirtualenv.py
@@ -2,6 +2,7 @@ from __future__ import with_statement
 import logging
 import optparse
 import os
+import re
 import shutil
 import subprocess
 import sys
@@ -82,15 +83,19 @@ def clone_virtualenv(src_dir, dst_dir):
 def fixup_scripts(old_dir, new_dir, version, rewrite_env_python=False):
     bin_dir = os.path.join(new_dir, 'bin')
     root, dirs, files = next(os.walk(bin_dir))
+    pybinre = re.compile('pythonw?([0-9]+(\.[0-9]+(\.[0-9]+)?)?)?$')
     for file_ in files:
         filename = os.path.join(root, file_)
-        if 'activate' in file_:
-            fixup_activate(os.path.join(root, file_), old_dir, new_dir)
+        if file_ in ['python', 'python%s' % version, 'activate_this.py']:
+            continue
+        elif file_.startswith('python') and pybinre.match(file_):
+            # ignore other possible python binaries
+            continue
         elif file_.endswith('.pyc'):
             # ignore compiled files
             continue
-        elif file_ in ['python', 'python%s' % version, 'activate_this.py']:
-            continue
+        elif file_ == 'activate' or file_.startswith('activate.'):
+            fixup_activate(os.path.join(root, file_), old_dir, new_dir)
         elif os.path.islink(filename):
             fixup_link(filename, old_dir, new_dir)
         elif os.path.isfile(filename):
@@ -106,6 +111,10 @@ def fixup_script_(root, file_, old_dir, new_dir, version,
 
     filename = os.path.join(root, file_)
     with open(filename, 'rb') as f:
+        if f.read(2) != '#!':
+            # no shebang
+            return
+        f.seek(0)
         lines = f.readlines()
 
     if not lines:
@@ -122,7 +131,11 @@ def fixup_script_(root, file_, old_dir, new_dir, version,
             f.write(shebang)
             f.writelines(lines[1:])
 
-    bang = lines[0].decode('utf-8').strip()
+    try:
+        bang = lines[0].decode('utf-8').strip()
+    except UnicodeDecodeError, e:
+        # binary file
+        return
 
     if not bang.startswith('#!'):
         return
