diff --git a/PIL/Image.py b/PIL/Image.py
index bb15aaa..2e120e5 100644
--- a/PIL/Image.py
+++ b/PIL/Image.py
@@ -706,7 +706,7 @@ def convert(self, mode=None, data=None, dither=None,
         if self.mode == "L" and mode == "RGBA" and "transparency" in self.info:
             from PIL import ImagePalette
             self.mode = "P"
-            bytePalette = bytes([i//3 for i in range(768)])
+            bytePalette = bytes(bytearray([i//3 for i in range(768)]))
             self.palette = ImagePalette.raw("RGB", bytePalette)
             self.palette.dirty = 1
             self.load()
diff --git a/_imaging.c b/_imaging.c
index 9f48030..84f06e9 100644
--- a/_imaging.c
+++ b/_imaging.c
@@ -287,6 +287,7 @@ int PyImaging_GetBuffer(PyObject* buffer, Py_buffer *view)
 static const char* wrong_raw_mode = "unrecognized raw mode";
 static const char* outside_image = "image index out of range";
 static const char* outside_palette = "palette index out of range";
+static const char* wrong_palette_size = "invalid palette size";
 static const char* no_palette = "image has no palette";
 static const char* readonly = "image is readonly";
 /* static const char* no_content = "image has no content"; */
@@ -1413,6 +1414,11 @@ int PyImaging_GetBuffer(PyObject* buffer, Py_buffer *view)
     return NULL;
     }
 
+    if ( palettesize * 8 / bits > 256) {
+    PyErr_SetString(PyExc_ValueError, wrong_palette_size);
+    return NULL;
+    }
+
     ImagingPaletteDelete(self->image->palette);
 
     strcpy(self->image->mode, "P");

