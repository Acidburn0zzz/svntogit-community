diff -u -r luxrender-lux-b3f85cf7742f/python/binding.cpp luxrender-lux-b3f85cf7742f-py3.7/python/binding.cpp
--- luxrender-lux-b3f85cf7742f/python/binding.cpp	2016-05-09 23:21:17.000000000 +0200
+++ luxrender-lux-b3f85cf7742f-py3.7/python/binding.cpp	2018-07-29 17:01:42.325353797 +0200
@@ -193,7 +193,7 @@
 
 
 	// Add definitions given in other header files
-	export_PyContext();
+	export_PyLuxContext();
 	export_PyDynload();
 	export_PyFlexImageFilm();
 	// export_PyRenderer();
diff -u -r luxrender-lux-b3f85cf7742f/python/pycontext.h luxrender-lux-b3f85cf7742f-py3.7/python/pycontext.h
--- luxrender-lux-b3f85cf7742f/python/pycontext.h	2016-05-09 23:21:17.000000000 +0200
+++ luxrender-lux-b3f85cf7742f-py3.7/python/pycontext.h	2018-07-29 17:03:05.042267372 +0200
@@ -359,13 +359,13 @@
 }
 
 /*
- * PyContext class
+ * PyLuxContext class
  */
 
-class PyContext
+class PyLuxContext
 {
 public:
-	PyContext(std::string _name)
+	PyLuxContext(std::string _name)
 	{
 		//System wide init
 		boost::call_once(&luxInit, luxInitFlag);
@@ -376,7 +376,7 @@
 		// LOG(LUX_INFO,LUX_NOERROR)<<"Created new context : '"<<name<<"'";
 	}
 
-	~PyContext()
+	~PyLuxContext()
 	{
 		//destroy threads
 		BOOST_FOREACH(boost::thread *t,pyLuxWorldEndThreads)
@@ -802,7 +802,7 @@
 	void worldEnd() //launch luxWorldEnd() into a thread
 	{
 		checkActiveContext();
-		pyLuxWorldEndThreads.push_back(new boost::thread( boost::bind(&PyContext::pyWorldEnd, this) ));
+		pyLuxWorldEndThreads.push_back(new boost::thread( boost::bind(&PyLuxContext::pyWorldEnd, this) ));
 	}
 
 	void loadFLM(const char* name)
@@ -1363,472 +1363,472 @@
 	fb_type->tp_as_sequence = &float_buffer_as_sequence;
 }
 
-// Add PyContext class to pylux module definition
-void export_PyContext()
+// Add PyLuxContext class to pylux module definition
+void export_PyLuxContext()
 {
 	using namespace boost::python;
 	using namespace lux;
 
 	export_float_buffer();
 
-	class_<PyContext>(
+	class_<PyLuxContext>(
 		"Context",
 		ds_pylux_Context,
 		init<std::string>(args("Context", "name"), ds_pylux_Context_init)
 		)
 		.def_readonly("name",
-			&PyContext::name
+			&PyLuxContext::name
 		)
 		.def("__repr__",
-			&PyContext::repr,
+			&PyLuxContext::repr,
 			args("Context")
 		)
 		.def("accelerator",
-			&PyContext::accelerator,
+			&PyLuxContext::accelerator,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_accelerator
 		)
 		.def("addServer",
-			&PyContext::addServer,
+			&PyLuxContext::addServer,
 			args("Context", "address"),
 			ds_pylux_Context_addServer
 		)
 		.def("addThread",
-			&PyContext::addThread,
+			&PyLuxContext::addThread,
 			args("Context"),
 			ds_pylux_Context_addThread
 		)
 		.def("areaLightSource",
-			&PyContext::areaLightSource,
+			&PyLuxContext::areaLightSource,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_areaLightSource
 		)
 		.def("attributeBegin",
-			&PyContext::attributeBegin,
+			&PyLuxContext::attributeBegin,
 			args("Context"),
 			ds_pylux_Context_attributeBegin
 		)
 		.def("attributeEnd",
-			&PyContext::attributeEnd,
+			&PyLuxContext::attributeEnd,
 			args("Context"),
 			ds_pylux_Context_attributeEnd
 		)
 		.def("blenderCombinedDepthBuffers",
-			&PyContext::blenderCombinedDepthBuffers,
+			&PyLuxContext::blenderCombinedDepthBuffers,
 			args("Context"),
 			"Blender framebuffer fetcher method; returns combined Color+Alpha and Depth buffers in bottom-up format as Python buffers"
 		)
 		.def("blenderCombinedDepthRects",
-			&PyContext::blenderCombinedDepthRects,
+			&PyLuxContext::blenderCombinedDepthRects,
 			args("Context"),
 			"Blender framebuffer fetcher method; returns combined Color+Alpha and Depth buffers in bottom-up format"
 		)
 		.def("camera",
-			&PyContext::camera,
+			&PyLuxContext::camera,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_camera
 		)
 		.def("cleanup",
-			&PyContext::cleanup,
+			&PyLuxContext::cleanup,
 			args("Context"),
 			ds_pylux_Context_cleanup
 		)
 		.def("concatTransform",
-			&PyContext::concatTransform,
+			&PyLuxContext::concatTransform,
 			args("Context", "transform"),
 			ds_pylux_Context_concatTransform
 		)
 		.def("coordSysTransform",
-			&PyContext::coordSysTransform,
+			&PyLuxContext::coordSysTransform,
 			args("Context", "name"),
 			ds_pylux_Context_coordSysTransform
 		)
 		.def("coordinateSystem",
-			&PyContext::coordinateSystem,
+			&PyLuxContext::coordinateSystem,
 			args("Context", "name"),
 			ds_pylux_Context_coordinateSystem
 		)
 		.def("disableRandomMode",
-			&PyContext::disableRandomMode,
+			&PyLuxContext::disableRandomMode,
 			args("Context"),
 			ds_pylux_Context_disableRandomMode
 		)
 		.def("enableDebugMode",
-			&PyContext::enableDebugMode,
+			&PyLuxContext::enableDebugMode,
 			args("Context"),
 			ds_pylux_Context_enableDebugMode
 		)
 		.def("exit",
-			&PyContext::exit,
+			&PyLuxContext::exit,
 			args("Context"),
 			ds_pylux_Context_exit
 		)
 		.def("exterior",
-			&PyContext::exterior,
+			&PyLuxContext::exterior,
 			args("Context", "VolumeName"),
 			ds_pylux_Context_exterior
 		)
 		.def("film",
-			&PyContext::film,
+			&PyLuxContext::film,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_film
 		)
 		.def("framebuffer",
-			&PyContext::framebuffer,
+			&PyLuxContext::framebuffer,
 			args("Context"),
 			ds_pylux_Context_framebuffer
 		)
 		.def("floatFramebuffer",
-			&PyContext::floatFramebuffer,
+			&PyLuxContext::floatFramebuffer,
 			args("Context"),
 			ds_pylux_Context_floatframebuffer
 		)
 		.def("alphaBuffer",
-			&PyContext::alphaBuffer,
+			&PyLuxContext::alphaBuffer,
 			args("Context"),
 			ds_pylux_Context_alphabuffer
 		)
 		.def("zBuffer",
-			&PyContext::zBuffer,
+			&PyLuxContext::zBuffer,
 			args("Context"),
 			ds_pylux_Context_zbuffer
 		)
 		.def("getDefaultParameterValue",
-			&PyContext::getDefaultParameterValue,
+			&PyLuxContext::getDefaultParameterValue,
 			args("Context", "component", "parameter", "index"),
 			ds_pylux_Context_getDefaultParameterValue
 		)
 		.def("getDefaultStringParameterValue",
-			&PyContext::getDefaultStringParameterValue,
+			&PyLuxContext::getDefaultStringParameterValue,
 			args("Context"),
 			ds_pylux_Context_getDefaultStringParameterValue
 		)
 		.def("getHistogramImage",
-			&PyContext::getHistogramImage,
+			&PyLuxContext::getHistogramImage,
 			args("Context", "width", "height", "options"),
 			ds_pylux_Context_getHistogramImage
 		)
 		.def("getNetworkServerUpdateInterval",
-			&PyContext::getNetworkServerUpdateInterval,
+			&PyLuxContext::getNetworkServerUpdateInterval,
 			args("Context"),
 			ds_pylux_Context_getNetworkServerUpdateInterval
 		)
 		.def("getAttribute",
-			&PyContext::getAttribute,
+			&PyLuxContext::getAttribute,
 			args("Context"),
 			ds_pylux_Context_getAttribute
 		)
 		.def("getAttributes",
-			&PyContext::getAttributes,
+			&PyLuxContext::getAttributes,
 			args("Context"),
 			ds_pylux_Context_getAttributes
 		)
 		.def("getParameterValue",
-			&PyContext::getParameterValue,
+			&PyLuxContext::getParameterValue,
 			args("Context", "component", "parameter", "index"),
 			ds_pylux_Context_getParameterValue
 		)
 		.def("getRenderingServersStatus",
-			&PyContext::getRenderingServersStatus,
+			&PyLuxContext::getRenderingServersStatus,
 			args("Context"),
 			ds_pylux_Context_getRenderingServersStatus
 		)
 		.def("getServerCount",
-			&PyContext::getServerCount,
+			&PyLuxContext::getServerCount,
 			args("Context"),
 			ds_pylux_Context_getServerCount
 		)
 		.def("getStringParameterValue",
-			&PyContext::getStringParameterValue,
+			&PyLuxContext::getStringParameterValue,
 			args("Context"),
 			ds_pylux_Context_getStringParameterValue
 		)
 		.def("identity",
-			&PyContext::identity,
+			&PyLuxContext::identity,
 			args("Context"),
 			ds_pylux_Context_identity
 		)
 		.def("interior",
-			&PyContext::interior,
+			&PyLuxContext::interior,
 			args("Context", "VolumeName"),
 			ds_pylux_Context_interior
 		)
 		.def("lightGroup",
-			&PyContext::lightGroup,
+			&PyLuxContext::lightGroup,
 			args("Context", "name", "ParamSet"),
 			ds_pylux_Context_lightGroup
 		)
 		.def("lightSource",
-			&PyContext::lightSource,
+			&PyLuxContext::lightSource,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_lightSource
 		)
 		.def("loadFLM",
-			&PyContext::loadFLM,
+			&PyLuxContext::loadFLM,
 			args("Context", "filename"),
 			ds_pylux_Context_loadFLM
 		)
 		.def("lookAt",
-			&PyContext::lookAt,
+			&PyLuxContext::lookAt,
 			args("Context", "pos0", "pos1", "pos2", "trg0", "trg1", "trg2", "up0", "up1", "up2"),
 			ds_pylux_Context_lookAt
 		)
 		.def("makeNamedMaterial",
-			&PyContext::makeNamedMaterial,
+			&PyLuxContext::makeNamedMaterial,
 			args("Context", "name", "ParamSet"),
 			ds_pylux_Context_makeNamedMaterial
 		)
 		.def("makeNamedVolume",
-			&PyContext::makeNamedVolume,
+			&PyLuxContext::makeNamedVolume,
 			args("Context", "name", "type", "ParamSet"),
 			ds_pylux_Context_makeNamedVolume
 		)
 		.def("material",
-			&PyContext::material,
+			&PyLuxContext::material,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_material
 		)
 		.def("motionBegin",
-			&PyContext::motionBegin,
+			&PyLuxContext::motionBegin,
 			args("Context"),
 			ds_pylux_Context_motionBegin
 		)
 		.def("motionEnd",
-			&PyContext::motionEnd,
+			&PyLuxContext::motionEnd,
 			args("Context"),
 			ds_pylux_Context_motionEnd
 		)
 		.def("motionInstance",
-			&PyContext::motionInstance,
+			&PyLuxContext::motionInstance,
 			args("Context"),
 			ds_pylux_Context_motionInstance
 		)
 		.def("namedMaterial",
-			&PyContext::namedMaterial,
+			&PyLuxContext::namedMaterial,
 			args("Context", "name"),
 			ds_pylux_Context_namedMaterial
 		)
 		.def("objectBegin",
-			&PyContext::objectBegin,
+			&PyLuxContext::objectBegin,
 			args("Context", "name"),
 			ds_pylux_Context_objectBegin
 		)
 		.def("objectEnd",
-			&PyContext::objectEnd,
+			&PyLuxContext::objectEnd,
 			args("Context"),
 			ds_pylux_Context_objectEnd
 		)
 		.def("objectInstance",
-			&PyContext::objectInstance,
+			&PyLuxContext::objectInstance,
 			args("Context", "name"),
 			ds_pylux_Context_objectInstance
 		)
 		.def("overrideResumeFLM",
-			&PyContext::overrideResumeFLM,
+			&PyLuxContext::overrideResumeFLM,
 			args("Context"),
 			ds_pylux_Context_overrideResumeFLM
 		)
 		.def("parse",
-			&PyContext::parse,
+			&PyLuxContext::parse,
 			args("Context", "filename", "asynchronous"),
 			ds_pylux_Context_parse
 			)
 		.def("parsePartial",
-			&PyContext::parsePartial,
+			&PyLuxContext::parsePartial,
 			args("Context", "filename", "asynchronous"),
 			ds_pylux_Context_parsePartial
 		)
 		.def("parseSuccessful",
-			&PyContext::parseSuccessful,
+			&PyLuxContext::parseSuccessful,
 			args("Context")
 			)
 		.def("pause",
-			&PyContext::pause,
+			&PyLuxContext::pause,
 			args("Context"),
 			ds_pylux_Context_pause
 		)
 		.def("renderer",
-			&PyContext::renderer,
+			&PyLuxContext::renderer,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_renderer
 		)
 		.def("pixelFilter",
-			&PyContext::pixelFilter,
+			&PyLuxContext::pixelFilter,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_pixelFilter
 		)
 		.def("portalShape",
-			&PyContext::portalShape,
+			&PyLuxContext::portalShape,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_portalShape
 		)
 		.def("portalInstance",
-			&PyContext::portalInstance,
+			&PyLuxContext::portalInstance,
 			args("Context", "name"),
 			ds_pylux_Context_portalInstance
 		)
 		.def("removeServer",
-			&PyContext::removeServer,
+			&PyLuxContext::removeServer,
 			args("Context", "address"),
 			ds_pylux_Context_removeServer
 		)
 		.def("removeThread",
-			&PyContext::removeThread,
+			&PyLuxContext::removeThread,
 			args("Context"),
 			ds_pylux_Context_removeThread
 		)
 		.def("resetServer",
-			&PyContext::resetServer,
+			&PyLuxContext::resetServer,
 			args("Context", "address", "password"),
 			ds_pylux_Context_resetServer
 		)
 		.def("reverseOrientation",
-			&PyContext::reverseOrientation,
+			&PyLuxContext::reverseOrientation,
 			args("Context"),
 			ds_pylux_Context_reverseOrientation
 		)
 		.def("rotate",
-			&PyContext::rotate,
+			&PyLuxContext::rotate,
 			args("Context", "degrees", "x", "y", "z"),
 			ds_pylux_Context_rotate
 		)
 		.def("sampler",
-			&PyContext::sampler,
+			&PyLuxContext::sampler,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_sampler
 		)
 		.def("saveFLM",
-			&PyContext::saveFLM,
+			&PyLuxContext::saveFLM,
 			args("Context", "filename"),
 			ds_pylux_Context_saveFLM
 		)
 		.def("saveEXR",
-			&PyContext::saveEXR,
+			&PyLuxContext::saveEXR,
 			args("Context", "filename", "useHalfFloat", "includeZBuffer", "tonemapped"),
 			ds_pylux_Context_saveEXR
 		)
 		.def("scale",
-			&PyContext::scale,
+			&PyLuxContext::scale,
 			args("Context", "x", "y", "z"),
 			ds_pylux_Context_scale
 		)
 		.def("setEpsilon",
-			&PyContext::setEpsilon,
+			&PyLuxContext::setEpsilon,
 			args("Context"),
 			ds_pylux_Context_setEpsilon
 		)
 		.def("setHaltSamplesPerPixel",
-			&PyContext::setHaltSamplesPerPixel,
+			&PyLuxContext::setHaltSamplesPerPixel,
 			args("Context"),
 			ds_pylux_Context_setHaltSamplesPerPixel
 		)
 		.def("setNetworkServerUpdateInterval",
-			&PyContext::setNetworkServerUpdateInterval,
+			&PyLuxContext::setNetworkServerUpdateInterval,
 			args("Context"),
 			ds_pylux_Context_setNetworkServerUpdateInterval
 		)
 		.def("setAttribute",
-			&PyContext::setAttribute,
+			&PyLuxContext::setAttribute,
 			args("Context"),
 			ds_pylux_Context_setAttribute
 		)
 		.def("setParameterValue",
-			&PyContext::setParameterValue,
+			&PyLuxContext::setParameterValue,
 			args("Context"),
 			ds_pylux_Context_setParameterValue
 		)
 		.def("setStringParameterValue",
-			&PyContext::setStringParameterValue,
+			&PyLuxContext::setStringParameterValue,
 			args("Context"),
 			ds_pylux_Context_setStringParameterValue
 		)
 		.def("shape",
-			&PyContext::shape,
+			&PyLuxContext::shape,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_shape
 		)
 		.def("start",
-			&PyContext::start,
+			&PyLuxContext::start,
 			args("Context"),
 			ds_pylux_Context_start
 		)
 		.def("statistics",
-			&PyContext::statistics,
+			&PyLuxContext::statistics,
 			args("Context", "name"),
 			ds_pylux_Context_statistics
 		)
 		.def("printableStatistics",
-			&PyContext::printableStatistics,
+			&PyLuxContext::printableStatistics,
 			args("Context", "add_total"),
 			ds_pylux_Context_printable_statistics
 		)
 		.def("updateStatisticsWindow",
-			&PyContext::updateStatisticsWindow,
+			&PyLuxContext::updateStatisticsWindow,
 			args("Context"),
 			ds_pylux_Context_update_statistics_window
 		)
 		.def("surfaceIntegrator",
-			&PyContext::surfaceIntegrator,
+			&PyLuxContext::surfaceIntegrator,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_surfaceIntegrator
 		)
 		.def("texture",
-			&PyContext::texture,
+			&PyLuxContext::texture,
 			args("Context", "name", "variant", "type", "ParamSet"),
 			ds_pylux_Context_texture
 		)
 		.def("transform",
-			&PyContext::transform,
+			&PyLuxContext::transform,
 			args("Context", "transform"),
 			ds_pylux_Context_transform
 		)
 		.def("transformBegin",
-			&PyContext::transformBegin,
+			&PyLuxContext::transformBegin,
 			args("Context"),
 			ds_pylux_Context_transformBegin
 		)
 		.def("transformEnd",
-			&PyContext::transformEnd,
+			&PyLuxContext::transformEnd,
 			args("Context"),
 			ds_pylux_Context_transformEnd
 		)
 		.def("translate",
-			&PyContext::translate,
+			&PyLuxContext::translate,
 			args("Context", "x", "y", "z"),
 			ds_pylux_Context_translate
 		)
 		.def("updateFilmFromNetwork",
-			&PyContext::updateFilmFromNetwork,
+			&PyLuxContext::updateFilmFromNetwork,
 			args("Context"),
 			ds_pylux_Context_updateFilmFromNetwork
 		)
 		.def("updateFramebuffer",
-			&PyContext::updateFramebuffer,
+			&PyLuxContext::updateFramebuffer,
 			args("Context"),
 			ds_pylux_Context_updateFramebuffer
 		)
 		.def("volume",
-			&PyContext::volume,
+			&PyLuxContext::volume,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_volume
 		)
 		.def("volumeIntegrator",
-			&PyContext::volumeIntegrator,
+			&PyLuxContext::volumeIntegrator,
 			args("Context", "type", "ParamSet"),
 			ds_pylux_Context_volumeIntegrator
 		)
 		.def("wait",
-			&PyContext::wait,
+			&PyLuxContext::wait,
 			args("Context"),
 			ds_pylux_Context_wait
 		)
 		.def("worldBegin",
-			&PyContext::worldBegin,
+			&PyLuxContext::worldBegin,
 			args("Context"),
 			ds_pylux_Context_worldBegin
 		)
 		.def("worldEnd",
-			&PyContext::worldEnd,
+			&PyLuxContext::worldEnd,
 			args("Context"),
 			ds_pylux_Context_worldEnd
 		)
