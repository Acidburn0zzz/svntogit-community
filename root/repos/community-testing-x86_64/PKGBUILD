# Maintainer: Konstantin Gizdov < arch at kge dot pw >
# Contributor: Frank Siegert < frank.siegert at googlemail dot com >
# Contributor: Scott Lawrence < bytbox at gmail dot com >
# Contributor: Thomas Dziedzic < gostrc at gmail dot com >
# Contributor: Sebastian Voecking < voeck at web dot de >

pkgbase=root
pkgname=('root' 'root-cuda')
pkgver=6.20.04
pkgrel=3
pkgdesc='C++ data analysis framework and interpreter from CERN'
arch=('x86_64')
url='https://root.cern'
license=('LGPL2.1' 'GPL' 'custom:University of California and Stanford University License')
makedepends=('ccache'
             'cern-vdt'
             'cfitsio'
             'cmake'
             'cuda'
             'cudnn'
             'gcc-fortran'
             'gcc8-fortran'
             'git'
             'go'
             'libxml2'
             'libmariadbclient'
             'ocaml'
             'ocaml-ctypes'
             'openssl'
             'postgresql-libs'
             'pythia8>=8.2.40-1'
             'sqlite'
             'unuran'
             'vc'
             'xrootd>=4.6.0-2'
             'z3')
depends=('blas'
         'desktop-file-utils'
         'fcgi'
         'fftw'
         'ftgl'
         'giflib'
         'gl2ps'
         'glew'
         'graphviz'
         'gsl'
         'hicolor-icon-theme'
         'intel-tbb'
         'libafterimage'
         'librsvg'
         'libxpm'
         'python'
         'python-numpy'
         'tex-gyre-fonts'
         'unixodbc'
         'xxhash>=0.6.5-1'
         'zstd')
optdepends=('cern-vdt: Add a set of fast and vectorisable mathematical functions'
            'cfitsio: Read images and data from FITS files'
            'libmariadbclient: MySQL support'
            'libxml2: XML parser interface'
            'openssl: OpenSSL support'
            'postgresql-libs: PostgreSQL support'
            'pythia8>=8.2.40-1: Pythia8 EG support'
            'sqlite: SQLite support'
            'tcsh: Legacy CSH support'
            'unuran: Support non-uniform random numbers'
            'vc: Add types for portable and intuitive SIMD programming'
            'xrootd: Support remote file server and client'
            'z3: Suuport the Z3 theorem prover')
source=("https://root.cern.ch/download/root_v${pkgver}.source.tar.gz"
        'ROOFIT_LICENSE'
        'root.xml'
        'root.pc.tpl'
        'settings.cmake'
        'settings-cuda.cmake'
        'jupyter_notebook_config.py'
        'add_missing_include_ROOT-10315.patch'
        'fix_relative_paths.patch'
        'nbman-for-arch.patch'
        'thisroot.fail')
sha256sums=('1f8c76ccdb550e64e6ddb092b4a7e9d0a10655ef80044828cba12d5e7c874472'
            '43fb857c82c23016dc9ae82a591503c47d12ecbc576cb8285aa632b3e83b9839'
            '50c08191a5b281a39aa05ace4feb8d5405707b4c54a5dcba061f954649c38cb0'
            '558b1c882ce166ad27349460f4da2a81a9a429ad0b5e802601b6ee2714610b0e'
            '54cae85b8ff132cd0de6654048797281a7725efaa8158a3b97ea21ce8f258ebd'
            'b1cad3e74be54ea7ef65a522d726e608b7f5b451c036c4cbb7511f454f015f4c'
            'f33b7b6c4357b0c95cb6a19b4c7e0a1063e5a5ebe4f777f50ff7cde4d77b2241'
            '1cb2654f22b5f1de7f8621434c76266968db77a1f300de857e47d0f4ad5da217'
            'd5b135fb4d6329277e33d612f8b81b1ca60681cca96196e33ab776f3018a2fa8'
            '49041cb8e7a9bea8288889b78c3c0cd3b9865ad29bb40901b2fb0f2650888f31'
            'd88c7d09ae2f20022d12c82bf981ae9dffeefc93d8dd766aca011b2b3193f413')

get_pyver () {
    python -c 'import sys; print(str(sys.version_info[0]) + "." + str(sys.version_info[1]))'
}

prepare() {
    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        [[ $src = *.patch ]] || continue
        echo "  -> Applying patch $src..."
        patch -Np1 -i "../$src" -d "${srcdir}/${pkgbase}-${pkgver}"
    done

    # specify some custom flags
    # needed by vc to link properly
    CUSTOM_CMAKE_FLAGS="-DTARGET_ARCHITECTURE:STRING=generic"
    # make sure it finds python
    CUSTOM_CMAKE_FLAGS+=" -DPYTHON_EXECUTABLE:PATH=/usr/bin/python"
    # need to set install prefix like so
    CUSTOM_CMAKE_FLAGS+=" -DINSTALL_PREFIX=/usr"
    export CUSTOM_CMAKE_FLAGS

    # update system flags
    # don't let ROOT play around with lib paths
    # the following is no longer necessary
    # sed -i -e 's@SetLibraryPath();@@g' \
    #     "${srcdir}/${pkgbase}-${pkgver}/rootx/src/rootx.cxx"
    # now only depends on IS_RPATH_BUILD being set
    # so pass it to GCC
    export CPPFLAGS="${CPPFLAGS} -DIS_RPATH_BUILD=1"
    # make sure pthread gets detected
    CUSTOM_COMPILER_FLAGS="${CPPFLAGS} -pthread"
    export CFLAGS="${CFLAGS} ${CUSTOM_COMPILER_FLAGS}"
    export CXXFLAGS="${CXXFLAGS} ${CUSTOM_COMPILER_FLAGS}"
    # do not link undefined
    CUSTOM_COMPILER_FLAGS+=" -Wl,--no-undefined"
    export LDFLAGS="${LDFLAGS} ${CUSTOM_COMPILER_FLAGS}"

    # go flags for built-in clang
    export CGO_LDFLAGS="${LDFLAGS}"
    export GOFLAGS="-buildmode=pie -trimpath -modcacherw"

    cp -r "${pkgbase}-${pkgver}" "${pkgbase}-${pkgver}-cuda"
}

build() {
    ## ROOT
    mkdir -p "${srcdir}/build"
    cd "${srcdir}/build"

    cmake -C "${srcdir}/settings.cmake" \
        ${CUSTOM_CMAKE_FLAGS} \
        "${srcdir}/${pkgbase}-${pkgver}"
    make

    ## ROOT with CUDA
    mkdir -p "${srcdir}/build-cuda"
    cd "${srcdir}/build-cuda"

    CC=/usr/bin/gcc-8 \
    CXX=/usr/bin/g++-8 \
    cmake -C "${srcdir}/settings-cuda.cmake" \
        ${CUSTOM_CMAKE_FLAGS} \
        "${srcdir}/${pkgbase}-${pkgver}-cuda"
    make
}

_package() {
    local bld_dir="${srcdir}/${1}"
    cd "${bld_dir}"

    make DESTDIR="${pkgdir}" install

    # fix missing hardlinks for genreflex and rootcint
    cd "${pkgdir}"/usr/bin
    ln -f rootcling rootcint
    ln -f rootcling genreflex
    cd "${bld_dir}" # go back

    # fix python env call
    sed -e 's/@python@/python/' -i "${pkgdir}/usr/lib/root/cmdLineUtils.py"

    # try to deal with weird PyROOT, PyMVA and JupyROOT stuff
    rm -rf "${pkgdir}/usr/lib/root/__pycache__"
    local _pyver=$(get_pyver)
    local _pydir="${pkgdir}/usr/lib/python${_pyver}/site-packages"
    install -d "${_pydir}"
    find "${pkgdir}/usr/lib/root" -maxdepth 1 -mindepth 1 \( -iname "*py*" -or -name "*Js*" \) \
            ! \( -name "*EGPythia8*" -or -iname "*.rootmap" -or -iname "*.pcm" \) -print0 | while read -rd $'\0' _lib; do
        _base=$(basename "${_lib}")
        ln -sf "/usr/lib/root/${_base}" "${pkgdir}/usr/lib/python${_pyver}/site-packages/${_base}"
    done

    # recompile pycache to strip $pkgdir from embedded paths
    python -m compileall -d "/usr/lib/python${_pyver}" \
        "${pkgdir}/usr/lib/python${_pyver}"
    python -O -m compileall -d "/usr/lib/python${_pyver}" \
        "${pkgdir}/usr/lib/python${_pyver}"

    # icon, shortcut and mime
    install -Dm644 "${srcdir}/${pkgbase}-${pkgver}/icons/Root6Icon.png" \
        "${pkgdir}/usr/share/icons/hicolor/48x48/apps/root.png"
    install -Dm644 "${srcdir}/${pkgbase}-${pkgver}/etc/root.desktop" \
        "${pkgdir}/usr/share/applications/root.desktop"
    echo 'Icon=root.png' >> "${pkgdir}/usr/share/applications/root.desktop"
    install -Dm644 "${srcdir}/root.xml" \
        "${pkgdir}/usr/share/mime/packages/root.xml"

    # use a file that pacman can track instead of adding directly to ld.so.conf
    install -d "${pkgdir}/etc/ld.so.conf.d"
    echo '/usr/lib/root' > "${pkgdir}/etc/ld.so.conf.d/root.conf"

    # create pkg-config file
    local _prefix _exec_prefix _bindir _libdir _incdir _pkg_ver _libs _cflags _requires
    _prefix="$("${pkgdir}"/usr/bin/root-config --prefix)"
    _exec_prefix="$("${pkgdir}"/usr/bin/root-config --exec-prefix)"
    _bindir="$("${pkgdir}"/usr/bin/root-config --bindir)"
    _libdir="$("${pkgdir}"/usr/bin/root-config --libdir)"
    _incdir="$("${pkgdir}"/usr/bin/root-config --incdir)"
    _pkg_ver="$(sed -n 's,.*ROOT_RELEASE *\"\(.*\)\".*,\1,p' < "${pkgdir}"/usr/include/RVersion.h)"
    _libs="$("${pkgdir}"/usr/bin/root-config --libs)"
    _cflags="$("${pkgdir}"/usr/bin/root-config --cflags)"
    printf -v _requires '%s,' "${depends[@]}"
    cp "${srcdir}/root.pc.tpl" "${bld_dir}"/
    sed -e "s@_PREFIX@${_prefix}@" -e "s@_EXECPREFIX@${_exec_prefix}@" \
        -e "s@_LIBDIR@${_libdir}@" -e "s@_INCDIR@${_incdir}@" \
        -e "s@_PKGVERSION@${_pkg_ver}@" -e "s@_LIBRARIES@${_libs}@" \
        -e "s@_CFLAGS@${_cflags}@" -e "s@_UPSTREAM_URL@${url}@" \
        -e "s@_REQUIRES@${_requires}@" \
        -i "${bld_dir}/root.pc.tpl"
    install -Dm644 "${bld_dir}/root.pc.tpl" "${pkgdir}/usr/lib/pkgconfig/root.pc"

    # install all licenses & docs
    install -d "${pkgdir}/usr/share/licenses/roofit"
    install "${srcdir}/ROOFIT_LICENSE" "${pkgdir}/usr/share/licenses/roofit/LICENSE"
    install -d "${pkgdir}/usr/share/licenses/${pkgname}"
    ln -s '/usr/share/doc/root/LICENSE' "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
    for fold in fonts js; do
      install -d "${pkgdir}/usr/share/licenses/${pkgname}/${fold}"
      ln -s "/usr/share/root/${fold}/LICENSE" "${pkgdir}/usr/share/licenses/${pkgname}/${fold}"/
    done
    ln -s '/usr/share/licenses/roofit' "${pkgdir}/usr/share/licenses/${pkgname}/roofit"
    if [ "${pkgname}" != "root" ]; then
        ln -s "/usr/share/licenses/${pkgname}" "${pkgdir}/usr/share/licenses/root"
        ln -s "/usr/share/doc/root" "${pkgdir}/usr/share/doc/${pkgname}"
    fi

    # install jupyter kernels and `root --notebook` config
    install -d "${pkgdir}/usr/share/jupyter/kernels"
    ln -s '/etc/root/notebook/kernels/root' "${pkgdir}/usr/share/jupyter/kernels/root"
    install "${srcdir}/jupyter_notebook_config.py" "${pkgdir}/etc/root/notebook"/

    # drop thisroot.* shell files
    rm -rf "${pkgdir}"/usr/bin/thisroot.*
    install -Dm755 "${srcdir}/thisroot.fail" "${pkgdir}/usr/bin/thisroot.sh"
    for suffix in csh fish; do
        ln -s '/usr/bin/thisroot.sh' "${pkgdir}/usr/bin/thisroot.${suffix}"
    done
}

package_root() {
    optdepends+=('gcc-fortran: Enable the Fortran components of ROOT')
    _package build
}

package_root-cuda() {
    pkgdesc='C++ data analysis framework and interpreter from CERN with GPU (CUDA) features enabled'
    provides=('root')
    conflicts=('root')
    depends+=('cuda' 'cudnn')
    optdepends+=('gcc8-fortran: Enable the Fortran components of ROOT')
    _package build-cuda
}
