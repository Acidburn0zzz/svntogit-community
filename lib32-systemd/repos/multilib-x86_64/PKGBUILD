# Maintainer: Christian Hesse <mail@eworm.de>
# Maintainer: Dave Reisner <dreisner@archlinux.org>
# Maintainer: Tom Gundersen <teg@jklm.no>

pkgname=lib32-systemd
_pkgbasename=systemd
# Can be from either systemd or systemd-stable
_commit='572385e13566f9ca442ee3b46742159b905b4712'
pkgver=242.32
pkgrel=1
pkgdesc='system and service manager (32-bit)'
arch=('x86_64')
url='https://www.github.com/systemd/systemd'
license=('GPL2' 'LGPL2.1')
depends=('lib32-gcc-libs' 'lib32-libcap' 'lib32-libgcrypt' 'lib32-xz' 'systemd')
makedepends=('gcc-multilib' 'git' 'gperf' 'intltool' 'lib32-acl' 'lib32-bzip2'
             'lib32-curl' 'lib32-dbus' 'lib32-gcc-libs' 'lib32-glib2'
             'lib32-gnutls' 'lib32-libelf' 'lib32-libidn2' 'lib32-pcre2'
             'libxslt' 'meson')
options=('strip')
validpgpkeys=('63CDA1E5D3FC22B998D20DD6327F26951A015CC4'  # Lennart Poettering <lennart@poettering.net>
              '5C251B5FC54EB2F80F407AAAC54CA336CFEB557E') # Zbigniew JÄ™drzejewski-Szmek <zbyszek@in.waw.pl>
source=(# fragment is latest tag for source verification, final merge in prepare()
        "git+https://github.com/systemd/systemd-stable#tag=v${pkgver%.*}?signed"
        "git+https://github.com/systemd/systemd#tag=v${pkgver%.*}?signed")
sha512sums=('SKIP'
            'SKIP')

_backports=(
  # basic/socket-util: put a limit on the loop to flush connections
  '67962036f6c6cfd34828c1f1f1fbdc0018fb9898'

  # network: logs link state change
  '0beb9542e90ab1c5d1507a1046a326fbcf73861c'

  # network: drop invalid assertion
  '51aba17b88617515e037e8985d3a4ea871ac47fe'
  # network: fix assertion when link get carrier
  'b9ea3d2e47b3741f3f46ba9c5e19640136933b71'

  # network: do not use ordered_set_printf() for DOMAINS= or ROUTE_DOMAINS=
  'fe0e16db093a7da09fcb52a2bc7017197047443d'

  # network: honor MTUBytes= setting
  '933c70a0a4e4fac47d18e0348ae97ee3d48dc139'
  # network: bump MTU bytes only when MTUByte= is not set
  'f6fcc1c2a41eae749467de58453174296b635a69'

  # network: do not send ipv6 token to kernel
  '9f6e82e6eb3b6e73d66d00d1d6eee60691fb702f'

  # core: set fs.file-max sysctl to LONG_MAX rather than ULONG_MAX
  '6e2f78948403a4cce45b9e34311c9577c624f066'

  # cgroup-util: kill also threads
  'e48fcfef06d81bf08607d3c1657fdc6aa1e9a6ee'
)

_reverts=(
)

prepare() {
  cd "$_pkgbasename-stable"

  # add upstream repository for cherry-picking
  git remote add -f upstream ../systemd
  # merge the latest stable commit (fast-foward only to make sure
  # the verified tag is in)
  git merge --ff-only "${_commit}"

  local _c
  for _c in "${_backports[@]}"; do
    git cherry-pick -n "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    git revert -n "${_c}"
  done
}

pkgver() {
  local version count

  cd "$_pkgbasename-stable"

  local _version _count
  _version="$(git describe --abbrev=0 --tags)"
  _count="$(git rev-list --count ${_version}..)"
  printf '%s.%s' "${_version#v}" "${_count}"
}

build() {
  export CC="gcc -m32"
  export CXX="g++ -m32"
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig"

  local _timeservers=({0..3}.arch.pool.ntp.org)
  local _nameservers=(
    # We use these public name services, ordered by their
    # privacy policy (hopefully):
    #  * Cloudflare (https://1.1.1.1/)
    #  * Quad9 without filtering (https://www.quad9.net/)
    #  * Google (https://developers.google.com/speed/public-dns/)
    1.1.1.1
    9.9.9.10
    8.8.8.8
    2606:4700:4700::1111
    2620:fe::10
    2001:4860:4860::8888
  )
 
  local _meson_options=(
    --libexecdir	/usr/lib32
    --libdir		/usr/lib32

    -Dversion-tag="${pkgver}-${pkgrel}-arch"

    -Daudit=false
    -Dgnu-efi=false
    -Dima=false
    -Dlibidn2=true
    -Dlz4=false
    -Dblkid=false
    -Dkmod=false
    -Dlibcryptsetup=false
    -Dlibiptc=false
    -Dmanpages=false
    -Dnetworkd=false
    -Dpam=false
    -Dpython=false
    -Dseccomp=false
    -Dman=false
    -Dhtml=false

    -Ddbuspolicydir=/usr/share/dbus-1/system.d
    -Ddefault-hierarchy=hybrid
    -Ddefault-locale=C
    -Ddefault-kill-user-processes=false
    -Dfallback-hostname='archlinux'
    -Dntp-servers="${_timeservers[*]}"
    -Ddns-servers="${_nameservers[*]}"
    -Drpmmacrosdir=no
    -Dsysvinit-path=
    -Dsysvrcnd-path=
  )

  arch-meson "$_pkgbasename-stable" build "${_meson_options[@]}"

  ninja -C build
}

check() {
  meson test -C build
}

package() {
  DESTDIR="$pkgdir" ninja -C build install

  rm -rf "${pkgdir}"/{etc,var}
  rm -rf "${pkgdir}"/usr/{bin,include,lib,share}
}
