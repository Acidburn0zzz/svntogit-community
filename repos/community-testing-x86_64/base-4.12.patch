diff --git a/tools/c2hs/base/state/StateBase.hs b/tools/c2hs/base/state/StateBase.hs
index aebd885b..c07d29fc 100644
--- a/tools/c2hs/base/state/StateBase.hs
+++ b/tools/c2hs/base/state/StateBase.hs
@@ -58,6 +58,7 @@ where
 
 import Control.Applicative (Applicative(..))
 import Control.Monad (liftM, ap)
+import Control.Monad.Fail (MonadFail (..))
 
 import Position   (Position)
 import UNames     (NameSupply)
@@ -110,6 +111,8 @@ instance Monad (PreCST e s) where
   (>>=)  = (+>=)
   (>>)   = (+>)
 
+instance MonadFail (PreCST e s) where
+  fail = error
 
 -- unwrapper coercion function (EXPORTED)
 --
diff --git a/tools/c2hs/c/CParserMonad.hs b/tools/c2hs/c/CParserMonad.hs
index 12c4ffa6..ef720b93 100644
--- a/tools/c2hs/c/CParserMonad.hs
+++ b/tools/c2hs/c/CParserMonad.hs
@@ -63,6 +63,7 @@ import Idents    (Ident, lexemeToIdent, identToLexeme)
 
 import Control.Applicative (Applicative(..))
 import Control.Monad (liftM, ap)
+import Control.Monad.Fail (MonadFail (..))
 import Data.Set  (Set)
 import qualified Data.Set as Set (fromList, insert, member, delete)
 
@@ -83,6 +84,9 @@ data PState = PState {
 
 newtype P a = P { unP :: PState -> ParseResult a }
 
+instance MonadFail P where
+  fail m = getPos >>= \pos -> failP pos [m]
+
 instance Functor P where
   fmap = liftM
 

