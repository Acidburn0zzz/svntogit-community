diff -wbBur shotwell-0.11.4/src/photos/GRaw.c shotwell-0.11.4.my/src/photos/GRaw.c
--- shotwell-0.11.4/src/photos/GRaw.c	2011-10-28 12:44:04.000000000 +0400
+++ shotwell-0.11.4.my/src/photos/GRaw.c	2011-10-28 12:41:48.000000000 +0400
@@ -210,7 +210,7 @@
 };
 GRawProcessor* graw_processor_new (enum LibRaw_constructor_flags options);
 GRawProcessor* graw_processor_construct (GType object_type, enum LibRaw_constructor_flags options);
-void graw_processor_add_masked_borders_to_bitmap (GRawProcessor* self);
+//void graw_processor_add_masked_borders_to_bitmap (GRawProcessor* self);
 void graw_processor_adjust_sizes_info_only (GRawProcessor* self, GError** error);
 void graw_processor_document_mode_processing (GRawProcessor* self, GError** error);
 libraw_imgother_t graw_processor_get_image_other (GRawProcessor* self);
@@ -223,7 +223,7 @@
 void graw_processor_open_file (GRawProcessor* self, const gchar* filename, GError** error);
 void graw_processor_process (GRawProcessor* self, GError** error);
 void graw_processor_ppm_tiff_writer (GRawProcessor* self, const gchar* filename, GError** error);
-void graw_processor_rotate_fuji_raw (GRawProcessor* self, GError** error);
+//void graw_processor_rotate_fuji_raw (GRawProcessor* self, GError** error);
 void graw_processor_thumb_writer (GRawProcessor* self, const gchar* filename, GError** error);
 void graw_processor_recycle (GRawProcessor* self);
 void graw_processor_unpack (GRawProcessor* self, GError** error);
@@ -677,12 +677,12 @@
 	return graw_processor_construct (GRAW_TYPE_PROCESSOR, options);
 }
 
-
+#if 0
 void graw_processor_add_masked_borders_to_bitmap (GRawProcessor* self) {
 	g_return_if_fail (GRAW_IS_PROCESSOR (self));
 	libraw_add_masked_borders_to_bitmap (self->priv->proc);
 }
-
+#endif
 
 void graw_processor_adjust_sizes_info_only (GRawProcessor* self, GError** error) {
 	enum LibRaw_errors _tmp0_;
@@ -909,7 +909,7 @@
 	}
 }
 
-
+#if 0
 void graw_processor_rotate_fuji_raw (GRawProcessor* self, GError** error) {
 	enum LibRaw_errors _tmp0_;
 	GError * _inner_error_ = NULL;
@@ -927,7 +927,7 @@
 		}
 	}
 }
-
+#endif
 
 void graw_processor_thumb_writer (GRawProcessor* self, const gchar* filename, GError** error) {
 	enum LibRaw_errors _tmp0_;
@@ -1044,8 +1044,8 @@
 	(*_tmp8_).use_camera_matrix = TRUE;
 	_tmp9_ = graw_processor_get_output_params (self);
 	(*_tmp9_).output_color = (gint) GRAW_COLORSPACE_SRGB;
-	_tmp10_ = graw_processor_get_output_params (self);
-	(*_tmp10_).filtering_mode = LIBRAW_FILTERING_AUTOMATIC;
+//	_tmp10_ = graw_processor_get_output_params (self);
+//	(*_tmp10_).filtering_mode = LIBRAW_FILTERING_AUTOMATIC;
 	_tmp11_ = graw_processor_get_output_params (self);
 	(*_tmp11_).output_bps = 8;
 	_tmp12_ = graw_processor_get_output_params (self);
@@ -1356,6 +1356,7 @@
 				return;
 			}
 		}
+#if 0
 		case LIBRAW_CANNOT_ADDMASK:
 		{
 			GError* _tmp10_ = NULL;
@@ -1372,6 +1373,7 @@
 				return;
 			}
 		}
+#endif
 		case LIBRAW_UNSUFFICIENT_MEMORY:
 		{
 			GError* _tmp11_ = NULL;
