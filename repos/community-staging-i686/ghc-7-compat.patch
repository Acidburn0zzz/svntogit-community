diff -aur xmonad-contrib-0.9.1/XMonad/Prompt/AppendFile.hs xmonad-contrib-0.9.1-ghc7/XMonad/Prompt/AppendFile.hs
--- xmonad-contrib-0.9.1/XMonad/Prompt/AppendFile.hs	2009-12-17 00:32:25.000000000 +0100
+++ xmonad-contrib-0.9.1-ghc7/XMonad/Prompt/AppendFile.hs	2010-12-13 14:18:23.171534074 +0100
@@ -29,7 +29,7 @@
 import XMonad.Prompt
 
 import System.IO
-import Control.Exception
+import Control.Exception.Extensible (bracket)
 
 -- $usage
 --
diff -aur xmonad-contrib-0.9.1/XMonad/Prompt/Man.hs xmonad-contrib-0.9.1-ghc7/XMonad/Prompt/Man.hs
--- xmonad-contrib-0.9.1/XMonad/Prompt/Man.hs	2009-12-17 00:32:25.000000000 +0100
+++ xmonad-contrib-0.9.1-ghc7/XMonad/Prompt/Man.hs	2010-12-13 14:18:23.171534074 +0100
@@ -31,7 +31,7 @@
 import System.Process
 import System.IO
 
-import qualified Control.Exception as E
+import qualified Control.Exception.Extensible as E
 import Control.Monad
 import Data.List
 import Data.Maybe
@@ -62,7 +62,8 @@
 
 getMans :: IO [String]
 getMans = do
-  paths <- getCommandOutput "manpath -g 2>/dev/null" `E.catch` \_ -> return []
+  paths <- getCommandOutput "manpath -g 2>/dev/null" `E.catch`
+            \(E.SomeException _) -> return []
   let sects    = ["man" ++ show n | n <- [1..9 :: Int]]
       dirs     = [d ++ "/" ++ s | d <- split ':' paths, s <- sects]
   mans <- forM dirs $ \d -> do
diff -aur xmonad-contrib-0.9.1/XMonad/Prompt.hs xmonad-contrib-0.9.1-ghc7/XMonad/Prompt.hs
--- xmonad-contrib-0.9.1/XMonad/Prompt.hs	2009-12-17 00:32:25.000000000 +0100
+++ xmonad-contrib-0.9.1-ghc7/XMonad/Prompt.hs	2010-12-13 14:18:23.171534074 +0100
@@ -82,7 +82,7 @@
 import System.Directory
 import System.IO
 import System.Posix.Files
-import Control.Exception hiding (handle)
+import Control.Exception.Extensible hiding (handle)
 
 import qualified Data.Map as M
 
@@ -627,7 +627,7 @@
 getCompletions = do
   s <- get
   io $ completionFunction s (commandToComplete (xptype s) (command s))
-       `catch` \_ -> return []
+       `catch` \(SomeException _) -> return []
 
 setComplWin :: Window -> ComplWindowDim -> XP ()
 setComplWin w wi =
@@ -758,7 +758,7 @@
 getHistoryFile = fmap (++ "/history") $ getAppUserDataDirectory "xmonad"
 
 readHistory :: IO History
-readHistory = catch readHist (const (return emptyHistory))
+readHistory = readHist `catch` \(SomeException _) -> return emptyHistory
  where
     readHist = do
         path <- getHistoryFile
@@ -768,7 +768,7 @@
 writeHistory :: History -> IO ()
 writeHistory hist = do
   path <- getHistoryFile
-  catch (writeFile path (show hist)) $ const $ hPutStrLn stderr "error in writing"
+  writeFile path (show hist) `catch` \(SomeException _) -> hPutStrLn stderr "error in writing"
   setFileMode path mode
     where mode = ownerReadMode .|. ownerWriteMode
 
diff -aur xmonad-contrib-0.9.1/XMonad/Util/NamedWindows.hs xmonad-contrib-0.9.1-ghc7/XMonad/Util/NamedWindows.hs
--- xmonad-contrib-0.9.1/XMonad/Util/NamedWindows.hs	2009-12-17 00:32:25.000000000 +0100
+++ xmonad-contrib-0.9.1-ghc7/XMonad/Util/NamedWindows.hs	2010-12-13 14:18:23.171534074 +0100
@@ -24,7 +24,7 @@
 
 import Prelude hiding ( catch )
 import Control.Applicative ( (<$>) )
-import Control.Exception ( bracket, catch )
+import Control.Exception.Extensible ( bracket, catch, SomeException(..) )
 import Data.Maybe ( fromMaybe, listToMaybe )
 
 import qualified XMonad.StackSet as W ( peek )
@@ -50,11 +50,11 @@
     let getIt = bracket getProp (xFree . tp_value) (fmap (`NW` w) . copy)
 
         getProp = (internAtom d "_NET_WM_NAME" False >>= getTextProperty d w)
-                      `catch` \_ -> getTextProperty d w wM_NAME
+                      `catch` \(SomeException _) -> getTextProperty d w wM_NAME
 
         copy prop = fromMaybe "" . listToMaybe <$> wcTextPropertyToTextList d prop
 
-    io $ getIt `catch` \_ ->  ((`NW` w) . resName) `fmap` getClassHint d w
+    io $ getIt `catch` \(SomeException _) ->  ((`NW` w) . resName) `fmap` getClassHint d w
 
 unName :: NamedWindow -> Window
 unName (NW _ w) = w
diff -aur xmonad-contrib-0.9.1/XMonad/Util/Run.hs xmonad-contrib-0.9.1-ghc7/XMonad/Util/Run.hs
--- xmonad-contrib-0.9.1/XMonad/Util/Run.hs	2009-12-17 00:32:25.000000000 +0100
+++ xmonad-contrib-0.9.1-ghc7/XMonad/Util/Run.hs	2010-12-13 14:28:05.295244078 +0100
@@ -33,8 +33,9 @@
 
 import System.Posix.IO
 import System.Posix.Process (executeFile, forkProcess, createSession)
+import System.Posix.Types (ProcessID)
 import Control.Concurrent (threadDelay)
-import Control.Exception (try) -- use OldException with base 4
+import Control.Exception.Extensible (try,SomeException)
 import System.IO
 import System.Process (runInteractiveProcess)
 import XMonad
@@ -107,7 +108,9 @@
 interpolation, whereas the safeSpawn example can be safe because
 Firefox doesn't need any arguments if it is just being started. -}
 safeSpawn :: MonadIO m => FilePath -> [String] -> m ()
-safeSpawn prog args = liftIO (try (forkProcess $ executeFile prog True args Nothing) >> return ())
+safeSpawn prog args = liftIO $ do
+    try $ forkProcess $ executeFile prog True args Nothing :: IO (Either SomeException ProcessID)
+    return ()
 
 -- | Like 'safeSpawn', but only takes a program (and no arguments for it). eg.
 --
Only in xmonad-contrib-0.9.1-ghc7/XMonad/Util: Run.hs~
diff -aur xmonad-contrib-0.9.1/XMonad/Util/XSelection.hs xmonad-contrib-0.9.1-ghc7/XMonad/Util/XSelection.hs
--- xmonad-contrib-0.9.1/XMonad/Util/XSelection.hs	2009-12-17 00:32:25.000000000 +0100
+++ xmonad-contrib-0.9.1-ghc7/XMonad/Util/XSelection.hs	2010-12-13 14:20:07.631002996 +0100
@@ -24,7 +24,7 @@
                                  putSelection) where
 
 import Control.Concurrent (forkIO)
-import Control.Exception as E (catch)
+import Control.Exception.Extensible as E (catch,SomeException(..))
 import Control.Monad(Monad (return, (>>)), Functor(..), liftM, join)
 import Data.Char (ord)
 import Data.Maybe (fromMaybe)
@@ -69,8 +69,8 @@
   ty <- E.catch
                (E.catch
                      (internAtom dpy "UTF8_STRING" False)
-                     (\_ -> internAtom dpy "COMPOUND_TEXT" False))
-             (\_ -> internAtom dpy "sTring" False)
+                     (\(E.SomeException _) -> internAtom dpy "COMPOUND_TEXT" False))
+             (\(E.SomeException _) -> internAtom dpy "sTring" False)
   clp <- internAtom dpy "BLITZ_SEL_STRING" False
   xConvertSelection dpy p ty clp win currentTime
   allocaXEvent $ \e -> do
Only in xmonad-contrib-0.9.1-ghc7/XMonad/Util: XSelection.hs~
diff -aur xmonad-contrib-0.9.1/xmonad-contrib.cabal xmonad-contrib-0.9.1-ghc7/xmonad-contrib.cabal
--- xmonad-contrib-0.9.1/xmonad-contrib.cabal	2009-12-17 00:32:25.000000000 +0100
+++ xmonad-contrib-0.9.1-ghc7/xmonad-contrib.cabal	2010-12-13 14:18:23.174867390 +0100
@@ -40,7 +40,14 @@
 
 library
     if flag(small_base)
-        build-depends: base >= 3 && < 4, containers, directory, process, random, old-time, old-locale
+        build-depends: base >= 3 && < 5,
+                       containers,
+                       directory,
+                       extensible-exceptions,
+                       old-locale,
+                       old-time,
+                       process,
+                       random
     else
         build-depends: base < 3
 
