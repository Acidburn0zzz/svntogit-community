From 62fff7d03d8785a69f56115b27081fe1081edc9b Mon Sep 17 00:00:00 2001
From: Konstantin Gizdov <kgizdov@gmail.com>
Date: Fri, 24 Jul 2020 18:23:49 +0300
Subject: [PATCH 1/6] fix regression in f8edeb9 not using correct string_view
 when CUDA C++ standard allows it

---
 cmake/modules/RootConfiguration.cmake                  | 3 +++
 config/RConfigure.in                                   | 1 +
 tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h | 3 +++
 tmva/tmva/src/DNN/Architectures/Cuda.cu                | 3 +++
 tmva/tmva/src/DNN/Architectures/Cudnn.cu               | 5 ++++-
 5 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/cmake/modules/RootConfiguration.cmake b/cmake/modules/RootConfiguration.cmake
index 1fe84d1515a..a19eafabb71 100644
--- a/cmake/modules/RootConfiguration.cmake
+++ b/cmake/modules/RootConfiguration.cmake
@@ -531,6 +531,9 @@ endif()
 if(found_stdstringview)
   CHECK_CXX_SOURCE_COMPILES("#include <string_view>
      int main() { size_t pos; std::string_view str; std::stod(str,&pos); return 0;}" found_stod_stringview)
+  if(CMAKE_CUDA_STANDARD GREATER_EQUAL CMAKE_CXX_STANDARD)
+    set(cudahasstdstringview define)
+  endif()
 elseif(found_stdexpstringview)
   CHECK_CXX_SOURCE_COMPILES("#include <experimental/string_view>
      int main() { size_t pos; std::experimental::string_view str; std::stod(str,&pos); return 0;}" found_stod_stringview)
diff --git a/config/RConfigure.in b/config/RConfigure.in
index 14921f244b0..43daff4cd66 100644
--- a/config/RConfigure.in
+++ b/config/RConfigure.in
@@ -33,6 +33,7 @@
 #@usecxxmodules@ R__USE_CXXMODULES   /**/
 #@uselibc++@ R__USE_LIBCXX    /**/
 #@hasstdstringview@ R__HAS_STD_STRING_VIEW   /**/
+#@cudahasstdstringview@ R__CUDA_HAS_STD_STRING_VIEW   /**/
 #@hasstdexpstringview@ R__HAS_STD_EXPERIMENTAL_STRING_VIEW   /**/
 #@hasstodstringview@ R__HAS_STOD_STRING_VIEW /**/
 #@hasopplusequalstringview@ R__HAS_OP_EQUAL_PLUS_STRING_VIEW /**/
diff --git a/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h b/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
index 3c224f185f1..72581eaedcd 100644
--- a/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
+++ b/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h
@@ -20,11 +20,14 @@
 #define TMVA_DNN_ARCHITECTURES_CUDA_CUDAMATRIX
 
 // in case we compile C++ code with std-17 and cuda with lower standard
+// use experimental string_view, otherwise keep as is
 #include "RConfigure.h"
 #ifdef R__HAS_STD_STRING_VIEW
+#ifndef R__CUDA_HAS_STD_STRING_VIEW
 #undef R__HAS_STD_STRING_VIEW
 #define R__HAS_STD_EXPERIMENTAL_STRING_VIEW
 #endif
+#endif
 
 #include "cuda.h"
 #include "cuda_runtime.h"
diff --git a/tmva/tmva/src/DNN/Architectures/Cuda.cu b/tmva/tmva/src/DNN/Architectures/Cuda.cu
index 56daac79850..547460017b2 100644
--- a/tmva/tmva/src/DNN/Architectures/Cuda.cu
+++ b/tmva/tmva/src/DNN/Architectures/Cuda.cu
@@ -15,11 +15,14 @@
 /////////////////////////////////////////////////////////////////
 
 // in case we compile C++ code with std-17 and cuda with lower standard
+// use experimental string_view, otherwise keep as is
 #include "RConfigure.h"
 #ifdef R__HAS_STD_STRING_VIEW
+#ifndef R__CUDA_HAS_STD_STRING_VIEW
 #undef R__HAS_STD_STRING_VIEW
 #define R__HAS_STD_EXPERIMENTAL_STRING_VIEW
 #endif
+#endif
 
 #include "TMVA/DNN/Architectures/Cuda.h"
 #include "Cuda/Propagation.cu"
diff --git a/tmva/tmva/src/DNN/Architectures/Cudnn.cu b/tmva/tmva/src/DNN/Architectures/Cudnn.cu
index 4b32d4b2d8e..15e4277d6be 100644
--- a/tmva/tmva/src/DNN/Architectures/Cudnn.cu
+++ b/tmva/tmva/src/DNN/Architectures/Cudnn.cu
@@ -15,11 +15,14 @@
 ///////////////////////////////////////////////////////////////////
 
 // in case we compile C++ code with std-17 and cuda with lower standard
+// use experimental string_view, otherwise keep as is
 #include "RConfigure.h"
 #ifdef R__HAS_STD_STRING_VIEW
+#ifndef R__CUDA_HAS_STD_STRING_VIEW
 #undef R__HAS_STD_STRING_VIEW
 #define R__HAS_STD_EXPERIMENTAL_STRING_VIEW
 #endif
+#endif
 
 #include "TMVA/DNN/Architectures/TCudnn.h"
 #include "Cudnn/Propagate.cu"
@@ -54,4 +57,4 @@ template class TCudnn<Double_t>;
 // size_t TCudnn<Double_t>::CNNOptions::ConvMaxWorkspaceSize = 0;
 
 } // end namespace DNN
-} // end namespace TMVA
\ No newline at end of file
+} // end namespace TMVA

From d30bf0190f668434f23875e201a80450b6d2dddb Mon Sep 17 00:00:00 2001
From: Konstantin Gizdov <kgizdov@gmail.com>
Date: Fri, 24 Jul 2020 18:53:53 +0300
Subject: [PATCH 2/6] set R__CUDA_HAS_STD_STRING_VIEW to undef in all other
 cases

---
 cmake/modules/RootConfiguration.cmake | 1 +
 1 file changed, 1 insertion(+)

diff --git a/cmake/modules/RootConfiguration.cmake b/cmake/modules/RootConfiguration.cmake
index a19eafabb71..c9f7206d12c 100644
--- a/cmake/modules/RootConfiguration.cmake
+++ b/cmake/modules/RootConfiguration.cmake
@@ -528,6 +528,7 @@ else()
   endif()
 endif()
 
+set(cudahasstdstringview undef)
 if(found_stdstringview)
   CHECK_CXX_SOURCE_COMPILES("#include <string_view>
      int main() { size_t pos; std::string_view str; std::stod(str,&pos); return 0;}" found_stod_stringview)

From 5e473046f480af31e038b04a0a8101f3c86ab590 Mon Sep 17 00:00:00 2001
From: Konstantin Gizdov <kgizdov@gmail.com>
Date: Sat, 25 Jul 2020 01:48:18 +0300
Subject: [PATCH 3/6] re-locate to correct place in configuration and check by
 compilation

---
 cmake/modules/RootConfiguration.cmake | 43 ++++++++++++++++++++++++---
 1 file changed, 39 insertions(+), 4 deletions(-)

diff --git a/cmake/modules/RootConfiguration.cmake b/cmake/modules/RootConfiguration.cmake
index c9f7206d12c..d306245199c 100644
--- a/cmake/modules/RootConfiguration.cmake
+++ b/cmake/modules/RootConfiguration.cmake
@@ -512,10 +512,49 @@ unset(found_stdexpstringview CACHE)
 unset(found_stod_stringview CACHE)
 
 set(hasstdexpstringview undef)
+set(cudahasstdstringview undef)
 CHECK_CXX_SOURCE_COMPILES("#include <string_view>
   int main() { char arr[3] = {'B', 'a', 'r'}; std::string_view strv(arr, sizeof(arr)); return 0;}" found_stdstringview)
 if(found_stdstringview)
   set(hasstdstringview define)
+  if(cuda)
+    if(CMAKE_CUDA_STANDARD GREATER_EQUAL CMAKE_CXX_STANDARD)
+      # CUDA_NVCC_EXECUTABLE
+      if(DEFINED ENV{CUDA_NVCC_EXECUTABLE})
+        set(CUDA_NVCC_EXECUTABLE "$ENV{CUDA_NVCC_EXECUTABLE}" CACHE FILEPATH "The CUDA compiler")
+      else()
+        find_program(CUDA_NVCC_EXECUTABLE
+          NAMES nvcc nvcc.exe
+          PATHS "${CUDA_TOOLKIT_ROOT_DIR}"
+            ENV CUDA_TOOKIT_ROOT
+            ENV CUDA_PATH
+            ENV CUDA_BIN_PATH
+          PATH_SUFFIXES bin bin64
+          DOC "The CUDA compiler"
+          NO_DEFAULT_PATH
+        )
+        find_program(CUDA_NVCC_EXECUTABLE
+          NAMES nvcc nvcc.exe
+          PATHS /opt/cuda/bin
+          PATH_SUFFIXES cuda/bin
+          DOC "The CUDA compiler"
+        )
+        # Search default search paths, after we search our own set of paths.
+        find_program(CUDA_NVCC_EXECUTABLE nvcc)
+      endif()
+      mark_as_advanced(CUDA_NVCC_EXECUTABLE)
+      if(CUDA_NVCC_EXECUTABLE)
+        execute_process(COMMAND "echo"
+          "-e" "#include <string_view>\nint main() { char arr[3] = {'B', 'a', 'r'}; std::string_view strv(arr, sizeof(arr)); return 0;}"
+          "|"
+          "${CUDA_NVCC_EXECUTABLE}" "-std=c++${CMAKE_CUDA_STANDARD}" "-o" "/dev/null" "-x" "c++" "-"
+          RESULT_VARIABLE nvcc_compiled_string_view)
+        if (nvcc_compiled_string_view EQUAL "0")
+          set(cudahasstdstringview define)
+        endif()
+      endif()
+    endif()
+  endif()
 else()
   set(hasstdstringview undef)
 
@@ -528,13 +567,9 @@ else()
   endif()
 endif()
 
-set(cudahasstdstringview undef)
 if(found_stdstringview)
   CHECK_CXX_SOURCE_COMPILES("#include <string_view>
      int main() { size_t pos; std::string_view str; std::stod(str,&pos); return 0;}" found_stod_stringview)
-  if(CMAKE_CUDA_STANDARD GREATER_EQUAL CMAKE_CXX_STANDARD)
-    set(cudahasstdstringview define)
-  endif()
 elseif(found_stdexpstringview)
   CHECK_CXX_SOURCE_COMPILES("#include <experimental/string_view>
      int main() { size_t pos; std::experimental::string_view str; std::stod(str,&pos); return 0;}" found_stod_stringview)

From 32e1f3c0cec557c4fa82a07992ae9c1cd4075fcf Mon Sep 17 00:00:00 2001
From: Konstantin Gizdov <kgizdov@gmail.com>
Date: Sat, 25 Jul 2020 01:50:20 +0300
Subject: [PATCH 4/6] no need to compare C++ standard between CUDA and host
 anymore

---
 cmake/modules/RootConfiguration.cmake | 66 +++++++++++++--------------
 1 file changed, 32 insertions(+), 34 deletions(-)

diff --git a/cmake/modules/RootConfiguration.cmake b/cmake/modules/RootConfiguration.cmake
index d306245199c..2eff954ef94 100644
--- a/cmake/modules/RootConfiguration.cmake
+++ b/cmake/modules/RootConfiguration.cmake
@@ -518,40 +518,38 @@ CHECK_CXX_SOURCE_COMPILES("#include <string_view>
 if(found_stdstringview)
   set(hasstdstringview define)
   if(cuda)
-    if(CMAKE_CUDA_STANDARD GREATER_EQUAL CMAKE_CXX_STANDARD)
-      # CUDA_NVCC_EXECUTABLE
-      if(DEFINED ENV{CUDA_NVCC_EXECUTABLE})
-        set(CUDA_NVCC_EXECUTABLE "$ENV{CUDA_NVCC_EXECUTABLE}" CACHE FILEPATH "The CUDA compiler")
-      else()
-        find_program(CUDA_NVCC_EXECUTABLE
-          NAMES nvcc nvcc.exe
-          PATHS "${CUDA_TOOLKIT_ROOT_DIR}"
-            ENV CUDA_TOOKIT_ROOT
-            ENV CUDA_PATH
-            ENV CUDA_BIN_PATH
-          PATH_SUFFIXES bin bin64
-          DOC "The CUDA compiler"
-          NO_DEFAULT_PATH
-        )
-        find_program(CUDA_NVCC_EXECUTABLE
-          NAMES nvcc nvcc.exe
-          PATHS /opt/cuda/bin
-          PATH_SUFFIXES cuda/bin
-          DOC "The CUDA compiler"
-        )
-        # Search default search paths, after we search our own set of paths.
-        find_program(CUDA_NVCC_EXECUTABLE nvcc)
-      endif()
-      mark_as_advanced(CUDA_NVCC_EXECUTABLE)
-      if(CUDA_NVCC_EXECUTABLE)
-        execute_process(COMMAND "echo"
-          "-e" "#include <string_view>\nint main() { char arr[3] = {'B', 'a', 'r'}; std::string_view strv(arr, sizeof(arr)); return 0;}"
-          "|"
-          "${CUDA_NVCC_EXECUTABLE}" "-std=c++${CMAKE_CUDA_STANDARD}" "-o" "/dev/null" "-x" "c++" "-"
-          RESULT_VARIABLE nvcc_compiled_string_view)
-        if (nvcc_compiled_string_view EQUAL "0")
-          set(cudahasstdstringview define)
-        endif()
+    # CUDA_NVCC_EXECUTABLE
+    if(DEFINED ENV{CUDA_NVCC_EXECUTABLE})
+      set(CUDA_NVCC_EXECUTABLE "$ENV{CUDA_NVCC_EXECUTABLE}" CACHE FILEPATH "The CUDA compiler")
+    else()
+      find_program(CUDA_NVCC_EXECUTABLE
+        NAMES nvcc nvcc.exe
+        PATHS "${CUDA_TOOLKIT_ROOT_DIR}"
+          ENV CUDA_TOOKIT_ROOT
+          ENV CUDA_PATH
+          ENV CUDA_BIN_PATH
+        PATH_SUFFIXES bin bin64
+        DOC "The CUDA compiler"
+        NO_DEFAULT_PATH
+      )
+      find_program(CUDA_NVCC_EXECUTABLE
+        NAMES nvcc nvcc.exe
+        PATHS /opt/cuda/bin
+        PATH_SUFFIXES cuda/bin
+        DOC "The CUDA compiler"
+      )
+      # Search default search paths, after we search our own set of paths.
+      find_program(CUDA_NVCC_EXECUTABLE nvcc)
+    endif()
+    mark_as_advanced(CUDA_NVCC_EXECUTABLE)
+    if(CUDA_NVCC_EXECUTABLE)
+      execute_process(COMMAND "echo"
+        "-e" "#include <string_view>\nint main() { char arr[3] = {'B', 'a', 'r'}; std::string_view strv(arr, sizeof(arr)); return 0;}"
+        "|"
+        "${CUDA_NVCC_EXECUTABLE}" "-std=c++${CMAKE_CUDA_STANDARD}" "-o" "/dev/null" "-x" "c++" "-"
+        RESULT_VARIABLE nvcc_compiled_string_view)
+      if (nvcc_compiled_string_view EQUAL "0")
+        set(cudahasstdstringview define)
       endif()
     endif()
   endif()

From fccf1ba488fb7da334ef89e9df098bbdeee83ca5 Mon Sep 17 00:00:00 2001
From: Konstantin Gizdov <kgizdov@gmail.com>
Date: Sat, 25 Jul 2020 02:39:22 +0300
Subject: [PATCH 5/6] find NVCC early; fix CMake execute process

---
 cmake/modules/RootConfiguration.cmake       | 32 +++------------------
 cmake/modules/SearchInstalledSoftware.cmake | 24 ++++++++++++++++
 2 files changed, 28 insertions(+), 28 deletions(-)

diff --git a/cmake/modules/RootConfiguration.cmake b/cmake/modules/RootConfiguration.cmake
index 2eff954ef94..11d1e6b76c0 100644
--- a/cmake/modules/RootConfiguration.cmake
+++ b/cmake/modules/RootConfiguration.cmake
@@ -518,35 +518,11 @@ CHECK_CXX_SOURCE_COMPILES("#include <string_view>
 if(found_stdstringview)
   set(hasstdstringview define)
   if(cuda)
-    # CUDA_NVCC_EXECUTABLE
-    if(DEFINED ENV{CUDA_NVCC_EXECUTABLE})
-      set(CUDA_NVCC_EXECUTABLE "$ENV{CUDA_NVCC_EXECUTABLE}" CACHE FILEPATH "The CUDA compiler")
-    else()
-      find_program(CUDA_NVCC_EXECUTABLE
-        NAMES nvcc nvcc.exe
-        PATHS "${CUDA_TOOLKIT_ROOT_DIR}"
-          ENV CUDA_TOOKIT_ROOT
-          ENV CUDA_PATH
-          ENV CUDA_BIN_PATH
-        PATH_SUFFIXES bin bin64
-        DOC "The CUDA compiler"
-        NO_DEFAULT_PATH
-      )
-      find_program(CUDA_NVCC_EXECUTABLE
-        NAMES nvcc nvcc.exe
-        PATHS /opt/cuda/bin
-        PATH_SUFFIXES cuda/bin
-        DOC "The CUDA compiler"
-      )
-      # Search default search paths, after we search our own set of paths.
-      find_program(CUDA_NVCC_EXECUTABLE nvcc)
-    endif()
-    mark_as_advanced(CUDA_NVCC_EXECUTABLE)
     if(CUDA_NVCC_EXECUTABLE)
-      execute_process(COMMAND "echo"
-        "-e" "#include <string_view>\nint main() { char arr[3] = {'B', 'a', 'r'}; std::string_view strv(arr, sizeof(arr)); return 0;}"
-        "|"
-        "${CUDA_NVCC_EXECUTABLE}" "-std=c++${CMAKE_CUDA_STANDARD}" "-o" "/dev/null" "-x" "c++" "-"
+      execute_process(
+        COMMAND "echo"
+          "-e" "#include <string_view>\nint main() { char arr[3] = {'B', 'a', 'r'}; std::string_view strv(arr, sizeof(arr)); return 0;}"
+        COMMAND "${CUDA_NVCC_EXECUTABLE}" "-std=c++${CMAKE_CUDA_STANDARD}" "-o" "/dev/null" "-x" "c++" "-"
         RESULT_VARIABLE nvcc_compiled_string_view)
       if (nvcc_compiled_string_view EQUAL "0")
         set(cudahasstdstringview define)
diff --git a/cmake/modules/SearchInstalledSoftware.cmake b/cmake/modules/SearchInstalledSoftware.cmake
index 12f9d65371b..297578d3437 100644
--- a/cmake/modules/SearchInstalledSoftware.cmake
+++ b/cmake/modules/SearchInstalledSoftware.cmake
@@ -1462,6 +1462,30 @@ if(cuda OR tmva-gpu)
     endif()
     enable_language(CUDA)
     set(cuda ON CACHE BOOL "Found Cuda for TMVA GPU" FORCE)
+    # CUDA_NVCC_EXECUTABLE
+    if(DEFINED ENV{CUDA_NVCC_EXECUTABLE})
+      set(CUDA_NVCC_EXECUTABLE "$ENV{CUDA_NVCC_EXECUTABLE}" CACHE FILEPATH "The CUDA compiler")
+    else()
+      find_program(CUDA_NVCC_EXECUTABLE
+        NAMES nvcc nvcc.exe
+        PATHS "${CUDA_TOOLKIT_ROOT_DIR}"
+          ENV CUDA_TOOKIT_ROOT
+          ENV CUDA_PATH
+          ENV CUDA_BIN_PATH
+        PATH_SUFFIXES bin bin64
+        DOC "The CUDA compiler"
+        NO_DEFAULT_PATH
+      )
+      find_program(CUDA_NVCC_EXECUTABLE
+        NAMES nvcc nvcc.exe
+        PATHS /opt/cuda/bin
+        PATH_SUFFIXES cuda/bin
+        DOC "The CUDA compiler"
+      )
+      # Search default search paths, after we search our own set of paths.
+      find_program(CUDA_NVCC_EXECUTABLE nvcc)
+    endif()
+    mark_as_advanced(CUDA_NVCC_EXECUTABLE)
     ###
     ### look for package CuDNN
     if (cudnn)

From bd7728fe40fa98640354baeab6504b4b499327c0 Mon Sep 17 00:00:00 2001
From: Konstantin Gizdov <kgizdov@gmail.com>
Date: Sat, 25 Jul 2020 02:44:25 +0300
Subject: [PATCH 6/6] null sinks differ on different platforms

---
 cmake/modules/RootConfiguration.cmake | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/cmake/modules/RootConfiguration.cmake b/cmake/modules/RootConfiguration.cmake
index 11d1e6b76c0..5a3ff396780 100644
--- a/cmake/modules/RootConfiguration.cmake
+++ b/cmake/modules/RootConfiguration.cmake
@@ -519,11 +519,17 @@ if(found_stdstringview)
   set(hasstdstringview define)
   if(cuda)
     if(CUDA_NVCC_EXECUTABLE)
+      if (WIN32)
+        set(PLATFORM_NULL_FILE "nul")
+      else()
+        set(PLATFORM_NULL_FILE "/dev/null")
+      endif()
       execute_process(
         COMMAND "echo"
           "-e" "#include <string_view>\nint main() { char arr[3] = {'B', 'a', 'r'}; std::string_view strv(arr, sizeof(arr)); return 0;}"
-        COMMAND "${CUDA_NVCC_EXECUTABLE}" "-std=c++${CMAKE_CUDA_STANDARD}" "-o" "/dev/null" "-x" "c++" "-"
+        COMMAND "${CUDA_NVCC_EXECUTABLE}" "-std=c++${CMAKE_CUDA_STANDARD}" "-o" "${PLATFORM_NULL_FILE}" "-x" "c++" "-"
         RESULT_VARIABLE nvcc_compiled_string_view)
+      unset(PLATFORM_NULL_FILE CACHE)
       if (nvcc_compiled_string_view EQUAL "0")
         set(cudahasstdstringview define)
       endif()
