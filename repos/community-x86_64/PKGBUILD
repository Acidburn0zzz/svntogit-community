# Maintainer: Sven-Hendrik Haase <sh@lutzhaase.com>
# Contributor: Adria Arrufat (archdria) <adria.arrufat+AUR@protonmail.ch>
# Contributor: Thibault Lorrain (fredszaq) <fredszaq@gmail.com>

pkgbase=tensorflow
pkgname=(tensorflow tensorflow-cuda python-tensorflow python-tensorflow-cuda)
pkgver=1.2.0
pkgrel=1
pkgdesc="Library for computation using data flow graphs for scalable machine learning"
url="https://www.tensorflow.org/"
license=('Apache2')
arch=('x86_64')
makedepends=('git' 'bazel' 'python-numpy' 'gcc5' 'cuda' 'cudnn' 'python-pip' 'python-wheel' 'python-setuptools')
source=("https://github.com/tensorflow/tensorflow/archive/v${pkgver}.tar.gz"
        10868.patch)
sha512sums=('7f51060e35bdf313f043fdf99c174ec7a734463c5ea7436380428fd3900421c656b61d00fb9c7492b97172a0bd963502dc0ff4cabd31d91297ed99065842647d'
            '90940827ea6cbc6694b14ea276a37c5f8af027317873d67a8b40802d8d75a81984c283335bf62cc5b5fa63023c9cc9b414a145d3019124127c5f15472bfdfcec')

prepare() {
  patch -Np1 -d tensorflow-${pkgver} < ${srcdir}/10868.patch

  cp -r tensorflow-${pkgver} tensorflow-${pkgver}-cuda
  # These environment variables influence the behavior of the configure call below.
  export TF_NEED_MKL=0
  export PYTHON_BIN_PATH=/usr/bin/python
  export USE_DEFAULT_PYTHON_LIB_PATH=1
  export CC_OPT_FLAGS="-march=x86-64"
  export TF_NEED_JEMALLOC=1
  export TF_NEED_GCP=0
  export TF_NEED_HDFS=0
  export TF_ENABLE_XLA=1
  export TF_NEED_VERBS=0
  export TF_NEED_OPENCL=0
}

build() {
  cd ${srcdir}/tensorflow-${pkgver}

  export TF_NEED_CUDA=0

  ./configure
  bazel build --config=opt //tensorflow:libtensorflow.so //tensorflow/tools/pip_package:build_pip_package
  bazel-bin/tensorflow/tools/pip_package/build_pip_package ${srcdir}/tmp

  cd ${srcdir}/tensorflow-${pkgver}-cuda

  export TF_NEED_CUDA=1
  export GCC_HOST_COMPILER_PATH=/usr/bin/gcc-5
  # For next version instead of the gcc-5 stuff:
  export TF_CUDA_CLANG=0
  # export CLANG_CUDA_COMPILER_PATH=/usr/bin/clang
  export CUDA_TOOLKIT_PATH=/opt/cuda
  export TF_CUDA_VERSION=$($CUDA_TOOLKIT_PATH/bin/nvcc --version | sed -n 's/^.*release \(.*\),.*/\1/p')
  export CUDNN_INSTALL_PATH=/opt/cuda
  export TF_CUDNN_VERSION=$(sed -n 's/^#define CUDNN_MAJOR\s*\(.*\).*/\1/p' $CUDNN_INSTALL_PATH/include/cudnn.h)
  export TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,5.2,6.1

  ./configure
  bazel build --config=opt --config=cuda //tensorflow:libtensorflow.so //tensorflow/tools/pip_package:build_pip_package
  bazel-bin/tensorflow/tools/pip_package/build_pip_package ${srcdir}/tmpcuda
}

package_tensorflow() {
  cd ${srcdir}/tensorflow-${pkgver}

  install -Dm755 bazel-bin/tensorflow/libtensorflow.so ${pkgdir}/usr/lib/lib${pkgname}.so
  install -Dm644 tensorflow/c/c_api.h ${pkgdir}/usr/include/${pkgname}/c_api.h
  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE
}

package_tensorflow-cuda() {
  depends=(cuda cudnn)
  conflicts=(tensorflow)
  provides=(tensorflow)

  cd ${srcdir}/tensorflow-${pkgver}-cuda

  install -Dm755 bazel-bin/tensorflow/libtensorflow.so ${pkgdir}/usr/lib/lib${pkgname}.so
  install -Dm644 tensorflow/c/c_api.h ${pkgdir}/usr/include/${pkgname}/c_api.h
  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE
}

package_python-tensorflow() {
  depends=(python python-protobuf)
  optdepends=('python-werkzeug: for using tensorboard')

  cd ${srcdir}/tensorflow-${pkgver}

  WHEEL_PACKAGE=$(find ${srcdir}/tmp -name "tensor*.whl")
  pip install --ignore-installed --upgrade --root $pkgdir/ $WHEEL_PACKAGE --no-dependencies
  find ${pkgdir} -name __pycache__ -exec rm -r {} +

  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE
}

package_python-tensorflow-cuda() {
  depends=(python cuda cudnn python-pycuda python-protobuf)
  conflicts=(python-tensorflow)
  provides=(python-tensorflow)
  optdepends=('python-werkzeug: for using tensorboard')

  cd ${srcdir}/tensorflow-${pkgver}-cuda

  WHEEL_PACKAGE=$(find ${srcdir}/tmpcuda -name "tensor*.whl")
  pip install --ignore-installed --upgrade --root $pkgdir/ $WHEEL_PACKAGE --no-dependencies
  find ${pkgdir} -name __pycache__ -exec rm -r {} +

  install -Dm644 LICENSE ${pkgdir}/usr/share/licenses/${pkgname}/LICENSE
}

# vim:set ts=2 sw=2 et:
