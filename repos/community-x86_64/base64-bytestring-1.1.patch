--- project-template-0.2.0.1/Text/ProjectTemplate.hs.orig	2020-04-26 07:50:54.007400644 +0800
+++ project-template-0.2.0.1/Text/ProjectTemplate.hs	2020-04-26 07:56:46.698254606 +0800
@@ -1,3 +1,4 @@
+{-# LANGUAGE BangPatterns          #-}
 {-# LANGUAGE DeriveDataTypeable    #-}
 {-# LANGUAGE FlexibleContexts      #-}
 {-# LANGUAGE MultiParamTypeClasses #-}
@@ -15,6 +16,7 @@
     , receiveFS
       -- * Exceptions
     , ProjectTemplateException (..)
+    , joinWith
     ) where
 
 import           Control.Exception            (Exception, assert)
@@ -27,6 +29,7 @@
 import           Data.ByteString              (ByteString)
 import qualified Data.ByteString              as S
 import qualified Data.ByteString.Base64       as B64
+import           Data.ByteString.Internal
 import qualified Data.ByteString.Lazy         as L
 import           Data.Conduit                 (ConduitM, await,
                                                awaitForever, leftover, yield,
@@ -42,6 +45,8 @@
 import           Data.Text.Encoding           (encodeUtf8)
 import           Data.Typeable                (Typeable)
 import           Data.Void                    (Void)
+import           Foreign.ForeignPtr           (withForeignPtr)
+import           Foreign.Ptr                  (minusPtr, plusPtr)
 import           System.Directory             (createDirectoryIfMissing)
 import           System.FilePath              (takeDirectory, (</>))
 
@@ -57,7 +62,7 @@
             yield "{-# START_FILE BASE64 "
             yield $ encodeUtf8 $ T.pack fp
             yield " #-}\n"
-            yield $ B64.joinWith "\n" 76 $ B64.encode bs
+            yield $ joinWith "\n" 76 $ B64.encode bs
             yield "\n"
         Just _ -> do
             yield "{-# START_FILE "
@@ -194,3 +199,45 @@
 
         assertion1 = assert $ S.length bs1 < size
         assertion2 = assert $ S.length bs1' `mod` size == 0
+
+-- | Efficiently intersperse a terminator string into another at
+-- regular intervals, and terminate the input with it.
+--
+-- Examples:
+--
+-- > joinWith "|" 2 "----" = "--|--|"
+--
+-- > joinWith "\r\n" 3 "foobarbaz" = "foo\r\nbar\r\nbaz\r\n"
+-- > joinWith "x" 3 "fo" = "fox"
+joinWith :: ByteString  -- ^ String to intersperse and end with
+         -> Int         -- ^ Interval at which to intersperse, in bytes
+         -> ByteString  -- ^ String to transform
+         -> ByteString
+joinWith brk@(PS bfp boff blen) every' bs@(PS sfp soff slen)
+    | every' <= 0 = error "invalid interval"
+    | blen <= 0  = bs
+    | S.null bs = brk
+    | otherwise =
+  unsafeCreate dlen $ \dptr ->
+    withForeignPtr bfp $ \bptr -> do
+      withForeignPtr sfp $ \sptr -> do
+          let bp = bptr `plusPtr` boff
+              sp0 = sptr `plusPtr` soff
+              sEnd = sp0 `plusPtr` slen
+              dLast = dptr `plusPtr` dlen
+              loop !dp !sp !written
+                  | dp == dLast = return ()
+                  | otherwise = do
+                let chunkSize = min every (sEnd `minusPtr` sp)
+                memcpy dp sp (fromIntegral chunkSize)
+                let dp' = dp `plusPtr` chunkSize
+                memcpy dp' bp (fromIntegral blen)
+                let written' = written + chunkSize + blen
+                assert (written' <= dlen) $
+                  loop (dp' `plusPtr` blen) (sp `plusPtr` chunkSize) written'
+          loop dptr sp0 0
+  where dlast = slen + blen * numBreaks
+        every = min slen every'
+        dlen | rmndr > 0   = dlast + blen
+             | otherwise   = dlast
+        (numBreaks, rmndr) = slen `divMod` every
--- project-template-0.2.0.1/test/Text/ProjectTemplateSpec.hs.orig	2020-04-26 07:57:51.111744199 +0800
+++ project-template-0.2.0.1/test/Text/ProjectTemplateSpec.hs	2020-04-26 07:58:20.858483053 +0800
@@ -31,7 +31,7 @@
     describe "binaries" $ do
         prop "works with multilines" $ \words' -> do
             let bs = S.pack words'
-                encoded = B64.joinWith "\n" 5 $ B64.encode bs
+                encoded = joinWith "\n" 5 $ B64.encode bs
                 content = "{-# START_FILE BASE64 foo #-}\n" `mappend` encoded
             m <- execWriterT $ runConduit $ yield content .| unpackTemplate receiveMem id
             Map.lookup "foo" m `shouldBe` Just (L.fromChunks [bs])
