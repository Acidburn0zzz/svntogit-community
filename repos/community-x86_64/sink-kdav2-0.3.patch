--- a/examples/webdavcommon/webdav.cpp
+++ b/examples/webdavcommon/webdav.cpp
@@ -30,7 +30,6 @@
 #include <KDAV2/DavItemFetchJob>
 #include <KDAV2/DavItemModifyJob>
 #include <KDAV2/DavItemsListJob>
-#include <KDAV2/EtagCache>
 
 #include <QNetworkReply>
 
@@ -185,8 +184,7 @@ KAsync::Job<void> WebDavSynchronizer::synchronizeCollection(const KDAV2::DavColl
 
     auto localRid = collectionLocalResourceID(collection);
 
-    auto cache = std::make_shared<KDAV2::EtagCache>();
-    auto davItemsListJob = new KDAV2::DavItemsListJob(collection.url(), std::move(cache));
+    auto davItemsListJob = new KDAV2::DavItemsListJob(collection.url());
 
     return runJob<KDAV2::DavItem::List>(davItemsListJob,
         [](KJob *job) { return static_cast<KDAV2::DavItemsListJob *>(job)->items(); })
--- a/examples/caldavresource/tests/caldavtest.cpp   2019-09-03 06:15:09.729849491 +0000
+++ b/examples/caldavresource/tests/caldavtest.cpp   2019-09-03 06:15:28.636780329 +0000
@@ -4,7 +4,6 @@
 #include <KDAV2/DavItemFetchJob>
 #include <KDAV2/DavItemModifyJob>
 #include <KDAV2/DavItemsListJob>
-#include <KDAV2/EtagCache>
 
 #include <KCalCore/Event>
 #include <KCalCore/ICalFormat>
@@ -266,8 +265,7 @@
             })();
 
             auto itemList = ([&collection]() -> KDAV2::DavItem::List {
-                auto cache = std::make_shared<KDAV2::EtagCache>();
-                auto itemsListJob = new KDAV2::DavItemsListJob(collection.url(), cache);
+                auto itemsListJob = new KDAV2::DavItemsListJob(collection.url());
                 itemsListJob->exec();
                 Q_ASSERT(itemsListJob->error() == 0);
                 return itemsListJob->items();
--- a/examples/imapresource/imapserverproxy.cpp   2019-09-03 06:19:55.527175867 +0000
+++ b/examples/imapresource/imapserverproxy.cpp   2019-09-03 06:21:28.805145783 +0000
@@ -69,11 +69,11 @@
     const bool isLoginJob = dynamic_cast<KIMAP2::LoginJob*>(job);
     const bool isSelectJob = dynamic_cast<KIMAP2::SelectJob*>(job);
     switch (error) {
-        case KIMAP2::LoginJob::ErrorCode::ERR_HOST_NOT_FOUND:
+        case KIMAP2::HostNotFound:
             return Imap::HostNotFoundError;
-        case KIMAP2::LoginJob::ErrorCode::ERR_COULD_NOT_CONNECT:
+        case KIMAP2::CouldNotConnect:
             return Imap::CouldNotConnectError;
-        case KIMAP2::LoginJob::ErrorCode::ERR_SSL_HANDSHAKE_FAILED:
+        case KIMAP2::SslHandshakeFailed:
             return Imap::SslHandshakeError;
     }
     //Hack to detect login failures
