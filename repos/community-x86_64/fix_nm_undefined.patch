--- a/panels/network/network-dialogs.c
+++ b/panels/network/network-dialogs.c
@@ -30,7 +30,7 @@
 #include <nm-device-wifi.h>
 
 #include "network-dialogs.h"
-#include "nm-wireless-dialog.h"
+#include "nm-wifi-dialog.h"
 #include "nm-mobile-wizard.h"
 
 typedef struct {
@@ -108,10 +108,10 @@ nag_dialog_response_cb (GtkDialog *nag_d
                         gint response,
                         gpointer user_data)
 {
-	NMAWirelessDialog *wireless_dialog = NMA_WIRELESS_DIALOG (user_data);
+	NMAWifiDialog *wireless_dialog = NMA_WIFI_DIALOG (user_data);
 
 	if (response == GTK_RESPONSE_NO) {  /* user opted not to correct the warning */
-		nma_wireless_dialog_set_nag_ignored (wireless_dialog, TRUE);
+		nma_wifi_dialog_set_nag_ignored (wireless_dialog, TRUE);
 		gtk_dialog_response (GTK_DIALOG (wireless_dialog), GTK_RESPONSE_OK);
 	}
 }
@@ -121,7 +121,7 @@ wireless_dialog_response_cb (GtkDialog *
                              gint response,
                              gpointer user_data)
 {
-	NMAWirelessDialog *dialog = NMA_WIRELESS_DIALOG (foo);
+	NMAWifiDialog *dialog = NMA_WIFI_DIALOG (foo);
 	WirelessDialogClosure *closure = user_data;
 	NMConnection *connection, *fuzzy_match = NULL;
 	NMDevice *device;
@@ -131,13 +131,13 @@ wireless_dialog_response_cb (GtkDialog *
 	if (response != GTK_RESPONSE_OK)
 		goto done;
 
-	if (!nma_wireless_dialog_get_nag_ignored (dialog)) {
+	if (!nma_wifi_dialog_get_nag_ignored (dialog)) {
 		GtkWidget *nag_dialog;
 
 		/* Nag the user about certificates or whatever.  Only destroy the dialog
 		 * if no nagging was done.
 		 */
-		nag_dialog = nma_wireless_dialog_nag_user (dialog);
+		nag_dialog = nma_wifi_dialog_nag_user (dialog);
 		if (nag_dialog) {
 			gtk_window_set_transient_for (GTK_WINDOW (nag_dialog), GTK_WINDOW (dialog));
 			g_signal_connect (nag_dialog, "response",
@@ -147,10 +147,10 @@ wireless_dialog_response_cb (GtkDialog *
 		}
 	}
 
-	/* nma_wireless_dialog_get_connection() returns a connection with the
+	/* nma_wifi_dialog_get_connection() returns a connection with the
 	 * refcount incremented, so the caller must remember to unref it.
 	 */
-	connection = nma_wireless_dialog_get_connection (dialog, &device, &ap);
+	connection = nma_wifi_dialog_get_connection (dialog, &device, &ap);
 	g_assert (connection);
 	g_assert (device);
 
@@ -201,7 +201,7 @@ wireless_dialog_response_cb (GtkDialog *
 		                                       NULL);
 	}
 
-	/* Balance nma_wireless_dialog_get_connection() */
+	/* Balance nma_wifi_dialog_get_connection() */
 	g_object_unref (connection);
 
 done:
@@ -237,7 +237,7 @@ cc_network_panel_create_wifi_network (Cc
 {
   if (wifi_can_create_wifi_network (client)) {
           show_wireless_dialog (panel, client, settings,
-                                nma_wireless_dialog_new_for_create (client, settings));
+                                nma_wifi_dialog_new_for_create (client, settings));
   }
 }
 
@@ -248,7 +248,7 @@ cc_network_panel_connect_to_hidden_netwo
 {
         g_debug ("connect to hidden wifi");
         show_wireless_dialog (panel, client, settings,
-                              nma_wireless_dialog_new_for_other (client, settings));
+                              nma_wifi_dialog_new_for_other (client, settings));
 }
 
 void
@@ -312,7 +312,7 @@ cc_network_panel_connect_to_8021x_networ
         g_object_set (s_8021x, NM_SETTING_802_1X_PHASE2_AUTH, "mschapv2", NULL);
         nm_connection_add_setting (connection, NM_SETTING (s_8021x));
 
-        dialog = nma_wireless_dialog_new (client, settings, connection, device, ap, FALSE);
+        dialog = nma_wifi_dialog_new (client, settings, connection, device, ap, FALSE);
         show_wireless_dialog (panel, client, settings, dialog);
 }
 
